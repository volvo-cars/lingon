// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package tekton

import (
	rbacv1 "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var AggregateEditCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/instance":                   "default",
			"app.kubernetes.io/part-of":                    "tekton-pipelines",
			"rbac.authorization.k8s.io/aggregate-to-admin": "true",
			"rbac.authorization.k8s.io/aggregate-to-edit":  "true",
		},
		Name: "tekton-aggregate-edit",
	},
	Rules: []rbacv1.PolicyRule{rbacv1.PolicyRule{
		APIGroups: []string{"tekton.dev"},
		Resources: []string{"tasks", "taskruns", "pipelines", "pipelineruns", "pipelineresources", "runs", "customruns"},
		Verbs:     []string{"create", "delete", "deletecollection", "get", "list", "patch", "update", "watch"},
	}},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "rbac.authorization.k8s.io/v1",
		Kind:       "ClusterRole",
	},
}

var AggregateViewCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/instance":                  "default",
			"app.kubernetes.io/part-of":                   "tekton-pipelines",
			"rbac.authorization.k8s.io/aggregate-to-view": "true",
		},
		Name: "tekton-aggregate-view",
	},
	Rules: []rbacv1.PolicyRule{rbacv1.PolicyRule{
		APIGroups: []string{"tekton.dev"},
		Resources: []string{"tasks", "taskruns", "pipelines", "pipelineruns", "pipelineresources", "runs", "customruns"},
		Verbs:     []string{"get", "list", "watch"},
	}},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "rbac.authorization.k8s.io/v1",
		Kind:       "ClusterRole",
	},
}

var PipelinesControllerClusterAccessCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/component": "controller",
			"app.kubernetes.io/instance":  "default",
			"app.kubernetes.io/part-of":   "tekton-pipelines",
		},
		Name: "tekton-pipelines-controller-cluster-access",
	},
	Rules: []rbacv1.PolicyRule{rbacv1.PolicyRule{
		APIGroups: []string{},
		Resources: []string{"pods"},
		Verbs:     []string{"list", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"tekton.dev"},
		Resources: []string{"tasks", "clustertasks", "taskruns", "pipelines", "pipelineruns", "pipelineresources", "runs", "customruns"},
		Verbs:     []string{"get", "list", "create", "update", "delete", "patch", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"tekton.dev"},
		Resources: []string{"verificationpolicies"},
		Verbs:     []string{"get", "list", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"tekton.dev"},
		Resources: []string{"taskruns/finalizers", "pipelineruns/finalizers", "runs/finalizers", "customruns/finalizers"},
		Verbs:     []string{"get", "list", "create", "update", "delete", "patch", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"tekton.dev"},
		Resources: []string{"tasks/status", "clustertasks/status", "taskruns/status", "pipelines/status", "pipelineruns/status", "pipelineresources/status", "runs/status", "customruns/status", "verificationpolicies/status"},
		Verbs:     []string{"get", "list", "create", "update", "delete", "patch", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"resolution.tekton.dev"},
		Resources: []string{"resolutionrequests", "resolutionrequests/status"},
		Verbs:     []string{"get", "list", "create", "update", "delete", "patch", "watch"},
	}},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "rbac.authorization.k8s.io/v1",
		Kind:       "ClusterRole",
	},
}

var PipelinesControllerTenantAccessCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/component": "controller",
			"app.kubernetes.io/instance":  "default",
			"app.kubernetes.io/part-of":   "tekton-pipelines",
		},
		Name: "tekton-pipelines-controller-tenant-access",
	},
	Rules: []rbacv1.PolicyRule{rbacv1.PolicyRule{
		APIGroups: []string{},
		Resources: []string{"pods", "persistentvolumeclaims"},
		Verbs:     []string{"get", "list", "create", "update", "delete", "patch", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{},
		Resources: []string{"events"},
		Verbs:     []string{"create", "update", "patch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{},
		Resources: []string{"configmaps", "limitranges", "secrets", "serviceaccounts"},
		Verbs:     []string{"get", "list", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"apps"},
		Resources: []string{"statefulsets"},
		Verbs:     []string{"get", "list", "create", "update", "delete", "patch", "watch"},
	}},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "rbac.authorization.k8s.io/v1",
		Kind:       "ClusterRole",
	},
}

var PipelinesResolversResolutionRequestUpdatesCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/component": "resolvers",
			"app.kubernetes.io/instance":  "default",
			"app.kubernetes.io/part-of":   "tekton-pipelines",
		},
		Name: "tekton-pipelines-resolvers-resolution-request-updates",
	},
	Rules: []rbacv1.PolicyRule{rbacv1.PolicyRule{
		APIGroups: []string{"resolution.tekton.dev"},
		Resources: []string{"resolutionrequests", "resolutionrequests/status"},
		Verbs:     []string{"get", "list", "watch", "update", "patch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"tekton.dev"},
		Resources: []string{"tasks", "pipelines"},
		Verbs:     []string{"get", "list"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{},
		Resources: []string{"secrets"},
		Verbs:     []string{"get", "list", "watch"},
	}},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "rbac.authorization.k8s.io/v1",
		Kind:       "ClusterRole",
	},
}

var PipelinesWebhookClusterAccessCR = &rbacv1.ClusterRole{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/component": "webhook",
			"app.kubernetes.io/instance":  "default",
			"app.kubernetes.io/part-of":   "tekton-pipelines",
		},
		Name: "tekton-pipelines-webhook-cluster-access",
	},
	Rules: []rbacv1.PolicyRule{rbacv1.PolicyRule{
		APIGroups:     []string{"apiextensions.k8s.io"},
		ResourceNames: []string{"pipelines.tekton.dev", "pipelineruns.tekton.dev", "runs.tekton.dev", "tasks.tekton.dev", "clustertasks.tekton.dev", "taskruns.tekton.dev", "pipelineresources.tekton.dev", "resolutionrequests.resolution.tekton.dev", "customruns.tekton.dev", "verificationpolicies.tekton.dev"},
		Resources:     []string{"customresourcedefinitions", "customresourcedefinitions/status"},
		Verbs:         []string{"get", "update", "patch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"apiextensions.k8s.io"},
		Resources: []string{"customresourcedefinitions"},
		Verbs:     []string{"list", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups: []string{"admissionregistration.k8s.io"},
		Resources: []string{"mutatingwebhookconfigurations", "validatingwebhookconfigurations"},
		Verbs:     []string{"list", "watch"},
	}, rbacv1.PolicyRule{
		APIGroups:     []string{"admissionregistration.k8s.io"},
		ResourceNames: []string{"webhook.pipeline.tekton.dev"},
		Resources:     []string{"mutatingwebhookconfigurations"},
		Verbs:         []string{"get", "update", "delete"},
	}, rbacv1.PolicyRule{
		APIGroups:     []string{"admissionregistration.k8s.io"},
		ResourceNames: []string{"validation.webhook.pipeline.tekton.dev", "config.webhook.pipeline.tekton.dev"},
		Resources:     []string{"validatingwebhookconfigurations"},
		Verbs:         []string{"get", "update", "delete"},
	}, rbacv1.PolicyRule{
		APIGroups:     []string{},
		ResourceNames: []string{"tekton-pipelines"},
		Resources:     []string{"namespaces"},
		Verbs:         []string{"get"},
	}, rbacv1.PolicyRule{
		APIGroups:     []string{},
		ResourceNames: []string{"tekton-pipelines"},
		Resources:     []string{"namespaces/finalizers"},
		Verbs:         []string{"update"},
	}},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "rbac.authorization.k8s.io/v1",
		Kind:       "ClusterRole",
	},
}
