// Code generated by apisources. DO NOT EDIT.
package kubeutil

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var TypeBindingV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "Binding",
}

var TypeComponentStatusV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "ComponentStatus",
}

var TypeConfigMapV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "ConfigMap",
}

var TypeEndpointsV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "Endpoints",
}

var TypeLimitRangeV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "LimitRange",
}

var TypeNamespaceV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "Namespace",
}

var TypeNodeV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "Node",
}

var TypePersistentVolumeClaimV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "PersistentVolumeClaim",
}

var TypePersistentVolumeV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "PersistentVolume",
}

var TypePodV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "Pod",
}

var TypePodTemplateV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "PodTemplate",
}

var TypeReplicationControllerV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "ReplicationController",
}

var TypeResourceQuotaV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "ResourceQuota",
}

var TypeSecretV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "Secret",
}

var TypeServiceAccountV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "ServiceAccount",
}

var TypeServiceV1 = metav1.TypeMeta{
	APIVersion: "v1",
	Kind:       "Service",
}

var TypeMutatingWebhookConfigurationV1 = metav1.TypeMeta{
	APIVersion: "admissionregistration.k8s.io/v1",
	Kind:       "MutatingWebhookConfiguration",
}

var TypeValidatingWebhookConfigurationV1 = metav1.TypeMeta{
	APIVersion: "admissionregistration.k8s.io/v1",
	Kind:       "ValidatingWebhookConfiguration",
}

var TypeCustomResourceDefinitionV1 = metav1.TypeMeta{
	APIVersion: "apiextensions.k8s.io/v1",
	Kind:       "CustomResourceDefinition",
}

var TypeAPIServiceV1 = metav1.TypeMeta{
	APIVersion: "apiregistration.k8s.io/v1",
	Kind:       "APIService",
}

var TypeControllerRevisionV1 = metav1.TypeMeta{
	APIVersion: "apps/v1",
	Kind:       "ControllerRevision",
}

var TypeDaemonSetV1 = metav1.TypeMeta{
	APIVersion: "apps/v1",
	Kind:       "DaemonSet",
}

var TypeDeploymentV1 = metav1.TypeMeta{
	APIVersion: "apps/v1",
	Kind:       "Deployment",
}

var TypeReplicaSetV1 = metav1.TypeMeta{
	APIVersion: "apps/v1",
	Kind:       "ReplicaSet",
}

var TypeStatefulSetV1 = metav1.TypeMeta{
	APIVersion: "apps/v1",
	Kind:       "StatefulSet",
}

var TypeTokenReviewV1 = metav1.TypeMeta{
	APIVersion: "authentication.k8s.io/v1",
	Kind:       "TokenReview",
}

var TypeLocalSubjectAccessReviewV1 = metav1.TypeMeta{
	APIVersion: "authorization.k8s.io/v1",
	Kind:       "LocalSubjectAccessReview",
}

var TypeSelfSubjectAccessReviewV1 = metav1.TypeMeta{
	APIVersion: "authorization.k8s.io/v1",
	Kind:       "SelfSubjectAccessReview",
}

var TypeSelfSubjectRulesReviewV1 = metav1.TypeMeta{
	APIVersion: "authorization.k8s.io/v1",
	Kind:       "SelfSubjectRulesReview",
}

var TypeSubjectAccessReviewV1 = metav1.TypeMeta{
	APIVersion: "authorization.k8s.io/v1",
	Kind:       "SubjectAccessReview",
}

var TypeHorizontalPodAutoscalerV2 = metav1.TypeMeta{
	APIVersion: "autoscaling/v2",
	Kind:       "HorizontalPodAutoscaler",
}

var TypeCronJobV1 = metav1.TypeMeta{
	APIVersion: "batch/v1",
	Kind:       "CronJob",
}

var TypeJobV1 = metav1.TypeMeta{
	APIVersion: "batch/v1",
	Kind:       "Job",
}

var TypeCertificateSigningRequestV1 = metav1.TypeMeta{
	APIVersion: "certificates.k8s.io/v1",
	Kind:       "CertificateSigningRequest",
}

var TypeCiliumClusterwideNetworkPolicyV2 = metav1.TypeMeta{
	APIVersion: "cilium.io/v2",
	Kind:       "CiliumClusterwideNetworkPolicy",
}

var TypeCiliumEndpointV2 = metav1.TypeMeta{
	APIVersion: "cilium.io/v2",
	Kind:       "CiliumEndpoint",
}

var TypeCiliumExternalWorkloadV2 = metav1.TypeMeta{
	APIVersion: "cilium.io/v2",
	Kind:       "CiliumExternalWorkload",
}

var TypeCiliumIdentityV2 = metav1.TypeMeta{
	APIVersion: "cilium.io/v2",
	Kind:       "CiliumIdentity",
}

var TypeCiliumNetworkPolicyV2 = metav1.TypeMeta{
	APIVersion: "cilium.io/v2",
	Kind:       "CiliumNetworkPolicy",
}

var TypeCiliumNodeV2 = metav1.TypeMeta{
	APIVersion: "cilium.io/v2",
	Kind:       "CiliumNode",
}

var TypeLeaseV1 = metav1.TypeMeta{
	APIVersion: "coordination.k8s.io/v1",
	Kind:       "Lease",
}

var TypeENIConfigV1Alpha1 = metav1.TypeMeta{
	APIVersion: "crd.k8s.amazonaws.com/v1alpha1",
	Kind:       "ENIConfig",
}

var TypeEndpointSliceV1 = metav1.TypeMeta{
	APIVersion: "discovery.k8s.io/v1",
	Kind:       "EndpointSlice",
}

var TypeFlowSchemaV1Beta2 = metav1.TypeMeta{
	APIVersion: "flowcontrol.apiserver.k8s.io/v1beta2",
	Kind:       "FlowSchema",
}

var TypePriorityLevelConfigurationV1Beta2 = metav1.TypeMeta{
	APIVersion: "flowcontrol.apiserver.k8s.io/v1beta2",
	Kind:       "PriorityLevelConfiguration",
}

var TypeAWSNodeTemplateV1Alpha1 = metav1.TypeMeta{
	APIVersion: "karpenter.k8s.aws/v1alpha1",
	Kind:       "AWSNodeTemplate",
}

var TypeProvisionerV1Alpha5 = metav1.TypeMeta{
	APIVersion: "karpenter.sh/v1alpha5",
	Kind:       "Provisioner",
}

var TypeIngressClassV1 = metav1.TypeMeta{
	APIVersion: "networking.k8s.io/v1",
	Kind:       "IngressClass",
}

var TypeIngressV1 = metav1.TypeMeta{
	APIVersion: "networking.k8s.io/v1",
	Kind:       "Ingress",
}

var TypeNetworkPolicyV1 = metav1.TypeMeta{
	APIVersion: "networking.k8s.io/v1",
	Kind:       "NetworkPolicy",
}

var TypeRuntimeClassV1 = metav1.TypeMeta{
	APIVersion: "node.k8s.io/v1",
	Kind:       "RuntimeClass",
}

var TypePodDisruptionBudgetV1 = metav1.TypeMeta{
	APIVersion: "policy/v1",
	Kind:       "PodDisruptionBudget",
}

var TypePodSecurityPolicyV1Beta1 = metav1.TypeMeta{
	APIVersion: "policy/v1beta1",
	Kind:       "PodSecurityPolicy",
}

var TypeClusterRoleBindingV1 = metav1.TypeMeta{
	APIVersion: "rbac.authorization.k8s.io/v1",
	Kind:       "ClusterRoleBinding",
}

var TypeClusterRoleV1 = metav1.TypeMeta{
	APIVersion: "rbac.authorization.k8s.io/v1",
	Kind:       "ClusterRole",
}

var TypeRoleBindingV1 = metav1.TypeMeta{
	APIVersion: "rbac.authorization.k8s.io/v1",
	Kind:       "RoleBinding",
}

var TypeRoleV1 = metav1.TypeMeta{
	APIVersion: "rbac.authorization.k8s.io/v1",
	Kind:       "Role",
}

var TypePriorityClassV1 = metav1.TypeMeta{
	APIVersion: "scheduling.k8s.io/v1",
	Kind:       "PriorityClass",
}

var TypeCSIDriverV1 = metav1.TypeMeta{
	APIVersion: "storage.k8s.io/v1",
	Kind:       "CSIDriver",
}

var TypeCSINodeV1 = metav1.TypeMeta{
	APIVersion: "storage.k8s.io/v1",
	Kind:       "CSINode",
}

var TypeCSIStorageCapacityV1Beta1 = metav1.TypeMeta{
	APIVersion: "storage.k8s.io/v1beta1",
	Kind:       "CSIStorageCapacity",
}

var TypeStorageClassV1 = metav1.TypeMeta{
	APIVersion: "storage.k8s.io/v1",
	Kind:       "StorageClass",
}

var TypeVolumeAttachmentV1 = metav1.TypeMeta{
	APIVersion: "storage.k8s.io/v1",
	Kind:       "VolumeAttachment",
}

var TypeSecurityGroupPolicyV1Beta1 = metav1.TypeMeta{
	APIVersion: "vpcresources.k8s.aws/v1beta1",
	Kind:       "SecurityGroupPolicy",
}
