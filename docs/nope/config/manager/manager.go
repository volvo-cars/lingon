// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package manager

import (
	"github.com/volvo-cars/lingon/pkg/kube"
	"github.com/volvo-cars/lingon/pkg/kubeutil"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	resource "k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	intstr "k8s.io/apimachinery/pkg/util/intstr"
)

func NewManager() *Manager {
	return &Manager{
		D:  ControllerManagerDeploy,
		NS: ControllerManagerNamespace,
	}
}

type Manager struct {
	kube.App
	D  *appsv1.Deployment
	NS *corev1.Namespace
}

var ControllerManagerDeploy = &appsv1.Deployment{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/component":  "manager",
			"app.kubernetes.io/created-by": "nope",
			"app.kubernetes.io/instance":   "controller-manager",
			"app.kubernetes.io/managed-by": "kustomize",
			"app.kubernetes.io/name":       "deployment",
			"app.kubernetes.io/part-of":    "nope",
			"control-plane":                "controller-manager",
		},
		Name:      "controller-manager",
		Namespace: "system",
	},
	Spec: appsv1.DeploymentSpec{
		Replicas: kubeutil.P(int32(1)),
		Selector: &metav1.LabelSelector{MatchLabels: map[string]string{"control-plane": "controller-manager"}},
		Template: corev1.PodTemplateSpec{
			ObjectMeta: metav1.ObjectMeta{
				Annotations: map[string]string{"kubectl.kubernetes.io/default-container": "manager"},
				Labels:      map[string]string{"control-plane": "controller-manager"},
			},
			Spec: corev1.PodSpec{
				Containers: []corev1.Container{{
					Name:  "manager",
					Image: "platypus.io/nope",
					Args:  []string{"--leader-elect"},
					Env: []corev1.EnvVar{
						{
							Name:  "NATS_URL",
							Value: "nats://natsserver:4222",
						},
						{
							Name:  "NATS_CREDS",
							Value: "/etc/nats-operator/sys_user.creds",
						},
						{
							Name:  "NATS_OPERATOR_SEED",
							Value: "/etc/nats-operator/operator.nk",
						},
					},
					LivenessProbe: &corev1.Probe{
						InitialDelaySeconds: int32(15),
						PeriodSeconds:       int32(20),
						ProbeHandler: corev1.ProbeHandler{HTTPGet: &corev1.HTTPGetAction{
							Path: "/healthz",
							Port: intstr.IntOrString{IntVal: int32(8081)},
						}},
					},
					ReadinessProbe: &corev1.Probe{
						InitialDelaySeconds: int32(5),
						PeriodSeconds:       int32(10),
						ProbeHandler: corev1.ProbeHandler{HTTPGet: &corev1.HTTPGetAction{
							Path: "/readyz",
							Port: intstr.IntOrString{IntVal: int32(8081)},
						}},
					},
					Resources: corev1.ResourceRequirements{
						Limits: map[corev1.ResourceName]resource.Quantity{
							corev1.ResourceName("cpu"):    resource.MustParse("500m"),
							corev1.ResourceName("memory"): resource.MustParse("128Mi"),
						},
						Requests: map[corev1.ResourceName]resource.Quantity{
							corev1.ResourceName("cpu"):    resource.MustParse("10m"),
							corev1.ResourceName("memory"): resource.MustParse("64Mi"),
						},
					},
					SecurityContext: &corev1.SecurityContext{Capabilities: &corev1.Capabilities{Drop: []corev1.Capability{corev1.Capability("ALL")}}},
					VolumeMounts: []corev1.VolumeMount{
						{
							Name:      "nats-operator",
							MountPath: "/etc/nats-operator",
							ReadOnly:  true,
						},
					},
				}},
				SecurityContext:               &corev1.PodSecurityContext{RunAsNonRoot: kubeutil.P(true)},
				ServiceAccountName:            "controller-manager",
				TerminationGracePeriodSeconds: kubeutil.P(int64(10)),
				Volumes: []corev1.Volume{
					{
						Name: "nats-operator",
						VolumeSource: corev1.VolumeSource{
							Secret: &corev1.SecretVolumeSource{
								SecretName: "nats-operator",
							},
						},
					},
				},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apps/v1",
		Kind:       "Deployment",
	},
}

var ControllerManagerNamespace = &corev1.Namespace{
	TypeMeta: kubeutil.TypeNamespaceV1,
	ObjectMeta: metav1.ObjectMeta{
		Name: "system",
	},
}
