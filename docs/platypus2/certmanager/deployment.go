// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package certmanager

import (
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
)

var CainjectorDeploy = &appsv1.Deployment{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app":                          "cainjector",
			"app.kubernetes.io/component":  "cainjector",
			"app.kubernetes.io/instance":   "cert-manager",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/name":       "cainjector",
			"app.kubernetes.io/version":    "v1.12.2",
			"helm.sh/chart":                "cert-manager-v1.12.2",
		},
		Name:      "cert-manager-cainjector",
		Namespace: "cert-manager",
	},
	Spec: appsv1.DeploymentSpec{
		Replicas: P(int32(1)),
		Selector: &metav1.LabelSelector{
			MatchLabels: map[string]string{
				"app.kubernetes.io/component": "cainjector",
				"app.kubernetes.io/instance":  "cert-manager",
				"app.kubernetes.io/name":      "cainjector",
			},
		},
		Template: corev1.PodTemplateSpec{
			ObjectMeta: metav1.ObjectMeta{
				Labels: map[string]string{
					"app":                          "cainjector",
					"app.kubernetes.io/component":  "cainjector",
					"app.kubernetes.io/instance":   "cert-manager",
					"app.kubernetes.io/managed-by": "Helm",
					"app.kubernetes.io/name":       "cainjector",
					"app.kubernetes.io/version":    "v1.12.2",
					"helm.sh/chart":                "cert-manager-v1.12.2",
				},
			},
			Spec: corev1.PodSpec{
				Containers: []corev1.Container{
					{
						Args: []string{
							"--v=2",
							"--leader-election-namespace=cert-manager",
						},
						Env: []corev1.EnvVar{
							{
								Name:      "POD_NAMESPACE",
								ValueFrom: &corev1.EnvVarSource{FieldRef: &corev1.ObjectFieldSelector{FieldPath: "metadata.namespace"}},
							},
						},
						Image:           "quay.io/jetstack/cert-manager-cainjector:v1.12.2",
						ImagePullPolicy: corev1.PullPolicy("IfNotPresent"),
						Name:            "cert-manager-cainjector",
						SecurityContext: &corev1.SecurityContext{Capabilities: &corev1.Capabilities{Drop: []corev1.Capability{corev1.Capability("ALL")}}},
					},
				},
				NodeSelector: map[string]string{"kubernetes.io/os": "linux"},
				SecurityContext: &corev1.PodSecurityContext{
					RunAsNonRoot:   P(true),
					SeccompProfile: &corev1.SeccompProfile{Type: corev1.SeccompProfileType("RuntimeDefault")},
				},
				ServiceAccountName: "cert-manager-cainjector",
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apps/v1",
		Kind:       "Deployment",
	},
}

var Deploy = &appsv1.Deployment{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app":                          "cert-manager",
			"app.kubernetes.io/component":  "controller",
			"app.kubernetes.io/instance":   "cert-manager",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/name":       "cert-manager",
			"app.kubernetes.io/version":    "v1.12.2",
			"helm.sh/chart":                "cert-manager-v1.12.2",
		},
		Name:      "cert-manager",
		Namespace: "cert-manager",
	},
	Spec: appsv1.DeploymentSpec{
		Replicas: P(int32(1)),
		Selector: &metav1.LabelSelector{
			MatchLabels: map[string]string{
				"app.kubernetes.io/component": "controller",
				"app.kubernetes.io/instance":  "cert-manager",
				"app.kubernetes.io/name":      "cert-manager",
			},
		},
		Template: corev1.PodTemplateSpec{
			ObjectMeta: metav1.ObjectMeta{
				Annotations: map[string]string{
					"prometheus.io/path":   "/metrics",
					"prometheus.io/port":   "9402",
					"prometheus.io/scrape": "true",
				},
				Labels: map[string]string{
					"app":                          "cert-manager",
					"app.kubernetes.io/component":  "controller",
					"app.kubernetes.io/instance":   "cert-manager",
					"app.kubernetes.io/managed-by": "Helm",
					"app.kubernetes.io/name":       "cert-manager",
					"app.kubernetes.io/version":    "v1.12.2",
					"helm.sh/chart":                "cert-manager-v1.12.2",
				},
			},
			Spec: corev1.PodSpec{
				Containers: []corev1.Container{
					{
						Args: []string{
							"--v=2",
							"--cluster-resource-namespace=$(POD_NAMESPACE)",
							"--leader-election-namespace=cert-manager",
							"--acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.12.2",
							"--max-concurrent-challenges=60",
						},
						Env: []corev1.EnvVar{
							{
								Name:      "POD_NAMESPACE",
								ValueFrom: &corev1.EnvVarSource{FieldRef: &corev1.ObjectFieldSelector{FieldPath: "metadata.namespace"}},
							},
						},
						Image:           "quay.io/jetstack/cert-manager-controller:v1.12.2",
						ImagePullPolicy: corev1.PullPolicy("IfNotPresent"),
						Name:            "cert-manager-controller",
						Ports: []corev1.ContainerPort{
							{
								ContainerPort: int32(9402),
								Name:          "http-metrics",
								Protocol:      corev1.Protocol("TCP"),
							}, {
								ContainerPort: int32(9403),
								Name:          "http-healthz",
								Protocol:      corev1.Protocol("TCP"),
							},
						},
						SecurityContext: &corev1.SecurityContext{Capabilities: &corev1.Capabilities{Drop: []corev1.Capability{corev1.Capability("ALL")}}},
					},
				},
				NodeSelector: map[string]string{"kubernetes.io/os": "linux"},
				SecurityContext: &corev1.PodSecurityContext{
					RunAsNonRoot:   P(true),
					SeccompProfile: &corev1.SeccompProfile{Type: corev1.SeccompProfileType("RuntimeDefault")},
				},
				ServiceAccountName: "cert-manager",
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apps/v1",
		Kind:       "Deployment",
	},
}

var WebhookDeploy = &appsv1.Deployment{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app":                          "webhook",
			"app.kubernetes.io/component":  "webhook",
			"app.kubernetes.io/instance":   "cert-manager",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/name":       "webhook",
			"app.kubernetes.io/version":    "v1.12.2",
			"helm.sh/chart":                "cert-manager-v1.12.2",
		},
		Name:      "cert-manager-webhook",
		Namespace: "cert-manager",
	},
	Spec: appsv1.DeploymentSpec{
		Replicas: P(int32(1)),
		Selector: &metav1.LabelSelector{
			MatchLabels: map[string]string{
				"app.kubernetes.io/component": "webhook",
				"app.kubernetes.io/instance":  "cert-manager",
				"app.kubernetes.io/name":      "webhook",
			},
		},
		Template: corev1.PodTemplateSpec{
			ObjectMeta: metav1.ObjectMeta{
				Labels: map[string]string{
					"app":                          "webhook",
					"app.kubernetes.io/component":  "webhook",
					"app.kubernetes.io/instance":   "cert-manager",
					"app.kubernetes.io/managed-by": "Helm",
					"app.kubernetes.io/name":       "webhook",
					"app.kubernetes.io/version":    "v1.12.2",
					"helm.sh/chart":                "cert-manager-v1.12.2",
				},
			},
			Spec: corev1.PodSpec{
				Containers: []corev1.Container{
					{
						Args: []string{
							"--v=2",
							"--secure-port=10250",
							"--dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)",
							"--dynamic-serving-ca-secret-name=cert-manager-webhook-ca",
							"--dynamic-serving-dns-names=cert-manager-webhook",
							"--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE)",
							"--dynamic-serving-dns-names=cert-manager-webhook.$(POD_NAMESPACE).svc",
						},
						Env: []corev1.EnvVar{
							{
								Name:      "POD_NAMESPACE",
								ValueFrom: &corev1.EnvVarSource{FieldRef: &corev1.ObjectFieldSelector{FieldPath: "metadata.namespace"}},
							},
						},
						Image:           "quay.io/jetstack/cert-manager-webhook:v1.12.2",
						ImagePullPolicy: corev1.PullPolicy("IfNotPresent"),
						LivenessProbe: &corev1.Probe{
							FailureThreshold:    int32(3),
							InitialDelaySeconds: int32(60),
							PeriodSeconds:       int32(10),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									Path:   "/livez",
									Port:   intstr.IntOrString{IntVal: int32(6080)},
									Scheme: corev1.URIScheme("HTTP"),
								},
							},
							SuccessThreshold: int32(1),
							TimeoutSeconds:   int32(1),
						},
						Name: "cert-manager-webhook",
						Ports: []corev1.ContainerPort{
							{
								ContainerPort: int32(10250),
								Name:          "https",
								Protocol:      corev1.Protocol("TCP"),
							}, {
								ContainerPort: int32(6080),
								Name:          "healthcheck",
								Protocol:      corev1.Protocol("TCP"),
							},
						},
						ReadinessProbe: &corev1.Probe{
							FailureThreshold:    int32(3),
							InitialDelaySeconds: int32(5),
							PeriodSeconds:       int32(5),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									Path:   "/healthz",
									Port:   intstr.IntOrString{IntVal: int32(6080)},
									Scheme: corev1.URIScheme("HTTP"),
								},
							},
							SuccessThreshold: int32(1),
							TimeoutSeconds:   int32(1),
						},
						SecurityContext: &corev1.SecurityContext{Capabilities: &corev1.Capabilities{Drop: []corev1.Capability{corev1.Capability("ALL")}}},
					},
				},
				NodeSelector: map[string]string{"kubernetes.io/os": "linux"},
				SecurityContext: &corev1.PodSecurityContext{
					RunAsNonRoot:   P(true),
					SeccompProfile: &corev1.SeccompProfile{Type: corev1.SeccompProfileType("RuntimeDefault")},
				},
				ServiceAccountName: "cert-manager-webhook",
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apps/v1",
		Kind:       "Deployment",
	},
}
