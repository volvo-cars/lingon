// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package certmanager

import (
	"context"
	"errors"
	"os"
	"os/exec"

	"github.com/volvo-cars/lingon/pkg/kube"
	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	appsv1 "k8s.io/api/apps/v1"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
)

// validate the struct implements the interface
var _ kube.Exporter = (*CertManager)(nil)

// CertManager contains kubernetes manifests
type CertManager struct {
	kube.App

	CainjectorCR                            *rbacv1.ClusterRole
	CainjectorCRB                           *rbacv1.ClusterRoleBinding
	CainjectorDeploy                        *appsv1.Deployment
	CainjectorLeaderelectionRB              *rbacv1.RoleBinding
	CainjectorLeaderelectionRole            *rbacv1.Role
	CainjectorSA                            *corev1.ServiceAccount
	ControllerApproveIoCR                   *rbacv1.ClusterRole
	ControllerApproveIoCRB                  *rbacv1.ClusterRoleBinding
	ControllerCertificatesCR                *rbacv1.ClusterRole
	ControllerCertificatesCRB               *rbacv1.ClusterRoleBinding
	ControllerCertificatesigningrequestsCR  *rbacv1.ClusterRole
	ControllerCertificatesigningrequestsCRB *rbacv1.ClusterRoleBinding
	ControllerChallengesCR                  *rbacv1.ClusterRole
	ControllerChallengesCRB                 *rbacv1.ClusterRoleBinding
	ControllerClusterissuersCR              *rbacv1.ClusterRole
	ControllerClusterissuersCRB             *rbacv1.ClusterRoleBinding
	ControllerIngressShimCR                 *rbacv1.ClusterRole
	ControllerIngressShimCRB                *rbacv1.ClusterRoleBinding
	ControllerIssuersCR                     *rbacv1.ClusterRole
	ControllerIssuersCRB                    *rbacv1.ClusterRoleBinding
	ControllerOrdersCR                      *rbacv1.ClusterRole
	ControllerOrdersCRB                     *rbacv1.ClusterRoleBinding
	Deploy                                  *appsv1.Deployment
	EditCR                                  *rbacv1.ClusterRole
	LeaderelectionRB                        *rbacv1.RoleBinding
	LeaderelectionRole                      *rbacv1.Role
	SA                                      *corev1.ServiceAccount
	SVC                                     *corev1.Service
	StartupapicheckCreateCertRB             *rbacv1.RoleBinding
	StartupapicheckCreateCertRole           *rbacv1.Role
	StartupapicheckJOBS                     *batchv1.Job
	StartupapicheckSA                       *corev1.ServiceAccount
	ViewCR                                  *rbacv1.ClusterRole
	WebhookCM                               *corev1.ConfigMap
	WebhookDeploy                           *appsv1.Deployment
	WebhookDynamicServingRB                 *rbacv1.RoleBinding
	WebhookDynamicServingRole               *rbacv1.Role
	WebhookMutatingwebhookconfigurations    *admissionregistrationv1.MutatingWebhookConfiguration
	WebhookSA                               *corev1.ServiceAccount
	WebhookSVC                              *corev1.Service
	WebhookSubjectaccessreviewsCR           *rbacv1.ClusterRole
	WebhookSubjectaccessreviewsCRB          *rbacv1.ClusterRoleBinding
	WebhookValidatingwebhookconfigurations  *admissionregistrationv1.ValidatingWebhookConfiguration
}

// New creates a new CertManager
func New() *CertManager {
	return &CertManager{
		CainjectorCR:                            CainjectorCR,
		CainjectorCRB:                           CainjectorCRB,
		CainjectorDeploy:                        CainjectorDeploy,
		CainjectorLeaderelectionRB:              CainjectorLeaderelectionRB,
		CainjectorLeaderelectionRole:            CainjectorLeaderelectionRole,
		CainjectorSA:                            CainjectorSA,
		ControllerApproveIoCR:                   ControllerApproveIoCR,
		ControllerApproveIoCRB:                  ControllerApproveIoCRB,
		ControllerCertificatesCR:                ControllerCertificatesCR,
		ControllerCertificatesCRB:               ControllerCertificatesCRB,
		ControllerCertificatesigningrequestsCR:  ControllerCertificatesigningrequestsCR,
		ControllerCertificatesigningrequestsCRB: ControllerCertificatesigningrequestsCRB,
		ControllerChallengesCR:                  ControllerChallengesCR,
		ControllerChallengesCRB:                 ControllerChallengesCRB,
		ControllerClusterissuersCR:              ControllerClusterissuersCR,
		ControllerClusterissuersCRB:             ControllerClusterissuersCRB,
		ControllerIngressShimCR:                 ControllerIngressShimCR,
		ControllerIngressShimCRB:                ControllerIngressShimCRB,
		ControllerIssuersCR:                     ControllerIssuersCR,
		ControllerIssuersCRB:                    ControllerIssuersCRB,
		ControllerOrdersCR:                      ControllerOrdersCR,
		ControllerOrdersCRB:                     ControllerOrdersCRB,
		Deploy:                                  Deploy,
		EditCR:                                  EditCR,
		LeaderelectionRB:                        LeaderelectionRB,
		LeaderelectionRole:                      LeaderelectionRole,
		SA:                                      SA,
		SVC:                                     SVC,
		StartupapicheckCreateCertRB:             StartupapicheckCreateCertRB,
		StartupapicheckCreateCertRole:           StartupapicheckCreateCertRole,
		StartupapicheckJOBS:                     StartupapicheckJOBS,
		StartupapicheckSA:                       StartupapicheckSA,
		ViewCR:                                  ViewCR,
		WebhookCM:                               WebhookCM,
		WebhookDeploy:                           WebhookDeploy,
		WebhookDynamicServingRB:                 WebhookDynamicServingRB,
		WebhookDynamicServingRole:               WebhookDynamicServingRole,
		WebhookMutatingwebhookconfigurations:    WebhookMutatingwebhookconfigurations,
		WebhookSA:                               WebhookSA,
		WebhookSVC:                              WebhookSVC,
		WebhookSubjectaccessreviewsCR:           WebhookSubjectaccessreviewsCR,
		WebhookSubjectaccessreviewsCRB:          WebhookSubjectaccessreviewsCRB,
		WebhookValidatingwebhookconfigurations:  WebhookValidatingwebhookconfigurations,
	}
}

// Apply applies the kubernetes objects to the cluster
func (a *CertManager) Apply(ctx context.Context) error {
	return Apply(ctx, a)
}

// Export exports the kubernetes objects to YAML files in the given directory
func (a *CertManager) Export(dir string) error {
	return kube.Export(a, kube.WithExportOutputDirectory(dir))
}

// Apply applies the kubernetes objects contained in Exporter to the cluster
func Apply(ctx context.Context, km kube.Exporter) error {
	cmd := exec.CommandContext(ctx, "kubectl", "apply", "-f", "-")
	cmd.Env = os.Environ()        // inherit environment in case we need to use kubectl from a container
	stdin, err := cmd.StdinPipe() // pipe to pass data to kubectl
	if err != nil {
		return err
	}

	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	go func() {
		defer func() {
			err = errors.Join(err, stdin.Close())
		}()
		if errEW := kube.Export(
			km,
			kube.WithExportWriter(stdin),
			kube.WithExportAsSingleFile("stdin"),
		); errEW != nil {
			err = errors.Join(err, errEW)
		}
	}()

	if errS := cmd.Start(); errS != nil {
		return errors.Join(err, errS)
	}

	// waits for the command to exit and waits for any copying
	// to stdin or copying from stdout or stderr to complete
	return errors.Join(err, cmd.Wait())
}

// P converts T to *T, useful for basic types
func P[T any](t T) *T {
	return &t
}
