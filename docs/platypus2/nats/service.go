// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package nats

import (
	"sort"

	ku "github.com/volvo-cars/lingon/pkg/kubeutil"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var (
	HTTP = P("http")
	TCP  = P("tcp")
)

var ports = map[string]corev1.ServicePort{
	PortNameClient: {
		Name:        PortNameClient,
		Port:        PortClient,
		AppProtocol: TCP,
	},
	PortNameCluster: {
		Name:        PortNameCluster,
		Port:        PortCluster,
		AppProtocol: TCP,
	},
	PortNameMonitor: {
		Name:        PortNameMonitor,
		Port:        PortMonitor,
		AppProtocol: HTTP,
	},
	PortNameMetrics: {
		Name:        PortNameMetrics,
		Port:        PortMetrics,
		AppProtocol: HTTP,
	},
	PortNameLeafNodes: {
		Name:        PortNameLeafNodes,
		Port:        PortLeafNodes,
		AppProtocol: TCP,
	},
	PortNameGateways: {
		Name:        PortNameGateways,
		Port:        PortGateways,
		AppProtocol: TCP,
	},
}

func mapToSlice[T any](m map[string]T) []T {
	keys := []string{}
	for k := range m {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	res := make([]T, len(keys))
	for i, k := range keys {
		res[i] = m[k]
	}
	return res
}

var SVC = &corev1.Service{
	TypeMeta: ku.TypeServiceV1,
	ObjectMeta: metav1.ObjectMeta{
		Labels:    BaseLabels(),
		Name:      appName,
		Namespace: namespace,
	},
	Spec: corev1.ServiceSpec{
		// Headless Services - no load balancing
		// https://kubernetes.io/docs/concepts/services-networking/service/#headless-services
		ClusterIP:                corev1.ClusterIPNone,
		Ports:                    mapToSlice(ports),
		PublishNotReadyAddresses: true,
		Selector:                 matchLabels,
	},
}
