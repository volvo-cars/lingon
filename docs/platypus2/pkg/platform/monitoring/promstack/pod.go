// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package promstack

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var GrafanaTestPO = &corev1.Pod{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{
			"helm.sh/hook":               "test-success",
			"helm.sh/hook-delete-policy": "before-hook-creation,hook-succeeded",
		},
		Labels: map[string]string{
			"app.kubernetes.io/instance":   "kube-prometheus-stack",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/name":       "grafana",
			"app.kubernetes.io/version":    "9.5.1",
			"helm.sh/chart":                "grafana-6.56.2",
		},
		Name:      "kube-prometheus-stack-grafana-test",
		Namespace: namespace,
	},
	Spec: corev1.PodSpec{
		Containers: []corev1.Container{
			{
				Command: []string{
					"/opt/bats/bin/bats",
					"-t",
					"/tests/run.sh",
				},
				Image:           "docker.io/bats/bats:v1.4.1",
				ImagePullPolicy: corev1.PullPolicy("IfNotPresent"),
				Name:            "kube-prometheus-stack-test",
				VolumeMounts: []corev1.VolumeMount{
					{
						MountPath: "/tests",
						Name:      "tests",
						ReadOnly:  true,
					},
				},
			},
		},
		RestartPolicy:      corev1.RestartPolicy("Never"),
		ServiceAccountName: "kube-prometheus-stack-grafana-test",
		Volumes: []corev1.Volume{
			{
				Name:         "tests",
				VolumeSource: corev1.VolumeSource{ConfigMap: &corev1.ConfigMapVolumeSource{LocalObjectReference: corev1.LocalObjectReference{Name: "kube-prometheus-stack-grafana-test"}}},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "v1",
		Kind:       "Pod",
	},
}
