// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package nats

import (
	"context"
	"errors"
	"os"
	"os/exec"

	promoperatorv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	"github.com/volvo-cars/lingon/pkg/kube"
	ku "github.com/volvo-cars/lingon/pkg/kubeutil"
	"github.com/volvo-cars/lingoneks/pkg/platform/nats/benthos"
	"github.com/volvo-cars/lingoneks/pkg/platform/nats/jetstream"
	"github.com/volvo-cars/lingoneks/pkg/platform/nats/surveyor"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	policyv1 "k8s.io/api/policy/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// validate the struct implements the interface
var _ kube.Exporter = (*Nats)(nil)

// Nats contains kubernetes manifests
type Nats struct {
	kube.App

	// embedded struct
	CRD
	surveyor.Surveyor
	benthos.Benthos

	NS *corev1.Namespace

	BoxDeploy          *appsv1.Deployment
	ConfigCM           *corev1.ConfigMap
	PDB                *policyv1.PodDisruptionBudget
	SA                 *corev1.ServiceAccount
	STS                *appsv1.StatefulSet
	SVC                *corev1.Service
	ServiceMonitor     *promoperatorv1.ServiceMonitor
	TestRequestReplyPO *corev1.Pod
}

// New creates a new Nats
func New() *Nats {
	return &Nats{
		CRD: CRD{
			AccountsNatsIoCRD:        jetstream.AccountsJetstreamNatsIoCRD,
			ConsumersNatsIoCRD:       jetstream.ConsumersJetstreamNatsIoCRD,
			StreamsNatsIoCRD:         jetstream.StreamsJetstreamNatsIoCRD,
			StreamtemplatesNatsIoCRD: jetstream.StreamTemplatesJetstreamNatsIoCRD,
		},
		NS:                 NS,
		Surveyor:           *surveyor.New(),
		Benthos:            *benthos.New(),
		BoxDeploy:          BoxDeploy,
		ConfigCM:           cm.ConfigMap(),
		PDB:                PDB,
		SA:                 SA,
		STS:                STS,
		SVC:                SVC,
		ServiceMonitor:     ServiceMonitor,
		TestRequestReplyPO: TestRequestReplyPO,
	}
}

type CRD struct {
	AccountsNatsIoCRD        *apiextensionsv1.CustomResourceDefinition
	ConsumersNatsIoCRD       *apiextensionsv1.CustomResourceDefinition
	StreamsNatsIoCRD         *apiextensionsv1.CustomResourceDefinition
	StreamtemplatesNatsIoCRD *apiextensionsv1.CustomResourceDefinition
}

const (
	appName   = "nats"
	namespace = "nats"
	version   = "2.9.16"
	replicas  = 3
)

const (
	ImgNats           = "nats:" + version + "-alpine"
	ImgConfigReloader = "natsio/nats-server-config-reloader:0.10.1"
	ImgPromExporter   = "natsio/prometheus-nats-exporter:0.10.1"
)

const (
	PortClient     int32 = 4222
	PortNameClient       = "client"

	PortCluster     int32 = 6222
	PortNameCluster       = "cluster"

	PortMonitor     int32 = 8222
	PortNameMonitor       = "monitor"

	PortMetrics     int32 = 7777
	PortNameMetrics       = "metrics"

	PortLeafNodes     int32 = 7422
	PortNameLeafNodes       = "leafnodes"

	PortGateways     int32 = 7522
	PortNameGateways       = "gateways"

	PortProbe = 8222
)

var (
	NS = ku.Namespace(namespace, BaseLabels(), nil)

	SA = ku.ServiceAccount(appName, namespace, BaseLabels(), nil)

	cmd = map[string][]string{
		ImgNats: {
			"nats-server",
			"--config",
			"/etc/nats-config/nats.conf",
		},
		ImgConfigReloader: {
			"nats-server-config-reloader",
			"-pid",
			"/var/run/nats/nats.pid",
			"-config",
			"/etc/nats-config/nats.conf",
		},
		ImgPromExporter: {
			"-connz",
			"-routez",
			"-subz",
			"-varz",
			"-prefix=nats",
			"-use_internal_server_id",
			"http://localhost:8222/",
		},
	}
)

var matchLabels = map[string]string{
	ku.AppLabelName:     appName,
	ku.AppLabelInstance: appName,
}

func BaseLabels() map[string]string {
	return ku.MergeLabels(
		matchLabels, map[string]string{
			"app":                appName,
			ku.AppLabelComponent: appName,
			ku.AppLabelPartOf:    appName,
			ku.AppLabelVersion:   version,
			ku.AppLabelManagedBy: "lingon",
		},
	)
}

// Apply applies the kubernetes objects to the cluster
func (a *Nats) Apply(ctx context.Context) error {
	return Apply(ctx, a)
}

// Export exports the kubernetes objects to YAML files in the given directory
func (a *Nats) Export(dir string) error {
	return kube.Export(a, kube.WithExportOutputDirectory(dir))
}

// Apply applies the kubernetes objects contained in Exporter to the cluster
func Apply(ctx context.Context, km kube.Exporter) error {
	cmd := exec.CommandContext(ctx, "kubectl", "apply", "-f", "-")
	cmd.Env = os.Environ()        // inherit environment in case we need to use kubectl from a container
	stdin, err := cmd.StdinPipe() // pipe to pass data to kubectl
	if err != nil {
		return err
	}

	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	go func() {
		defer func() {
			err = errors.Join(err, stdin.Close())
		}()
		if errEW := kube.Export(
			km,
			kube.WithExportWriter(stdin),
			kube.WithExportAsSingleFile("stdin"),
		); errEW != nil {
			err = errors.Join(err, errEW)
		}
	}()

	if errS := cmd.Start(); errS != nil {
		return errors.Join(err, errS)
	}

	// waits for the command to exit and waits for any copying
	// to stdin or copying from stdout or stderr to complete
	return errors.Join(err, cmd.Wait())
}

// P converts T to *T, useful for basic types
func P[T any](t T) *T {
	return &t
}
