// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package vmcrd

import (
	"context"
	"errors"
	"os"
	"os/exec"

	"github.com/volvo-cars/lingon/pkg/kube"
	"github.com/volvo-cars/lingoneks/monitoring/vmop"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type CRD struct {
	kube.App

	VMAgentsCRD              *apiextensionsv1.CustomResourceDefinition
	VMAlertManagerConfigsCRD *apiextensionsv1.CustomResourceDefinition
	VMAlertManagersCRD       *apiextensionsv1.CustomResourceDefinition
	VMAlertsCRD              *apiextensionsv1.CustomResourceDefinition
	VMAuthsCRD               *apiextensionsv1.CustomResourceDefinition
	VMClustersCRD            *apiextensionsv1.CustomResourceDefinition
	VMNodeScrapesCRD         *apiextensionsv1.CustomResourceDefinition
	VMPodScrapesCRD          *apiextensionsv1.CustomResourceDefinition
	VMProbesCRD              *apiextensionsv1.CustomResourceDefinition
	VMRulesCRD               *apiextensionsv1.CustomResourceDefinition
	VMServiceScrapesCRD      *apiextensionsv1.CustomResourceDefinition
	VMSinglesCRD             *apiextensionsv1.CustomResourceDefinition
	VMStaticScrapesCRD       *apiextensionsv1.CustomResourceDefinition
	VMUsersCRD               *apiextensionsv1.CustomResourceDefinition
}

func New() *CRD {
	return &CRD{
		VMAgentsCRD:              VMAgentsCRD,
		VMAlertManagerConfigsCRD: VMAlertManagerConfigsCRD,
		VMAlertManagersCRD:       VMAlertManagersCRD,
		VMAlertsCRD:              VMAlertsCRD,
		VMAuthsCRD:               VMAuthsCRD,
		VMClustersCRD:            VMClustersCRD,
		VMNodeScrapesCRD:         VMNodeScrapesCRD,
		VMPodScrapesCRD:          VMPodScrapesCRD,
		VMProbesCRD:              VMProbesCRD,
		VMRulesCRD:               VMRulesCRD,
		VMServiceScrapesCRD:      VMServiceScrapesCRD,
		VMSinglesCRD:             VMSinglesCRD,
		VMStaticScrapesCRD:       VMStaticScrapesCRD,
		VMUsersCRD:               VMUsersCRD,
	}
}

// Apply applies the kubernetes objects to the cluster
func (a *CRD) Apply(ctx context.Context) error {
	return Apply(ctx, a)
}

// Export exports the kubernetes objects to YAML files in the given directory
func (a *CRD) Export(dir string) error {
	return kube.Export(a, kube.WithExportOutputDirectory(dir))
}

// Apply applies the kubernetes objects contained in Exporter to the cluster
func Apply(ctx context.Context, km kube.Exporter) error {
	cmd := exec.CommandContext(
		ctx,
		"kubectl",
		"apply", "--server-side=true",
		"-f", "-",
	)
	cmd.Env = os.Environ()        // inherit environment in case we need to use kubectl from a container
	stdin, err := cmd.StdinPipe() // pipe to pass data to kubectl
	if err != nil {
		return err
	}

	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	go func() {
		defer func() {
			err = errors.Join(err, stdin.Close())
		}()
		if errEW := kube.Export(
			km,
			kube.WithExportWriter(stdin),
			kube.WithExportAsSingleFile("stdin"),
		); errEW != nil {
			err = errors.Join(err, errEW)
		}
	}()

	if errS := cmd.Start(); errS != nil {
		return errors.Join(err, errS)
	}

	// waits for the command to exit and waits for any copying
	// to stdin or copying from stdout or stderr to complete
	return errors.Join(err, cmd.Wait())
}

var VMAgentsCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmagents.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMAgent",
			ListKind: "VMAgentList",
			Plural:   "vmagents",
			Singular: "vmagent",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				AdditionalPrinterColumns: []apiextensionsv1.CustomResourceColumnDefinition{
					{
						Description: "current number of shards",
						JSONPath:    ".status.shards",
						Name:        "Shards Count",
						Type:        "integer",
					}, {
						Description: "current number of replicas",
						JSONPath:    ".status.replicas",
						Name:        "Replica Count",
						Type:        "integer",
					},
				},
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMAgent - is a tiny but brave agent, which helps you collect metrics from various sources and stores them in VictoriaMetrics or any other Prometheus-compatible storage system that supports the remote_write protocol.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMAgentSpec defines the desired state of VMAgent",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"-": {
										Description: "ParsingError contents error with context if operator was failed to parse json object from kubernetes api server",
										Type:        "string",
									},
									"aPIServerConfig": {
										Description: "APIServerConfig allows specifying a host and auth methods to access apiserver. If left empty, VMAgent is assumed to run inside of the cluster and will discover API servers automatically and use the pod's CA certificate and bearer token file at /var/run/secrets/kubernetes.io/serviceaccount/.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"authorization": {
												Description: "Authorization configures generic authorization params",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"credentials": {
														Description: "Reference to the secret with value for authorization",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"credentialsFile": {
														Description: "File with value for authorization",
														Type:        "string",
													},
													"type": {
														Description: "Type of authorization, default to bearer",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"basicAuth": {
												Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"password": {
														Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"password_file": {
														Description: "PasswordFile defines path to password file at disk",
														Type:        "string",
													},
													"username": {
														Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"bearerToken": {
												Description: "Bearer token for accessing apiserver.",
												Type:        "string",
											},
											"bearerTokenFile": {
												Description: "File to read bearer token for accessing apiserver.",
												Type:        "string",
											},
											"host": {
												Description: "Host of apiserver. A valid string consisting of a hostname or IP followed by an optional port number",
												Type:        "string",
											},
											"tlsConfig": {
												Description: "TLSConfig Config to use for accessing apiserver.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"ca": {
														Description: "Stuct containing the CA cert to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"configMap": {
																Description: "ConfigMap containing data to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key to select.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the ConfigMap or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"secret": {
																Description: "Secret containing data to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"caFile": {
														Description: "Path to the CA cert in the container to use for the targets.",
														Type:        "string",
													},
													"cert": {
														Description: "Struct containing the client cert file for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"configMap": {
																Description: "ConfigMap containing data to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key to select.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the ConfigMap or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"secret": {
																Description: "Secret containing data to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"certFile": {
														Description: "Path to the client cert file in the container for the targets.",
														Type:        "string",
													},
													"insecureSkipVerify": {
														Description: "Disable target certificate validation.",
														Type:        "boolean",
													},
													"keyFile": {
														Description: "Path to the client key file in the container for the targets.",
														Type:        "string",
													},
													"keySecret": {
														Description: "Secret containing the client key file for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"serverName": {
														Description: "Used to verify the hostname for the targets.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Required: []string{"host"},
										Type:     "object",
									},
									"additionalScrapeConfigs": {
										Description: "AdditionalScrapeConfigs As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of VMAgent. It is advised to review VMAgent release notes to ensure that no incompatible scrape configs are going to break VMAgent after the upgrade.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"key": {
												Description: "The key of the secret to select from.  Must be a valid secret key.",
												Type:        "string",
											},
											"name": {
												Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
												Type:        "string",
											},
											"optional": {
												Description: "Specify whether the Secret or its key must be defined",
												Type:        "boolean",
											},
										},
										Required: []string{"key"},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"affinity": {
										Description:            "Affinity If specified, the pod's scheduling constraints.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"arbitraryFSAccessThroughSMs": {
										Description: "ArbitraryFSAccessThroughSMs configures whether configuration based on a service scrape can access arbitrary files on the file system of the VMAgent container e.g. bearer token files.",
										Properties:  map[string]apiextensionsv1.JSONSchemaProps{"deny": {Type: "boolean"}},
										Type:        "object",
									},
									"claimTemplates": {
										Description: "ClaimTemplates allows adding additional VolumeClaimTemplates for VMAgent in StatefulMode",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"apiVersion": {
														Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
														Type:        "string",
													},
													"kind": {
														Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
														Type:        "string",
													},
													"metadata": {
														Description:            "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
													"spec": {
														Description: "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"dataSource": {
																Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"dataSourceRef": {
																Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"resources": {
																Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"limits": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																	"requests": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																},
																Type: "object",
															},
															"selector": {
																Description: "selector is a label query over volumes to consider for binding.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"matchExpressions": {
																		Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "key is the label key that the selector applies to.",
																						Type:        "string",
																					},
																					"operator": {
																						Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																						Type:        "string",
																					},
																					"values": {
																						Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																						Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																						Type:        "array",
																					},
																				},
																				Required: []string{
																					"key",
																					"operator",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"matchLabels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																		Type:        "object",
																	},
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"storageClassName": {
																Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
																Type:        "string",
															},
															"volumeMode": {
																Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
																Type:        "string",
															},
															"volumeName": {
																Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"status": {
														Description: "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"allocatedResources": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "object",
															},
															"capacity": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "capacity represents the actual resources of the underlying volume.",
																Type:        "object",
															},
															"conditions": {
																Description: "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "PersistentVolumeClaimCondition contails details about state of pvc",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"lastProbeTime": {
																				Description: "lastProbeTime is the time we probed the condition.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"lastTransitionTime": {
																				Description: "lastTransitionTime is the time the condition transitioned from one status to another.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"message": {
																				Description: "message is the human-readable message indicating details about last transition.",
																				Type:        "string",
																			},
																			"reason": {
																				Description: `reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.`,
																				Type:        "string",
																			},
																			"status": {Type: "string"},
																			"type": {
																				Description: "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"status",
																			"type",
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"phase": {
																Description: "phase represents the current phase of PersistentVolumeClaim.",
																Type:        "string",
															},
															"resizeStatus": {
																Description: "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"configMaps": {
										Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the vmagent object, which shall be mounted into the vmagent Pods. will be mounted at path  /etc/vm/configs",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"containers": {
										Description: "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"dnsConfig": {
										Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"nameservers": {
												Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"options": {
												Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Required.",
																Type:        "string",
															},
															"value": {Type: "string"},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"searches": {
												Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
										},
										Type: "object",
									},
									"dnsPolicy": {
										Description: "DNSPolicy set DNS policy for the pod",
										Type:        "string",
									},
									"enforcedNamespaceLabel": {
										Description: "EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.",
										Type:        "string",
									},
									"externalLabels": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "ExternalLabels The labels to add to any time series scraped by vmagent. it doesn't affect metrics ingested directly by push API's",
										Type:        "object",
									},
									"extraArgs": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "ExtraArgs that will be passed to  VMAgent pod for example remoteWrite.tmpDataPath: /tmp it would be converted to flag --remoteWrite.tmpDataPath=/tmp",
										Type:        "object",
									},
									"extraEnvs": {
										Description: "ExtraEnvs that will be added to VMAgent pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "EnvVar represents an environment variable present in a Container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
														Type:        "string",
													},
													"value": {
														Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
														Type:        "string",
													},
												},
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"hostNetwork": {
										Description: "HostNetwork controls whether the pod may use the node network namespace",
										Type:        "boolean",
									},
									"host_aliases": {
										Description: "HostAliases provides mapping between ip and hostnames, that would be propagated to pod, cannot be used with HostNetwork.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"hostnames": {
														Description: "Hostnames for the above IP address.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"ip": {
														Description: "IP address of the host file entry.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"ignoreNamespaceSelectors": {
										Description: "IgnoreNamespaceSelectors if set to true will ignore NamespaceSelector settings from the podscrape and vmservicescrape configs, and they will only discover endpoints within their current namespace.  Defaults to false.",
										Type:        "boolean",
									},
									"image": {
										Description: "Image - docker image settings for VMAgent if no specified operator uses default config version",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"pullPolicy": {
												Description: "PullPolicy describes how to pull docker image",
												Type:        "string",
											},
											"repository": {
												Description: "Repository contains name of docker image + it's repository if needed",
												Type:        "string",
											},
											"tag": {
												Description: "Tag contains desired docker image version",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"imagePullSecrets": {
										Description: "ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "array",
									},
									"initContainers": {
										Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the vmagent configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"inlineRelabelConfig": {
										Description: "InlineRelabelConfig - defines GlobalRelabelConfig for vmagent, can be defined directly at CRD.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"inlineScrapeConfig": {
										Description: `InlineScrapeConfig As scrape configs are appended, the user is responsible to make sure it is valid. Note that using this feature may expose the possibility to break upgrades of VMAgent. It is advised to review VMAgent release notes to ensure that no incompatible scrape configs are going to break VMAgent after the upgrade. it should be defined as single yaml file. inlineScrapeConfig: | - job_name: "prometheus" static_configs: - targets: ["localhost:9090"]`,
										Type:        "string",
									},
									"insertPorts": {
										Description: "InsertPorts - additional listen ports for data ingestion.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"graphitePort": {
												Description: "GraphitePort listen port",
												Type:        "string",
											},
											"influxPort": {
												Description: "InfluxPort listen port",
												Type:        "string",
											},
											"openTSDBHTTPPort": {
												Description: "OpenTSDBHTTPPort for http connections.",
												Type:        "string",
											},
											"openTSDBPort": {
												Description: "OpenTSDBPort for tcp and udp listen",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"livenessProbe": {
										Description:            "LivenessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"logFormat": {
										Description: "LogFormat for VMAgent to be configured with.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"default\"")},
											{Raw: []byte("\"json\"")},
										},
										Type: "string",
									},
									"logLevel": {
										Description: "LogLevel for VMAgent to be configured with. INFO, WARN, ERROR, FATAL, PANIC",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"INFO\"")},
											{Raw: []byte("\"WARN\"")},
											{Raw: []byte("\"ERROR\"")},
											{Raw: []byte("\"FATAL\"")},
											{Raw: []byte("\"PANIC\"")},
										},
										Type: "string",
									},
									"maxScrapeInterval": {
										Description: "MaxScrapeInterval allows limiting maximum scrape interval for VMServiceScrape, VMPodScrape and other scrapes If interval is higher than defined limit, `maxScrapeInterval` will be used.",
										Type:        "string",
									},
									"minScrapeInterval": {
										Description: "MinScrapeInterval allows limiting minimal scrape interval for VMServiceScrape, VMPodScrape and other scrapes If interval is lower than defined limit, `minScrapeInterval` will be used.",
										Type:        "string",
									},
									"nodeScrapeNamespaceSelector": {
										Description: "NodeScrapeNamespaceSelector defines Namespaces to be selected for VMNodeScrape discovery. Works in combination with Selector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"nodeScrapeRelabelTemplate": {
										Description: "NodeScrapeRelabelTemplate defines relabel config, that will be added to each VMNodeScrape. it's useful for adding specific labels to all targets",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"nodeScrapeSelector": {
										Description: "NodeScrapeSelector defines VMNodeScrape to be selected for scraping. Works in combination with NamespaceSelector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"nodeSelector": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
										Type:        "object",
									},
									"overrideHonorLabels": {
										Description: "OverrideHonorLabels if set to true overrides all user configured honor_labels. If HonorLabels is set in ServiceScrape or PodScrape to true, this overrides honor_labels to false.",
										Type:        "boolean",
									},
									"overrideHonorTimestamps": {
										Description: "OverrideHonorTimestamps allows to globally enforce honoring timestamps in all scrape configs.",
										Type:        "boolean",
									},
									"podDisruptionBudget": {
										Description: "PodDisruptionBudget created by operator",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"maxUnavailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".`,
												XIntOrString: true,
											},
											"minAvailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".`,
												XIntOrString: true,
											},
											"selectorLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "replaces default labels selector generated by operator it's useful when you need to create custom budget",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"podMetadata": {
										Description: "PodMetadata configures Labels and Annotations which are propagated to the vmagent pods.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"annotations": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
												Type:        "object",
											},
											"labels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
												Type:        "object",
											},
											"name": {
												Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"podScrapeNamespaceSelector": {
										Description: "PodScrapeNamespaceSelector defines Namespaces to be selected for VMPodScrape discovery. Works in combination with Selector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"podScrapeRelabelTemplate": {
										Description: "PodScrapeRelabelTemplate defines relabel config, that will be added to each VMPodScrape. it's useful for adding specific labels to all targets",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"podScrapeSelector": {
										Description: "PodScrapeSelector defines PodScrapes to be selected for target discovery. Works in combination with NamespaceSelector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"podSecurityPolicyName": {
										Description: "PodSecurityPolicyName - defines name for podSecurityPolicy in case of empty value, prefixedName will be used.",
										Type:        "string",
									},
									"port": {
										Description: "Port listen address",
										Type:        "string",
									},
									"priorityClassName": {
										Description: "PriorityClassName assigned to the Pods",
										Type:        "string",
									},
									"probeNamespaceSelector": {
										Description: "ProbeNamespaceSelector defines Namespaces to be selected for VMProbe discovery. Works in combination with Selector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"probeScrapeRelabelTemplate": {
										Description: "ProbeScrapeRelabelTemplate defines relabel config, that will be added to each VMProbeScrape. it's useful for adding specific labels to all targets",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"probeSelector": {
										Description: "ProbeSelector defines VMProbe to be selected for target probing. Works in combination with NamespaceSelector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"readinessGates": {
										Description: "ReadinessGates defines pod readiness gates",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PodReadinessGate contains the reference to a pod condition",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"conditionType": {
														Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
														Type:        "string",
													},
												},
												Required: []string{"conditionType"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"readinessProbe": {
										Description:            "ReadinessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"relabelConfig": {
										Description: "RelabelConfig ConfigMap with global relabel config -remoteWrite.relabelConfig This relabeling is applied to all the collected metrics before sending them to remote storage.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"key": {
												Description: "The key to select.",
												Type:        "string",
											},
											"name": {
												Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
												Type:        "string",
											},
											"optional": {
												Description: "Specify whether the ConfigMap or its key must be defined",
												Type:        "boolean",
											},
										},
										Required: []string{"key"},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"remoteWrite": {
										Description: "RemoteWrite list of victoria metrics /some other remote write system for vm it must looks like: http://victoria-metrics-single:8429/api/v1/write or for cluster different url https://github.com/VictoriaMetrics/VictoriaMetrics/tree/master/app/vmagent#splitting-data-streams-among-multiple-systems",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VMAgentRemoteWriteSpec defines the remote storage configuration for VmAgent",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"basicAuth": {
														Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"password": {
																Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"password_file": {
																Description: "PasswordFile defines path to password file at disk",
																Type:        "string",
															},
															"username": {
																Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"bearerTokenSecret": {
														Description: "Optional bearer auth token to use for -remoteWrite.url",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"headers": {
														Description: "Headers allow configuring custom http headers Must be in form of semicolon separated header with value e.g. headerName: headerValue vmagent supports since 1.79.0 version",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"inlineUrlRelabelConfig": {
														Description: "InlineUrlRelabelConfig defines relabeling config for remoteWriteURL, it can be defined at crd spec.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"oauth2": {
														Description: "OAuth2 defines auth configuration",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"client_id": {
																Description: "The secret or configmap containing the OAuth2 client id",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"client_secret": {
																Description: "The secret containing the OAuth2 client secret",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"client_secret_file": {
																Description: "ClientSecretFile defines path for client secret file.",
																Type:        "string",
															},
															"endpoint_params": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Parameters to append to the token URL",
																Type:        "object",
															},
															"scopes": {
																Description: "OAuth2 scopes used for the token request",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"token_url": {
																Description: "The URL to fetch the token from",
																MinLength:   vmop.P(int64(1)),
																Type:        "string",
															},
														},
														Required: []string{
															"client_id",
															"token_url",
														},
														Type: "object",
													},
													"sendTimeout": {
														Description: "Timeout for sending a single block of data to -remoteWrite.url (default 1m0s)",
														Pattern:     "[0-9]+(ms|s|m|h)",
														Type:        "string",
													},
													"streamAggrConfig": {
														Description: "StreamAggrConfig defines stream aggregation configuration for VMAgent for -remoteWrite.url",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"dedupInterval": {
																Description: "Allows setting different de-duplication intervals per each configured remote storage",
																Type:        "string",
															},
															"keepInput": {
																Description: "Allows writing both raw and aggregate data",
																Type:        "boolean",
															},
															"rules": {
																Description: "Stream aggregation rules",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "StreamAggrRule defines the rule in stream aggregation config",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"by": {
																				Description: `
By is an optional list of labels for grouping input series. 
 See also Without. 
 If neither By nor Without are set, then the Outputs are calculated individually per each input time series.
`,
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:  "array",
																			},
																			"input_relabel_configs": {
																				Description: "InputRelabelConfigs is an optional relabeling rules, which are applied on the input before aggregation.",
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"action": {
																								Description: "Action to perform based on regex matching. Default is 'replace'",
																								Type:        "string",
																							},
																							"if": {
																								Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																								Type:        "string",
																							},
																							"labels": {
																								AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																									Allows: true,
																									Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																								},
																								Description: "Labels is used together with Match for `action: graphite`",
																								Type:        "object",
																							},
																							"match": {
																								Description: "Match is used together with Labels for `action: graphite`",
																								Type:        "string",
																							},
																							"modulus": {
																								Description: "Modulus to take of the hash of the source label values.",
																								Format:      "int64",
																								Type:        "integer",
																							},
																							"regex": {
																								Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																								Type:        "string",
																							},
																							"replacement": {
																								Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																								Type:        "string",
																							},
																							"separator": {
																								Description: "Separator placed between concatenated source label values. default is ';'.",
																								Type:        "string",
																							},
																							"sourceLabels": {
																								Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																								Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																								Type:        "array",
																							},
																							"source_labels": {
																								Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																								Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																								Type:        "array",
																							},
																							"targetLabel": {
																								Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																								Type:        "string",
																							},
																							"target_label": {
																								Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																								Type:        "string",
																							},
																						},
																						Type: "object",
																					},
																				},
																				Type: "array",
																			},
																			"interval": {
																				Description: "Interval is the interval between aggregations.",
																				Type:        "string",
																			},
																			"match": {
																				Description: `
Match is a label selector for filtering time series for the given selector. 
 If the match isn't set, then all the input time series are processed.
`,
																				Type: "string",
																			},
																			"output_relabel_configs": {
																				Description: "OutputRelabelConfigs is an optional relabeling rules, which are applied on the aggregated output before being sent to remote storage.",
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"action": {
																								Description: "Action to perform based on regex matching. Default is 'replace'",
																								Type:        "string",
																							},
																							"if": {
																								Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																								Type:        "string",
																							},
																							"labels": {
																								AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																									Allows: true,
																									Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																								},
																								Description: "Labels is used together with Match for `action: graphite`",
																								Type:        "object",
																							},
																							"match": {
																								Description: "Match is used together with Labels for `action: graphite`",
																								Type:        "string",
																							},
																							"modulus": {
																								Description: "Modulus to take of the hash of the source label values.",
																								Format:      "int64",
																								Type:        "integer",
																							},
																							"regex": {
																								Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																								Type:        "string",
																							},
																							"replacement": {
																								Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																								Type:        "string",
																							},
																							"separator": {
																								Description: "Separator placed between concatenated source label values. default is ';'.",
																								Type:        "string",
																							},
																							"sourceLabels": {
																								Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																								Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																								Type:        "array",
																							},
																							"source_labels": {
																								Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																								Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																								Type:        "array",
																							},
																							"targetLabel": {
																								Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																								Type:        "string",
																							},
																							"target_label": {
																								Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																								Type:        "string",
																							},
																						},
																						Type: "object",
																					},
																				},
																				Type: "array",
																			},
																			"outputs": {
																				Description: `
Outputs is a list of output aggregate functions to produce. 
 The following names are allowed: 
 - total - aggregates input counters - increase - counts the increase over input counters - count_series - counts the input series - count_samples - counts the input samples - sum_samples - sums the input samples - last - the last biggest sample value - min - the minimum sample value - max - the maximum sample value - avg - the average value across all the samples - stddev - standard deviation across all the samples - stdvar - standard variance across all the samples - histogram_bucket - creates VictoriaMetrics histogram for input samples - quantiles(phi1, ..., phiN) - quantiles' estimation for phi in the range [0..1] 
 The output time series will have the following names: 
 input_name:aggr_<interval>_<output>
`,
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:  "array",
																			},
																			"without": {
																				Description: `
Without is an optional list of labels, which must be excluded when grouping input series. 
 See also By. 
 If neither By nor Without are set, then the Outputs are calculated individually per each input time series.
`,
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:  "array",
																			},
																		},
																		Required: []string{
																			"interval",
																			"outputs",
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
														},
														Required: []string{"rules"},
														Type:     "object",
													},
													"tlsConfig": {
														Description: "TLSConfig describes tls configuration for remote write target",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"ca": {
																Description: "Stuct containing the CA cert to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"caFile": {
																Description: "Path to the CA cert in the container to use for the targets.",
																Type:        "string",
															},
															"cert": {
																Description: "Struct containing the client cert file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"certFile": {
																Description: "Path to the client cert file in the container for the targets.",
																Type:        "string",
															},
															"insecureSkipVerify": {
																Description: "Disable target certificate validation.",
																Type:        "boolean",
															},
															"keyFile": {
																Description: "Path to the client key file in the container for the targets.",
																Type:        "string",
															},
															"keySecret": {
																Description: "Secret containing the client key file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"serverName": {
																Description: "Used to verify the hostname for the targets.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"url": {
														Description: "URL of the endpoint to send samples to.",
														Type:        "string",
													},
													"urlRelabelConfig": {
														Description: "ConfigMap with relabeling config which is applied to metrics before sending them to the corresponding -remoteWrite.url",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key to select.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the ConfigMap or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Required: []string{"url"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"remoteWriteSettings": {
										Description: "RemoteWriteSettings defines global settings for all remoteWrite urls.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"flushInterval": {
												Description: "Interval for flushing the data to remote storage. (default 1s)",
												Pattern:     "[0-9]+(ms|s|m|h)",
												Type:        "string",
											},
											"label": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Optional labels in the form 'name=value' to add to all the metrics before sending them",
												Type:        "object",
											},
											"maxBlockSize": {
												Description: "The maximum size in bytes of unpacked request to send to remote storage",
												Format:      "int32",
												Type:        "integer",
											},
											"maxDiskUsagePerURL": {
												Description: "The maximum file-based buffer size in bytes at -remoteWrite.tmpDataPath",
												Format:      "int64",
												Type:        "integer",
											},
											"queues": {
												Description: "The number of concurrent queues",
												Format:      "int32",
												Type:        "integer",
											},
											"showURL": {
												Description: "Whether to show -remoteWrite.url in the exported metrics. It is hidden by default, since it can contain sensitive auth info",
												Type:        "boolean",
											},
											"tmpDataPath": {
												Description: "Path to directory where temporary data for remote write component is stored (default vmagent-remotewrite-data)",
												Type:        "string",
											},
											"useMultiTenantMode": {
												Description: "Configures vmagent in multi-tenant mode with direct cluster support docs https://docs.victoriametrics.com/vmagent.html#multitenancy it's global setting and affects all remote storage configurations",
												Type:        "boolean",
											},
										},
										Type: "object",
									},
									"replicaCount": {
										Description: "ReplicaCount is the expected size of the VMAgent cluster. The controller will eventually make the size of the running cluster equal to the expected size. NOTE enable VMSingle deduplication for replica usage",
										Format:      "int32",
										Type:        "integer",
									},
									"resources": {
										Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not specified - default setting will be used",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"limits": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
											"requests": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"rollingUpdate": {
										Description: "RollingUpdate - overrides deployment update params.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"maxSurge": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
												XIntOrString: true,
											},
											"maxUnavailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
												XIntOrString: true,
											},
										},
										Type: "object",
									},
									"runtimeClassName": {
										Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
										Type:        "string",
									},
									"schedulerName": {
										Description: "SchedulerName - defines kubernetes scheduler name",
										Type:        "string",
									},
									"scrapeInterval": {
										Description: "ScrapeInterval defines how often scrape targets by default",
										Pattern:     "[0-9]+(ms|s|m|h)",
										Type:        "string",
									},
									"scrapeTimeout": {
										Description: "ScrapeTimeout defines global timeout for targets scrape",
										Pattern:     "[0-9]+(ms|s|m|h)",
										Type:        "string",
									},
									"secrets": {
										Description: "Secrets is a list of Secrets in the same namespace as the vmagent object, which shall be mounted into the vmagent Pods. will be mounted at path /etc/vm/secrets",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"securityContext": {
										Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"selectAllByDefault": {
										Description: "SelectAllByDefault changes default behavior for empty CRD selectors, such ServiceScrapeSelector. with selectAllScrapes: true and empty serviceScrapeSelector and ServiceScrapeNamespaceSelector Operator selects all exist serviceScrapes with selectAllScrapes: false - selects nothing",
										Type:        "boolean",
									},
									"serviceAccountName": {
										Description: "ServiceAccountName is the name of the ServiceAccount to use to run the VMAgent Pods.",
										Type:        "string",
									},
									"serviceScrapeNamespaceSelector": {
										Description: "ServiceScrapeNamespaceSelector Namespaces to be selected for VMServiceScrape discovery. Works in combination with Selector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"serviceScrapeRelabelTemplate": {
										Description: "ServiceScrapeRelabelTemplate defines relabel config, that will be added to each VMServiceScrape. it's useful for adding specific labels to all targets",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"serviceScrapeSelector": {
										Description: "ServiceScrapeSelector defines ServiceScrapes to be selected for target discovery. Works in combination with NamespaceSelector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"serviceScrapeSpec": {
										Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
										Required:               []string{"endpoints"},
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"serviceSpec": {
										Description: "ServiceSpec that will be added to vmagent service spec",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"metadata": {
												Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"spec": {
												Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Required: []string{"spec"},
										Type:     "object",
									},
									"shardCount": {
										Description: "ShardCount - numbers of shards of VMAgent in this case operator will use 1 deployment/sts per shard with replicas count according to spec.replicas https://victoriametrics.github.io/vmagent.html#scraping-big-number-of-targets",
										Type:        "integer",
									},
									"startupProbe": {
										Description:            "StartupProbe that will be added to CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"statefulMode": {
										Description: "StatefulMode enables StatefulSet for `VMAgent` instead of Deployment it allows using persistent storage for vmagent's persistentQueue",
										Type:        "boolean",
									},
									"statefulRollingUpdateStrategy": {
										Description: "StatefulRollingUpdateStrategy allows configuration for strategyType set it to RollingUpdate for disabling operator statefulSet rollingUpdate",
										Type:        "string",
									},
									"statefulStorage": {
										Description: "StatefulStorage configures storage for StatefulSet",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"disableMountSubPath": {
												Description: "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
												Type:        "boolean",
											},
											"emptyDir": {
												Description: "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"medium": {
														Description: `medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir`,
														Type:        "string",
													},
													"sizeLimit": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Type: "object",
											},
											"volumeClaimTemplate": {
												Description: "A PVC spec to be used by the VMAlertManager StatefulSets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"apiVersion": {
														Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
														Type:        "string",
													},
													"kind": {
														Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
														Type:        "string",
													},
													"metadata": {
														Description: "EmbeddedMetadata contains metadata relevant to an EmbeddedResource.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"annotations": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
																Type:        "object",
															},
															"labels": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
																Type:        "object",
															},
															"name": {
																Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"spec": {
														Description: "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"dataSource": {
																Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"dataSourceRef": {
																Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"resources": {
																Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"limits": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																	"requests": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																},
																Type: "object",
															},
															"selector": {
																Description: "selector is a label query over volumes to consider for binding.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"matchExpressions": {
																		Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "key is the label key that the selector applies to.",
																						Type:        "string",
																					},
																					"operator": {
																						Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																						Type:        "string",
																					},
																					"values": {
																						Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																						Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																						Type:        "array",
																					},
																				},
																				Required: []string{
																					"key",
																					"operator",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"matchLabels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																		Type:        "object",
																	},
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"storageClassName": {
																Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
																Type:        "string",
															},
															"volumeMode": {
																Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
																Type:        "string",
															},
															"volumeName": {
																Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"status": {
														Description: "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"allocatedResources": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "object",
															},
															"capacity": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "capacity represents the actual resources of the underlying volume.",
																Type:        "object",
															},
															"conditions": {
																Description: "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "PersistentVolumeClaimCondition contails details about state of pvc",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"lastProbeTime": {
																				Description: "lastProbeTime is the time we probed the condition.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"lastTransitionTime": {
																				Description: "lastTransitionTime is the time the condition transitioned from one status to another.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"message": {
																				Description: "message is the human-readable message indicating details about last transition.",
																				Type:        "string",
																			},
																			"reason": {
																				Description: `reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.`,
																				Type:        "string",
																			},
																			"status": {Type: "string"},
																			"type": {
																				Description: "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"status",
																			"type",
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"phase": {
																Description: "phase represents the current phase of PersistentVolumeClaim.",
																Type:        "string",
															},
															"resizeStatus": {
																Description: "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
										},
										Type: "object",
									},
									"staticScrapeNamespaceSelector": {
										Description: "StaticScrapeNamespaceSelector defines Namespaces to be selected for VMStaticScrape discovery. Works in combination with NamespaceSelector. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"staticScrapeRelabelTemplate": {
										Description: "StaticScrapeRelabelTemplate defines relabel config, that will be added to each VMStaticScrape. it's useful for adding specific labels to all targets",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"staticScrapeSelector": {
										Description: "StaticScrapeSelector defines PodScrapes to be selected for target discovery. Works in combination with NamespaceSelector. If both nil - match everything. NamespaceSelector nil - only objects at VMAgent namespace. Selector nil - only objects at NamespaceSelector namespaces.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"terminationGracePeriodSeconds": {
										Description: "TerminationGracePeriodSeconds period for container graceful termination",
										Format:      "int64",
										Type:        "integer",
									},
									"tolerations": {
										Description: "Tolerations If specified, the pod's tolerations.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"effect": {
														Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
														Type:        "string",
													},
													"key": {
														Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
														Type:        "string",
													},
													"operator": {
														Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
														Type:        "string",
													},
													"tolerationSeconds": {
														Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
														Format:      "int64",
														Type:        "integer",
													},
													"value": {
														Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"topologySpreadConstraints": {
										Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
												Required: []string{
													"maxSkew",
													"topologyKey",
													"whenUnsatisfiable",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"updateStrategy": {
										Description: "UpdateStrategy - overrides default update strategy. works only for deployments, statefulset always use OnDelete.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"Recreate\"")},
											{Raw: []byte("\"RollingUpdate\"")},
										},
										Type: "string",
									},
									"vmAgentExternalLabelName": {
										Description: "VMAgentExternalLabelName Name of vmAgent external label used to denote vmAgent instance name. Defaults to the value of `prometheus`. External label will _not_ be added when value is set to empty string (`\"\"`).",
										Type:        "string",
									},
									"volumeMounts": {
										Description: "VolumeMounts allows configuration of additional VolumeMounts on the output deploy definition. VolumeMounts specified will be appended to other VolumeMounts in the vmagent container, that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VolumeMount describes a mounting of a Volume within a container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"mountPath": {
														Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
														Type:        "string",
													},
													"mountPropagation": {
														Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
														Type:        "string",
													},
													"name": {
														Description: "This must match the Name of a Volume.",
														Type:        "string",
													},
													"readOnly": {
														Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
														Type:        "boolean",
													},
													"subPath": {
														Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
														Type:        "string",
													},
													"subPathExpr": {
														Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
														Type:        "string",
													},
												},
												Required: []string{
													"mountPath",
													"name",
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"volumes": {
										Description: "Volumes allows configuration of additional volumes on the output deploy definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
								},
								Type: "object",
							},
							"status": {
								Description: "VmAgentStatus defines the observed state of VmAgent",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"availableReplicas": {
										Description: "AvailableReplicas Total number of available pods (ready for at least minReadySeconds) targeted by this VMAlert cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"replicas": {
										Description: "ReplicaCount Total number of pods targeted by this VMAgent",
										Format:      "int32",
										Type:        "integer",
									},
									"selector": {
										Description: "Selector string form of label value set for autoscaling",
										Type:        "string",
									},
									"shards": {
										Description: "Shards represents total number of vmagent deployments with uniq scrape targets",
										Format:      "int32",
										Type:        "integer",
									},
									"unavailableReplicas": {
										Description: "UnavailableReplicas Total number of unavailable pods targeted by this VMAgent cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"updatedReplicas": {
										Description: "UpdatedReplicas Total number of non-terminated pods targeted by this VMAgent cluster that have the desired version spec.",
										Format:      "int32",
										Type:        "integer",
									},
								},
								Required: []string{
									"availableReplicas",
									"replicas",
									"selector",
									"shards",
									"unavailableReplicas",
									"updatedReplicas",
								},
								Type: "object",
							},
						},
						Type: "object",
					},
				},
				Served:  true,
				Storage: true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{
					Scale: &apiextensionsv1.CustomResourceSubresourceScale{
						LabelSelectorPath:  vmop.P(".status.selector"),
						SpecReplicasPath:   ".spec.shardCount",
						StatusReplicasPath: ".status.shards",
					},
				},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMAlertManagerConfigsCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmalertmanagerconfigs.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMAlertmanagerConfig",
			ListKind: "VMAlertmanagerConfigList",
			Plural:   "vmalertmanagerconfigs",
			Singular: "vmalertmanagerconfig",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMAlertmanagerConfig is the Schema for the vmalertmanagerconfigs API",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMAlertmanagerConfigSpec defines configuration for VMAlertmanagerConfig",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"-": {Type: "string"},
									"inhibit_rules": {
										Description: "InhibitRules will only apply for alerts matching the resource's namespace.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "InhibitRule defines an inhibition rule that allows to mute alerts when other alerts are already firing. Note, it doesn't support deprecated alertmanager config options. See https://prometheus.io/docs/alerting/latest/configuration/#inhibit_rule",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"equal": {
														Description: "Labels that must have an equal value in the source and target alert for the inhibition to take effect.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_matchers": {
														Description: "SourceMatchers defines a list of matchers for which one or more alerts have to exist for the inhibition to take effect.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"target_matchers": {
														Description: "TargetMatchers defines a list of matchers that have to be fulfilled by the target alerts to be muted.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"mute_time_intervals": {
										Description: "MuteTimeInterval - global mute time See https://prometheus.io/docs/alerting/latest/configuration/#mute_time_interval",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "MuteTimeInterval for alerts",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of interval",
														Type:        "string",
													},
													"time_intervals": {
														Description: "TimeIntervals interval configuration",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "TimeInterval defines intervals of time",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"days_of_month": {
																		Description: "DayOfMonth defines list of numerical days in the month. Days begin at 1. Negative values are also accepted. for example, ['1:5', '-3:-1']",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"location": {
																		Description: "Location in golang time location form, e.g. UTC",
																		Type:        "string",
																	},
																	"months": {
																		Description: "Months  defines list of calendar months identified by a case-insentive name (e.g. ‘January’) or numeric 1. For example, ['1:3', 'may:august', 'december']",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"times": {
																		Description: "Times defines time range for mute",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "TimeRange  ranges inclusive of the starting time and exclusive of the end time",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"end_time": {
																						Description: "EndTime for example HH:MM",
																						Type:        "string",
																					},
																					"start_time": {
																						Description: "StartTime for example  HH:MM",
																						Type:        "string",
																					},
																				},
																				Required: []string{
																					"end_time",
																					"start_time",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"weekdays": {
																		Description: "Weekdays defines list of days of the week, where the week begins on Sunday and ends on Saturday.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"years": {
																		Description: "Years defines numerical list of years, ranges are accepted. For example, ['2020:2022', '2030']",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
												},
												Required: []string{"time_intervals"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"receivers": {
										Description: "Receivers defines alert receivers. without defined Route, receivers will be skipped.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "Receiver defines one or more notification integrations.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"email_configs": {
														Description: "EmailConfigs defines email notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "EmailConfig configures notifications via Email.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"auth_identity": {
																		Description: "The identity to use for authentication.",
																		Type:        "string",
																	},
																	"auth_password": {
																		Description: "AuthPassword defines secret name and key at CRD namespace.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"auth_secret": {
																		Description: "AuthSecret defines secrent name and key at CRD namespace. It must contain the CRAM-MD5 secret.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"auth_username": {
																		Description: "The username to use for authentication.",
																		Type:        "string",
																	},
																	"from": {
																		Description: "The sender address.",
																		Type:        "string",
																	},
																	"headers": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Further headers email header key/value pairs. Overrides any headers previously set by the notification implementation.",
																		Type:        "object",
																	},
																	"hello": {
																		Description: "The hostname to identify to the SMTP server.",
																		Type:        "string",
																	},
																	"html": {
																		Description: "The HTML body of the email notification.",
																		Type:        "string",
																	},
																	"require_tls": {
																		Description: "The SMTP TLS requirement. Note that Go does not support unencrypted connections to remote SMTP endpoints.",
																		Type:        "boolean",
																	},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"smarthost": {
																		Description: "The SMTP host through which emails are sent.",
																		Type:        "string",
																	},
																	"text": {
																		Description: "The text body of the email notification.",
																		Type:        "string",
																	},
																	"tls_config": {
																		Description: "TLS configuration",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"ca": {
																				Description: "Stuct containing the CA cert to use for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"caFile": {
																				Description: "Path to the CA cert in the container to use for the targets.",
																				Type:        "string",
																			},
																			"cert": {
																				Description: "Struct containing the client cert file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"certFile": {
																				Description: "Path to the client cert file in the container for the targets.",
																				Type:        "string",
																			},
																			"insecureSkipVerify": {
																				Description: "Disable target certificate validation.",
																				Type:        "boolean",
																			},
																			"keyFile": {
																				Description: "Path to the client key file in the container for the targets.",
																				Type:        "string",
																			},
																			"keySecret": {
																				Description: "Secret containing the client key file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"serverName": {
																				Description: "Used to verify the hostname for the targets.",
																				Type:        "string",
																			},
																		},
																		Type: "object",
																	},
																	"to": {
																		Description: "The email address to send notifications to.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"name": {
														Description: "Name of the receiver. Must be unique across all items from the list.",
														MinLength:   vmop.P(int64(1)),
														Type:        "string",
													},
													"opsgenie_configs": {
														Description: "OpsGenieConfigs defines ops genie notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "OpsGenieConfig configures notifications via OpsGenie. See https://prometheus.io/docs/alerting/latest/configuration/#opsgenie_config",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiURL": {
																		Description: "The URL to send OpsGenie API requests to.",
																		Type:        "string",
																	},
																	"api_key": {
																		Description: "The secret's key that contains the OpsGenie API key. It must be at them same namespace as CRD",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"description": {
																		Description: "Description of the incident.",
																		Type:        "string",
																	},
																	"details": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "A set of arbitrary key/value pairs that provide further detail about the incident.",
																		Type:        "object",
																	},
																	"http_config": {
																		Description:            "HTTP client configuration.",
																		Type:                   "object",
																		XPreserveUnknownFields: vmop.P(true),
																	},
																	"message": {
																		Description: "Alert text limited to 130 characters.",
																		Type:        "string",
																	},
																	"note": {
																		Description: "Additional alert note.",
																		Type:        "string",
																	},
																	"priority": {
																		Description: "Priority level of alert. Possible values are P1, P2, P3, P4, and P5.",
																		Type:        "string",
																	},
																	"responders": {
																		Description: "List of responders responsible for notifications.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "OpsGenieConfigResponder defines a responder to an incident. One of `id`, `name` or `username` has to be defined.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"id": {
																						Description: "ID of the responder.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the responder.",
																						Type:        "string",
																					},
																					"type": {
																						Description: "Type of responder.",
																						MinLength:   vmop.P(int64(1)),
																						Type:        "string",
																					},
																					"username": {
																						Description: "Username of the responder.",
																						Type:        "string",
																					},
																				},
																				Required: []string{"type"},
																				Type:     "object",
																			},
																		},
																		Type: "array",
																	},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"source": {
																		Description: "Backlink to the sender of the notification.",
																		Type:        "string",
																	},
																	"tags": {
																		Description: "Comma separated list of tags attached to the notifications.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"pagerduty_configs": {
														Description: "PagerDutyConfigs defines pager duty notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "PagerDutyConfig configures notifications via PagerDuty. See https://prometheus.io/docs/alerting/latest/configuration/#pagerduty_config",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"class": {
																		Description: "The class/type of the event.",
																		Type:        "string",
																	},
																	"client": {
																		Description: "Client identification.",
																		Type:        "string",
																	},
																	"client_url": {
																		Description: "Backlink to the sender of notification.",
																		Type:        "string",
																	},
																	"component": {
																		Description: "The part or component of the affected system that is broken.",
																		Type:        "string",
																	},
																	"description": {
																		Description: "Description of the incident.",
																		Type:        "string",
																	},
																	"details": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Arbitrary key/value pairs that provide further detail about the incident.",
																		Type:        "object",
																	},
																	"group": {
																		Description: "A cluster or grouping of sources.",
																		Type:        "string",
																	},
																	"http_config": {
																		Description:            "HTTP client configuration.",
																		Type:                   "object",
																		XPreserveUnknownFields: vmop.P(true),
																	},
																	"images": {
																		Description: "Images to attach to the incident.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "ImageConfig is used to attach images to the incident. See https://developer.pagerduty.com/docs/ZG9jOjExMDI5NTgx-send-an-alert-event#the-images-property for more information.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"alt":    {Type: "string"},
																					"href":   {Type: "string"},
																					"source": {Type: "string"},
																				},
																				Required: []string{"source"},
																				Type:     "object",
																			},
																		},
																		Type: "array",
																	},
																	"links": {
																		Description: "Links to attach to the incident.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "LinkConfig is used to attach text links to the incident. See https://developer.pagerduty.com/docs/ZG9jOjExMDI5NTgx-send-an-alert-event#the-links-property for more information.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"href": {Type: "string"},
																					"text": {Type: "string"},
																				},
																				Required: []string{"href"},
																				Type:     "object",
																			},
																		},
																		Type: "array",
																	},
																	"routing_key": {
																		Description: "The secret's key that contains the PagerDuty integration key (when using Events API v2). Either this field or `serviceKey` needs to be defined. It must be at them same namespace as CRD",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"service_key": {
																		Description: "The secret's key that contains the PagerDuty service key (when using integration type \"Prometheus\"). Either this field or `routingKey` needs to be defined. It must be at them same namespace as CRD",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"severity": {
																		Description: "Severity of the incident.",
																		Type:        "string",
																	},
																	"url": {
																		Description: "The URL to send requests to.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"pushover_configs": {
														Description: "PushoverConfigs defines push over notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "PushoverConfig configures notifications via Pushover. See https://prometheus.io/docs/alerting/latest/configuration/#pushover_config",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"expire": {
																		Description: "How long your notification will continue to be retried for, unless the user acknowledges the notification.",
																		Type:        "string",
																	},
																	"html": {
																		Description: "Whether notification message is HTML or plain text.",
																		Type:        "boolean",
																	},
																	"http_config": {
																		Description:            "HTTP client configuration.",
																		Type:                   "object",
																		XPreserveUnknownFields: vmop.P(true),
																	},
																	"message": {
																		Description: "Notification message.",
																		Type:        "string",
																	},
																	"priority": {
																		Description: "Priority, see https://pushover.net/api#priority",
																		Type:        "string",
																	},
																	"retry": {
																		Description: "How often the Pushover servers will send the same notification to the user. Must be at least 30 seconds.",
																		Type:        "string",
																	},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"sound": {
																		Description: "The name of one of the sounds supported by device clients to override the user's default sound choice",
																		Type:        "string",
																	},
																	"title": {
																		Description: "Notification title.",
																		Type:        "string",
																	},
																	"token": {
																		Description: "The secret's key that contains the registered application’s API token, see https://pushover.net/apps. It must be at them same namespace as CRD",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"url": {
																		Description: "A supplementary URL shown alongside the message.",
																		Type:        "string",
																	},
																	"url_title": {
																		Description: "A title for supplementary URL, otherwise just the URL is shown",
																		Type:        "string",
																	},
																	"user_key": {
																		Description: "The secret's key that contains the recipient user’s user key. It must be at them same namespace as CRD",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"slack_configs": {
														Description: "SlackConfigs defines slack notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "SlackConfig configures notifications via Slack. See https://prometheus.io/docs/alerting/latest/configuration/#slack_config",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"actions": {
																		Description: "A list of Slack actions that are sent with each notification.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "SlackAction configures a single Slack action that is sent with each notification. See https://api.slack.com/docs/message-attachments#action_fields and https://api.slack.com/docs/message-buttons for more information.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"confirm": {
																						Description: "SlackConfirmationField protect users from destructive actions or particularly distinguished decisions by asking them to confirm their button click one more time. See https://api.slack.com/docs/interactive-message-field-guide#confirmation_fields for more information.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"dismiss_text": {Type: "string"},
																							"ok_text":      {Type: "string"},
																							"text": {
																								MinLength: vmop.P(int64(1)),
																								Type:      "string",
																							},
																							"title": {Type: "string"},
																						},
																						Required: []string{"text"},
																						Type:     "object",
																					},
																					"name":  {Type: "string"},
																					"style": {Type: "string"},
																					"text": {
																						MinLength: vmop.P(int64(1)),
																						Type:      "string",
																					},
																					"type": {
																						MinLength: vmop.P(int64(1)),
																						Type:      "string",
																					},
																					"url":   {Type: "string"},
																					"value": {Type: "string"},
																				},
																				Required: []string{
																					"text",
																					"type",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"api_url": {
																		Description: "The secret's key that contains the Slack webhook URL. It must be at them same namespace as CRD",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"callback_id": {Type: "string"},
																	"channel": {
																		Description: "The channel or user to send notifications to.",
																		Type:        "string",
																	},
																	"color":    {Type: "string"},
																	"fallback": {Type: "string"},
																	"fields": {
																		Description: "A list of Slack fields that are sent with each notification.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "See https://api.slack.com/docs/message-attachments#fields for more information.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"short": {Type: "boolean"},
																					"title": {
																						MinLength: vmop.P(int64(1)),
																						Type:      "string",
																					},
																					"value": {
																						MinLength: vmop.P(int64(1)),
																						Type:      "string",
																					},
																				},
																				Required: []string{
																					"title",
																					"value",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"footer": {Type: "string"},
																	"http_config": {
																		Description:            "HTTP client configuration.",
																		Type:                   "object",
																		XPreserveUnknownFields: vmop.P(true),
																	},
																	"icon_emoji": {Type: "string"},
																	"icon_url":   {Type: "string"},
																	"image_url":  {Type: "string"},
																	"link_names": {Type: "boolean"},
																	"mrkdwn_in": {
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:  "array",
																	},
																	"pretext": {Type: "string"},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"short_fields": {Type: "boolean"},
																	"text":         {Type: "string"},
																	"thumb_url":    {Type: "string"},
																	"title":        {Type: "string"},
																	"title_link":   {Type: "string"},
																	"username":     {Type: "string"},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"telegram_configs": {
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"api_url": {
																		Description: "APIUrl the Telegram API URL i.e. https://api.telegram.org.",
																		Type:        "string",
																	},
																	"bot_token": {
																		Description: "BotToken token for the bot https://core.telegram.org/bots/api",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"chat_id": {
																		Description: "ChatID is ID of the chat where to send the messages.",
																		Type:        "integer",
																	},
																	"disable_notifications": {
																		Description: "DisableNotifications",
																		Type:        "boolean",
																	},
																	"http_config": {
																		Description:            "HTTP client configuration.",
																		Type:                   "object",
																		XPreserveUnknownFields: vmop.P(true),
																	},
																	"message": {
																		Description: "Message is templated message",
																		Type:        "string",
																	},
																	"parse_mode": {
																		Description: "ParseMode for telegram message, supported values are MarkdownV2, Markdown, Markdown and empty string for plain text.",
																		Type:        "string",
																	},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																},
																Required: []string{
																	"bot_token",
																	"chat_id",
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"victorops_configs": {
														Description: "VictorOpsConfigs defines victor ops notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "VictorOpsConfig configures notifications via VictorOps. See https://prometheus.io/docs/alerting/latest/configuration/#victorops_config",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"api_key": {
																		Description: "The secret's key that contains the API key to use when talking to the VictorOps API. It must be at them same namespace as CRD",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"api_url": {
																		Description: "The VictorOps API URL.",
																		Type:        "string",
																	},
																	"custom_fields": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Adds optional custom fields https://github.com/prometheus/alertmanager/blob/v0.24.0/config/notifiers.go#L537",
																		Type:        "object",
																	},
																	"entity_display_name": {
																		Description: "Contains summary of the alerted problem.",
																		Type:        "string",
																	},
																	"http_config": {
																		Description: "The HTTP client's configuration.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"basic_auth": {
																				Description: "TODO oAuth2 support BasicAuth for the client.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"password": {
																						Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"password_file": {
																						Description: "PasswordFile defines path to password file at disk",
																						Type:        "string",
																					},
																					"username": {
																						Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"bearer_token_file": {
																				Description: "BearerTokenFile defines filename for bearer token, it must be mounted to pod.",
																				Type:        "string",
																			},
																			"bearer_token_secret": {
																				Description: "The secret's key that contains the bearer token It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"proxyURL": {
																				Description: "Optional proxy URL.",
																				Type:        "string",
																			},
																			"tls_config": {
																				Description: "TLS configuration for the client.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"ca": {
																						Description: "Stuct containing the CA cert to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"configMap": {
																								Description: "ConfigMap containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key to select.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the ConfigMap or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																							"secret": {
																								Description: "Secret containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key of the secret to select from.  Must be a valid secret key.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the Secret or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																						},
																						Type: "object",
																					},
																					"caFile": {
																						Description: "Path to the CA cert in the container to use for the targets.",
																						Type:        "string",
																					},
																					"cert": {
																						Description: "Struct containing the client cert file for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"configMap": {
																								Description: "ConfigMap containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key to select.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the ConfigMap or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																							"secret": {
																								Description: "Secret containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key of the secret to select from.  Must be a valid secret key.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the Secret or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																						},
																						Type: "object",
																					},
																					"certFile": {
																						Description: "Path to the client cert file in the container for the targets.",
																						Type:        "string",
																					},
																					"insecureSkipVerify": {
																						Description: "Disable target certificate validation.",
																						Type:        "boolean",
																					},
																					"keyFile": {
																						Description: "Path to the client key file in the container for the targets.",
																						Type:        "string",
																					},
																					"keySecret": {
																						Description: "Secret containing the client key file for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"serverName": {
																						Description: "Used to verify the hostname for the targets.",
																						Type:        "string",
																					},
																				},
																				Type: "object",
																			},
																		},
																		Type: "object",
																	},
																	"message_type": {
																		Description: "Describes the behavior of the alert (CRITICAL, WARNING, INFO).",
																		Type:        "string",
																	},
																	"monitoring_tool": {
																		Description: "The monitoring tool the state message is from.",
																		Type:        "string",
																	},
																	"routing_key": {
																		Description: "A key used to map the alert to a team.",
																		Type:        "string",
																	},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"state_message": {
																		Description: "Contains long explanation of the alerted problem.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"webhook_configs": {
														Description: "WebhookConfigs defines webhook notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "WebhookConfig configures notifications via a generic receiver supporting the webhook payload. See https://prometheus.io/docs/alerting/latest/configuration/#webhook_config",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"http_config": {
																		Description:            "HTTP client configuration.",
																		Type:                   "object",
																		XPreserveUnknownFields: vmop.P(true),
																	},
																	"max_alerts": {
																		Description: "Maximum number of alerts to be sent per webhook message. When 0, all alerts are included.",
																		Format:      "int32",
																		Type:        "integer",
																	},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"url": {
																		Description: "URL to send requests to, one of `urlSecret` and `url` must be defined.",
																		Type:        "string",
																	},
																	"url_secret": {
																		Description: "URLSecret defines secret name and key at the CRD namespace. It must contain the webhook URL. one of `urlSecret` and `url` must be defined.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"wechat_configs": {
														Description: "WeChatConfigs defines wechat notification configurations.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "WeChatConfig configures notifications via WeChat. See https://prometheus.io/docs/alerting/latest/configuration/#wechat_config",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"agent_id": {Type: "string"},
																	"api_secret": {
																		Description: "The secret's key that contains the WeChat API key. The secret needs to be in the same namespace as the AlertmanagerConfig object and accessible by the Prometheus Operator.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"api_url": {
																		Description: "The WeChat API URL.",
																		Type:        "string",
																	},
																	"corp_id": {
																		Description: "The corp id for authentication.",
																		Type:        "string",
																	},
																	"http_config": {
																		Description: "HTTP client configuration.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"basic_auth": {
																				Description: "TODO oAuth2 support BasicAuth for the client.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"password": {
																						Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"password_file": {
																						Description: "PasswordFile defines path to password file at disk",
																						Type:        "string",
																					},
																					"username": {
																						Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"bearer_token_file": {
																				Description: "BearerTokenFile defines filename for bearer token, it must be mounted to pod.",
																				Type:        "string",
																			},
																			"bearer_token_secret": {
																				Description: "The secret's key that contains the bearer token It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"proxyURL": {
																				Description: "Optional proxy URL.",
																				Type:        "string",
																			},
																			"tls_config": {
																				Description: "TLS configuration for the client.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"ca": {
																						Description: "Stuct containing the CA cert to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"configMap": {
																								Description: "ConfigMap containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key to select.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the ConfigMap or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																							"secret": {
																								Description: "Secret containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key of the secret to select from.  Must be a valid secret key.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the Secret or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																						},
																						Type: "object",
																					},
																					"caFile": {
																						Description: "Path to the CA cert in the container to use for the targets.",
																						Type:        "string",
																					},
																					"cert": {
																						Description: "Struct containing the client cert file for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"configMap": {
																								Description: "ConfigMap containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key to select.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the ConfigMap or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																							"secret": {
																								Description: "Secret containing data to use for the targets.",
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"key": {
																										Description: "The key of the secret to select from.  Must be a valid secret key.",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																										Type:        "string",
																									},
																									"optional": {
																										Description: "Specify whether the Secret or its key must be defined",
																										Type:        "boolean",
																									},
																								},
																								Required: []string{"key"},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																						},
																						Type: "object",
																					},
																					"certFile": {
																						Description: "Path to the client cert file in the container for the targets.",
																						Type:        "string",
																					},
																					"insecureSkipVerify": {
																						Description: "Disable target certificate validation.",
																						Type:        "boolean",
																					},
																					"keyFile": {
																						Description: "Path to the client key file in the container for the targets.",
																						Type:        "string",
																					},
																					"keySecret": {
																						Description: "Secret containing the client key file for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"serverName": {
																						Description: "Used to verify the hostname for the targets.",
																						Type:        "string",
																					},
																				},
																				Type: "object",
																			},
																		},
																		Type: "object",
																	},
																	"message": {
																		Description: "API request data as defined by the WeChat API.",
																		Type:        "string",
																	},
																	"message_type": {Type: "string"},
																	"send_resolved": {
																		Description: "SendResolved controls notify about resolved alerts.",
																		Type:        "boolean",
																	},
																	"to_party": {Type: "string"},
																	"to_tag":   {Type: "string"},
																	"to_user":  {Type: "string"},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
												},
												Required: []string{"name"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"route": {
										Description: "Route definition for alertmanager, may include nested routes.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"active_time_intervals": {
												Description: "ActiveTimeIntervals Times when the route should be active These must match the name at time_intervals",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"continue": {
												Description: "Continue indicating whether an alert should continue matching subsequent sibling nodes. It will always be true for the first-level route if disableRouteContinueEnforce for vmalertmanager not set.",
												Type:        "boolean",
											},
											"group_by": {
												Description: "List of labels to group by.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"group_interval": {
												Description: "How long to wait before sending an updated notification.",
												Pattern:     "[0-9]+(ms|s|m|h)",
												Type:        "string",
											},
											"group_wait": {
												Description: "How long to wait before sending the initial notification.",
												Pattern:     "[0-9]+(ms|s|m|h)",
												Type:        "string",
											},
											"matchers": {
												Description: `List of matchers that the alert’s labels should match. For the first level route, the operator adds a namespace: "CRD_NS" matcher. https://prometheus.io/docs/alerting/latest/configuration/#matcher`,
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"mute_time_intervals": {
												Description: "MuteTimeIntervals for alerts",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"receiver": {
												Description: "Name of the receiver for this route.",
												Type:        "string",
											},
											"repeat_interval": {
												Description: "How long to wait before repeating the last notification.",
												Pattern:     "[0-9]+(ms|s|m|h)",
												Type:        "string",
											},
											"routes": {
												Description: "Child routes. https://prometheus.io/docs/alerting/latest/configuration/#route",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
												Type:        "array",
											},
										},
										Required: []string{"receiver"},
										Type:     "object",
									},
									"time_intervals": {
										Description: "ParsingError contents error with context if operator was failed to parse json object from kubernetes api server TimeIntervals modern config option, use it instead of  mute_time_intervals",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "MuteTimeInterval for alerts",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of interval",
														Type:        "string",
													},
													"time_intervals": {
														Description: "TimeIntervals interval configuration",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "TimeInterval defines intervals of time",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"days_of_month": {
																		Description: "DayOfMonth defines list of numerical days in the month. Days begin at 1. Negative values are also accepted. for example, ['1:5', '-3:-1']",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"location": {
																		Description: "Location in golang time location form, e.g. UTC",
																		Type:        "string",
																	},
																	"months": {
																		Description: "Months  defines list of calendar months identified by a case-insentive name (e.g. ‘January’) or numeric 1. For example, ['1:3', 'may:august', 'december']",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"times": {
																		Description: "Times defines time range for mute",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "TimeRange  ranges inclusive of the starting time and exclusive of the end time",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"end_time": {
																						Description: "EndTime for example HH:MM",
																						Type:        "string",
																					},
																					"start_time": {
																						Description: "StartTime for example  HH:MM",
																						Type:        "string",
																					},
																				},
																				Required: []string{
																					"end_time",
																					"start_time",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"weekdays": {
																		Description: "Weekdays defines list of days of the week, where the week begins on Sunday and ends on Saturday.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"years": {
																		Description: "Years defines numerical list of years, ranges are accepted. For example, ['2020:2022', '2030']",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
												},
												Required: []string{"time_intervals"},
												Type:     "object",
											},
										},
										Type: "array",
									},
								},
								Type: "object",
							},
							"status": {
								Description: "VMAlertmanagerConfigStatus defines the observed state of VMAlertmanagerConfig",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"reason": {
										Description: "ErrorReason describes validation or any other errors.",
										Type:        "string",
									},
								},
								Type: "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMAlertManagersCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmalertmanagers.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:       "VMAlertmanager",
			ListKind:   "VMAlertmanagerList",
			Plural:     "vmalertmanagers",
			ShortNames: []string{"vma"},
			Singular:   "vmalertmanager",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				AdditionalPrinterColumns: []apiextensionsv1.CustomResourceColumnDefinition{
					{
						Description: "The version of VMAlertmanager",
						JSONPath:    ".spec.version",
						Name:        "Version",
						Type:        "string",
					}, {
						Description: "The desired replicas number of Alertmanagers",
						JSONPath:    ".spec.ReplicaCount",
						Name:        "ReplicaCount",
						Type:        "integer",
					}, {
						JSONPath: ".metadata.creationTimestamp",
						Name:     "Age",
						Type:     "date",
					},
				},
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMAlertmanager represents Victoria-Metrics deployment for Alertmanager.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "Specification of the desired behavior of the VMAlertmanager cluster. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"-": {
										Description: "ParsingError contents error with context if operator was failed to parse json object from kubernetes api server",
										Type:        "string",
									},
									"additionalPeers": {
										Description: "AdditionalPeers allows injecting a set of additional Alertmanagers to peer with to form a highly available cluster.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"affinity": {
										Description:            "Affinity If specified, the pod's scheduling constraints.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"claimTemplates": {
										Description: "ClaimTemplates allows adding additional VolumeClaimTemplates for StatefulSet",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"apiVersion": {
														Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
														Type:        "string",
													},
													"kind": {
														Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
														Type:        "string",
													},
													"metadata": {
														Description:            "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
													"spec": {
														Description: "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"dataSource": {
																Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"dataSourceRef": {
																Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"resources": {
																Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"limits": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																	"requests": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																},
																Type: "object",
															},
															"selector": {
																Description: "selector is a label query over volumes to consider for binding.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"matchExpressions": {
																		Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "key is the label key that the selector applies to.",
																						Type:        "string",
																					},
																					"operator": {
																						Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																						Type:        "string",
																					},
																					"values": {
																						Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																						Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																						Type:        "array",
																					},
																				},
																				Required: []string{
																					"key",
																					"operator",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"matchLabels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																		Type:        "object",
																	},
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"storageClassName": {
																Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
																Type:        "string",
															},
															"volumeMode": {
																Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
																Type:        "string",
															},
															"volumeName": {
																Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"status": {
														Description: "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"allocatedResources": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "object",
															},
															"capacity": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "capacity represents the actual resources of the underlying volume.",
																Type:        "object",
															},
															"conditions": {
																Description: "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "PersistentVolumeClaimCondition contails details about state of pvc",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"lastProbeTime": {
																				Description: "lastProbeTime is the time we probed the condition.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"lastTransitionTime": {
																				Description: "lastTransitionTime is the time the condition transitioned from one status to another.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"message": {
																				Description: "message is the human-readable message indicating details about last transition.",
																				Type:        "string",
																			},
																			"reason": {
																				Description: `reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.`,
																				Type:        "string",
																			},
																			"status": {Type: "string"},
																			"type": {
																				Description: "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"status",
																			"type",
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"phase": {
																Description: "phase represents the current phase of PersistentVolumeClaim.",
																Type:        "string",
															},
															"resizeStatus": {
																Description: "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"clusterAdvertiseAddress": {
										Description: "ClusterAdvertiseAddress is the explicit address to advertise in cluster. Needs to be provided for non RFC1918 [1] (public) addresses. [1] RFC1918: https://tools.ietf.org/html/rfc1918",
										Type:        "string",
									},
									"configMaps": {
										Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VMAlertmanager object, which shall be mounted into the VMAlertmanager Pods. The ConfigMaps are mounted into /etc/vm/configs/<configmap-name>.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"configNamespaceSelector": {
										Description: "ConfigNamespaceSelector defines namespace selector for VMAlertmanagerConfig. Works in combination with Selector. NamespaceSelector nil - only objects at VMAlertmanager namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"configRawYaml": {
										Description: "ConfigRawYaml - raw configuration for alertmanager, it helps it to start without secret. priority -> hardcoded ConfigRaw -> ConfigRaw, provided by user -> ConfigSecret.",
										Type:        "string",
									},
									"configSecret": {
										Description: "ConfigSecret is the name of a Kubernetes Secret in the same namespace as the VMAlertmanager object, which contains configuration for this VMAlertmanager, configuration must be inside secret key: alertmanager.yaml. It must be created by user. instance. Defaults to 'vmalertmanager-<alertmanager-name>' The secret is mounted into /etc/alertmanager/config.",
										Type:        "string",
									},
									"configSelector": {
										Description: "ConfigSelector defines selector for VMAlertmanagerConfig, result config will be merged with with Raw or Secret config. Works in combination with NamespaceSelector. NamespaceSelector nil - only objects at VMAlertmanager namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"containers": {
										Description: "Containers allows injecting additional containers or patching existing containers. This is meant to allow adding an authentication proxy to an VMAlertmanager pod.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"disableNamespaceMatcher": {
										Description: "DisableNamespaceMatcher disables namespace label matcher for VMAlertmanagerConfig It may be useful if alert doesn't have namespace label for some reason",
										Type:        "boolean",
									},
									"disableRouteContinueEnforce": {
										Description: "DisableRouteContinueEnforce cancel the behavior for VMAlertmanagerConfig that always enforce first-level route continue to true",
										Type:        "boolean",
									},
									"dnsConfig": {
										Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"nameservers": {
												Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"options": {
												Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Required.",
																Type:        "string",
															},
															"value": {Type: "string"},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"searches": {
												Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
										},
										Type: "object",
									},
									"dnsPolicy": {
										Description: "DNSPolicy sets DNS policy for the pod",
										Type:        "string",
									},
									"externalURL": {
										Description: "ExternalURL the VMAlertmanager instances will be available under. This is necessary to generate correct URLs. This is necessary if VMAlertmanager is not served from root of a DNS name.",
										Type:        "string",
									},
									"extraArgs": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "ExtraArgs that will be passed to  VMAlertmanager pod for example log.level: debug",
										Type:        "object",
									},
									"extraEnvs": {
										Description: "ExtraEnvs that will be added to VMAlertmanager pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "EnvVar represents an environment variable present in a Container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
														Type:        "string",
													},
													"value": {
														Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
														Type:        "string",
													},
												},
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"hostNetwork": {
										Description: "HostNetwork controls whether the pod may use the node network namespace",
										Type:        "boolean",
									},
									"image": {
										Description: "Image - docker image settings for VMAlertmanager if no specified operator uses default config version",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"pullPolicy": {
												Description: "PullPolicy describes how to pull docker image",
												Type:        "string",
											},
											"repository": {
												Description: "Repository contains name of docker image + it's repository if needed",
												Type:        "string",
											},
											"tag": {
												Description: "Tag contains desired docker image version",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"imagePullSecrets": {
										Description: "ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "array",
									},
									"initContainers": {
										Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the VMAlertmanager configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"listenLocal": {
										Description: "ListenLocal makes the VMAlertmanager server listen on loopback, so that it does not bind against the Pod IP. Note this is only for the VMAlertmanager UI, not the gossip communication.",
										Type:        "boolean",
									},
									"livenessProbe": {
										Description:            "LivenessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"logFormat": {
										Description: "LogFormat for VMAlertmanager to be configured with.",
										Type:        "string",
									},
									"logLevel": {
										Description: "Log level for VMAlertmanager to be configured with.",
										Type:        "string",
									},
									"nodeSelector": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
										Type:        "object",
									},
									"paused": {
										Description: "Paused If set to true all actions on the underlaying managed objects are not goint to be performed, except for delete actions.",
										Type:        "boolean",
									},
									"podDisruptionBudget": {
										Description: "PodDisruptionBudget created by operator",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"maxUnavailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".`,
												XIntOrString: true,
											},
											"minAvailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".`,
												XIntOrString: true,
											},
											"selectorLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "replaces default labels selector generated by operator it's useful when you need to create custom budget",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"podMetadata": {
										Description: "PodMetadata configures Labels and Annotations which are propagated to the alertmanager pods.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"annotations": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
												Type:        "object",
											},
											"labels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
												Type:        "object",
											},
											"name": {
												Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"podSecurityPolicyName": {
										Description: "PodSecurityPolicyName - defines name for podSecurityPolicy in case of empty value, prefixedName will be used.",
										Type:        "string",
									},
									"portName": {
										Description: "PortName used for the pods and governing service. This defaults to web",
										Type:        "string",
									},
									"priorityClassName": {
										Description: "PriorityClassName class assigned to the Pods",
										Type:        "string",
									},
									"readinessGates": {
										Description: "ReadinessGates defines pod readiness gates",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PodReadinessGate contains the reference to a pod condition",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"conditionType": {
														Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
														Type:        "string",
													},
												},
												Required: []string{"conditionType"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"readinessProbe": {
										Description:            "ReadinessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"replicaCount": {
										Description: "ReplicaCount Size is the expected size of the alertmanager cluster. The controller will eventually make the size of the running cluster equal to the expected",
										Format:      "int32",
										Minimum:     vmop.P(1.0),
										Type:        "integer",
									},
									"resources": {
										Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"limits": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
											"requests": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"retention": {
										Description: "Retention Time duration VMAlertmanager shall retain data for. Default is '120h', and must match the regular expression `[0-9]+(ms|s|m|h)` (milliseconds seconds minutes hours).",
										Pattern:     "[0-9]+(ms|s|m|h)",
										Type:        "string",
									},
									"rollingUpdateStrategy": {
										Description: "RollingUpdateStrategy defines strategy for application updates Default is OnDelete, in this case operator handles update process Can be changed for RollingUpdate",
										Type:        "string",
									},
									"routePrefix": {
										Description: "RoutePrefix VMAlertmanager registers HTTP handlers for. This is useful, if using ExternalURL and a proxy is rewriting HTTP routes of a request, and the actual ExternalURL is still true, but the server serves requests under a different route prefix. For example for use with `kubectl proxy`.",
										Type:        "string",
									},
									"runtimeClassName": {
										Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
										Type:        "string",
									},
									"schedulerName": {
										Description: "SchedulerName - defines kubernetes scheduler name",
										Type:        "string",
									},
									"secrets": {
										Description: "Secrets is a list of Secrets in the same namespace as the VMAlertmanager object, which shall be mounted into the VMAlertmanager Pods. The Secrets are mounted into /etc/vm/secrets/<secret-name>",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"securityContext": {
										Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"selectAllByDefault": {
										Description: "SelectAllByDefault changes default behavior for empty CRD selectors, such ConfigSelector. with selectAllScrapes: true and undefined ConfigSelector and ConfigNamespaceSelector Operator selects all exist alertManagerConfigs with selectAllScrapes: false - selects nothing",
										Type:        "boolean",
									},
									"serviceAccountName": {
										Description: "ServiceAccountName is the name of the ServiceAccount to use",
										Type:        "string",
									},
									"serviceScrapeSpec": {
										Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
										Required:               []string{"endpoints"},
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"serviceSpec": {
										Description: "ServiceSpec that will be added to vmalertmanager service spec",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"metadata": {
												Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"spec": {
												Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Required: []string{"spec"},
										Type:     "object",
									},
									"startupProbe": {
										Description:            "StartupProbe that will be added to CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"storage": {
										Description: "Storage is the definition of how storage will be used by the VMAlertmanager instances.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"disableMountSubPath": {
												Description: "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
												Type:        "boolean",
											},
											"emptyDir": {
												Description: "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"medium": {
														Description: `medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir`,
														Type:        "string",
													},
													"sizeLimit": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Type: "object",
											},
											"volumeClaimTemplate": {
												Description: "A PVC spec to be used by the VMAlertManager StatefulSets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"apiVersion": {
														Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
														Type:        "string",
													},
													"kind": {
														Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
														Type:        "string",
													},
													"metadata": {
														Description: "EmbeddedMetadata contains metadata relevant to an EmbeddedResource.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"annotations": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
																Type:        "object",
															},
															"labels": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
																Type:        "object",
															},
															"name": {
																Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"spec": {
														Description: "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"dataSource": {
																Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"dataSourceRef": {
																Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"apiGroup": {
																		Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																		Type:        "string",
																	},
																	"kind": {
																		Description: "Kind is the type of resource being referenced",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name is the name of resource being referenced",
																		Type:        "string",
																	},
																},
																Required: []string{
																	"kind",
																	"name",
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"resources": {
																Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"limits": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																	"requests": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																		Type:        "object",
																	},
																},
																Type: "object",
															},
															"selector": {
																Description: "selector is a label query over volumes to consider for binding.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"matchExpressions": {
																		Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "key is the label key that the selector applies to.",
																						Type:        "string",
																					},
																					"operator": {
																						Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																						Type:        "string",
																					},
																					"values": {
																						Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																						Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																						Type:        "array",
																					},
																				},
																				Required: []string{
																					"key",
																					"operator",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"matchLabels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																		Type:        "object",
																	},
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"storageClassName": {
																Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
																Type:        "string",
															},
															"volumeMode": {
																Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
																Type:        "string",
															},
															"volumeName": {
																Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"status": {
														Description: "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"accessModes": {
																Description: "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"allocatedResources": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "object",
															},
															"capacity": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "capacity represents the actual resources of the underlying volume.",
																Type:        "object",
															},
															"conditions": {
																Description: "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "PersistentVolumeClaimCondition contails details about state of pvc",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"lastProbeTime": {
																				Description: "lastProbeTime is the time we probed the condition.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"lastTransitionTime": {
																				Description: "lastTransitionTime is the time the condition transitioned from one status to another.",
																				Format:      "date-time",
																				Type:        "string",
																			},
																			"message": {
																				Description: "message is the human-readable message indicating details about last transition.",
																				Type:        "string",
																			},
																			"reason": {
																				Description: `reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.`,
																				Type:        "string",
																			},
																			"status": {Type: "string"},
																			"type": {
																				Description: "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"status",
																			"type",
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"phase": {
																Description: "phase represents the current phase of PersistentVolumeClaim.",
																Type:        "string",
															},
															"resizeStatus": {
																Description: "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
										},
										Type: "object",
									},
									"templates": {
										Description: "Templates is a list of ConfigMap key references for ConfigMaps in the same namespace as the VMAlertmanager object, which shall be mounted into the VMAlertmanager Pods. The Templates are mounted into /etc/vm/templates/<configmap-name>/<configmap-key>.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "ConfigMapKeyReference refers to a key in a ConfigMap.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The ConfigMap key to refer to.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "array",
									},
									"terminationGracePeriodSeconds": {
										Description: "TerminationGracePeriodSeconds period for container graceful termination",
										Format:      "int64",
										Type:        "integer",
									},
									"tolerations": {
										Description: "Tolerations If specified, the pod's tolerations.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"effect": {
														Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
														Type:        "string",
													},
													"key": {
														Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
														Type:        "string",
													},
													"operator": {
														Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
														Type:        "string",
													},
													"tolerationSeconds": {
														Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
														Format:      "int64",
														Type:        "integer",
													},
													"value": {
														Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"topologySpreadConstraints": {
										Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
												Required: []string{
													"maxSkew",
													"topologyKey",
													"whenUnsatisfiable",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"volumeMounts": {
										Description: "VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition. VolumeMounts specified will be appended to other VolumeMounts in the alertmanager container, that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VolumeMount describes a mounting of a Volume within a container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"mountPath": {
														Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
														Type:        "string",
													},
													"mountPropagation": {
														Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
														Type:        "string",
													},
													"name": {
														Description: "This must match the Name of a Volume.",
														Type:        "string",
													},
													"readOnly": {
														Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
														Type:        "boolean",
													},
													"subPath": {
														Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
														Type:        "string",
													},
													"subPathExpr": {
														Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
														Type:        "string",
													},
												},
												Required: []string{
													"mountPath",
													"name",
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"volumes": {
										Description: "Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
								},
								Type: "object",
							},
							"status": {
								Description: "Most recent observed status of the VMAlertmanager cluster. Operator API itself. More info: https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"availableReplicas": {
										Description: "AvailableReplicas Total number of available pods (ready for at least minReadySeconds) targeted by this VMAlertmanager cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"paused": {
										Description: "Paused Represents whether any actions on the underlaying managed objects are being performed. Only delete actions will be performed.",
										Type:        "boolean",
									},
									"replicas": {
										Description: "ReplicaCount Total number of non-terminated pods targeted by this VMAlertmanager cluster (their labels match the selector).",
										Format:      "int32",
										Type:        "integer",
									},
									"unavailableReplicas": {
										Description: "UnavailableReplicas Total number of unavailable pods targeted by this VMAlertmanager cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"updatedReplicas": {
										Description: "UpdatedReplicas Total number of non-terminated pods targeted by this VMAlertmanager cluster that have the desired version spec.",
										Format:      "int32",
										Type:        "integer",
									},
								},
								Required: []string{
									"availableReplicas",
									"paused",
									"replicas",
									"unavailableReplicas",
									"updatedReplicas",
								},
								Type: "object",
							},
						},
						Required: []string{"spec"},
						Type:     "object",
					},
				},
				Served:  true,
				Storage: true,
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMAlertsCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmalerts.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMAlert",
			ListKind: "VMAlertList",
			Plural:   "vmalerts",
			Singular: "vmalert",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMAlert  executes a list of given alerting or recording rules against configured address.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMAlertSpec defines the desired state of VMAlert",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"-": {
										Description: "ParsingError contents error with context if operator was failed to parse json object from kubernetes api server",
										Type:        "string",
									},
									"affinity": {
										Description:            "Affinity If specified, the pod's scheduling constraints.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"configMaps": {
										Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VMAlert object, which shall be mounted into the VMAlert Pods. The ConfigMaps are mounted into /etc/vm/configs/<configmap-name>.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"containers": {
										Description: "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"datasource": {
										Description: "Datasource Victoria Metrics or VMSelect url. Required parameter. e.g. http://127.0.0.1:8428",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"OAuth2": {
												Description: "OAuth2 defines OAuth2 configuration",
												Required: []string{
													"client_id",
													"token_url",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"basicAuth": {
												Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"password": {
														Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"password_file": {
														Description: "PasswordFile defines path to password file at disk",
														Type:        "string",
													},
													"username": {
														Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"bearerTokenFilePath": {Type: "string"},
											"bearerTokenSecret": {
												Description: "Optional bearer auth token to use for -remoteWrite.url",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"headers": {
												Description: "Headers allow configuring custom http headers Must be in form of semicolon separated header with value e.g. headerName:headerValue vmalert supports it since 1.79.0 version",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"tlsConfig": {
												Description:            "TLSConfig specifies TLSConfig configuration parameters.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"url": {
												Description: "Victoria Metrics or VMSelect url. Required parameter. E.g. http://127.0.0.1:8428",
												Type:        "string",
											},
										},
										Required: []string{"url"},
										Type:     "object",
									},
									"dnsConfig": {
										Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"nameservers": {
												Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"options": {
												Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Required.",
																Type:        "string",
															},
															"value": {Type: "string"},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"searches": {
												Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
										},
										Type: "object",
									},
									"dnsPolicy": {
										Description: "DNSPolicy sets DNS policy for the pod",
										Type:        "string",
									},
									"enforcedNamespaceLabel": {
										Description: "EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert and metric that is user created. The label value will always be the namespace of the object that is being created.",
										Type:        "string",
									},
									"evaluationInterval": {
										Description: "EvaluationInterval how often evalute rules by default",
										Pattern:     "[0-9]+(ms|s|m|h)",
										Type:        "string",
									},
									"externalLabels": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "ExternalLabels in the form 'name: value' to add to all generated recording rules and alerts.",
										Type:        "object",
									},
									"extraArgs": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "ExtraArgs that will be passed to  VMAlert pod for example -remoteWrite.tmpDataPath=/tmp",
										Type:        "object",
									},
									"extraEnvs": {
										Description: "ExtraEnvs that will be added to VMAlert pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "EnvVar represents an environment variable present in a Container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
														Type:        "string",
													},
													"value": {
														Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
														Type:        "string",
													},
												},
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"hostNetwork": {
										Description: "HostNetwork controls whether the pod may use the node network namespace",
										Type:        "boolean",
									},
									"image": {
										Description: "Image - docker image settings for VMAlert if no specified operator uses default config version",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"pullPolicy": {
												Description: "PullPolicy describes how to pull docker image",
												Type:        "string",
											},
											"repository": {
												Description: "Repository contains name of docker image + it's repository if needed",
												Type:        "string",
											},
											"tag": {
												Description: "Tag contains desired docker image version",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"imagePullSecrets": {
										Description: "ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "array",
									},
									"initContainers": {
										Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the VMAlert configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"livenessProbe": {
										Description:            "LivenessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"logFormat": {
										Description: "LogFormat for VMAlert to be configured with. default or json",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"default\"")},
											{Raw: []byte("\"json\"")},
										},
										Type: "string",
									},
									"logLevel": {
										Description: "LogLevel for VMAlert to be configured with.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"INFO\"")},
											{Raw: []byte("\"WARN\"")},
											{Raw: []byte("\"ERROR\"")},
											{Raw: []byte("\"FATAL\"")},
											{Raw: []byte("\"PANIC\"")},
										},
										Type: "string",
									},
									"nodeSelector": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
										Type:        "object",
									},
									"notifier": {
										Description: "Notifier prometheus alertmanager endpoint spec. Required at least one of  notifier or notifiers. e.g. http://127.0.0.1:9093 If specified both notifier and notifiers, notifier will be added as last element to notifiers. only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"OAuth2": {
												Description: "OAuth2 defines OAuth2 configuration",
												Required: []string{
													"client_id",
													"token_url",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"basicAuth": {
												Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"password": {
														Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"password_file": {
														Description: "PasswordFile defines path to password file at disk",
														Type:        "string",
													},
													"username": {
														Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"bearerTokenFilePath": {Type: "string"},
											"bearerTokenSecret": {
												Description: "Optional bearer auth token to use for -remoteWrite.url",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"headers": {
												Description: "Headers allow configuring custom http headers Must be in form of semicolon separated header with value e.g. headerName:headerValue vmalert supports it since 1.79.0 version",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"selector": {
												Description: "Selector allows service discovery for alertmanager in this case all matched vmalertmanager replicas will be added into vmalert notifier.url as statefulset pod.fqdn",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"labelSelector": {
														Description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"matchExpressions": {
																Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "key is the label key that the selector applies to.",
																				Type:        "string",
																			},
																			"operator": {
																				Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																				Type:        "string",
																			},
																			"values": {
																				Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																				Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:        "array",
																			},
																		},
																		Required: []string{
																			"key",
																			"operator",
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"matchLabels": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																Type:        "object",
															},
														},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"namespaceSelector": {
														Description: "NamespaceSelector is a selector for selecting either all namespaces or a list of namespaces.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"any": {
																Description: "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
																Type:        "boolean",
															},
															"matchNames": {
																Description: "List of namespace names.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
											"tlsConfig": {
												Description:            "TLSConfig specifies TLSConfig configuration parameters.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"url": {
												Description: "AlertManager url.  E.g. http://127.0.0.1:9093",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"notifierConfigRef": {
										Description: "NotifierConfigRef reference for secret with notifier configuration for vmalert only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"key": {
												Description: "The key of the secret to select from.  Must be a valid secret key.",
												Type:        "string",
											},
											"name": {
												Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
												Type:        "string",
											},
											"optional": {
												Description: "Specify whether the Secret or its key must be defined",
												Type:        "boolean",
											},
										},
										Required: []string{"key"},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"notifiers": {
										Description: "Notifiers prometheus alertmanager endpoints. Required at least one of  notifier or notifiers. e.g. http://127.0.0.1:9093 If specified both notifier and notifiers, notifier will be added as last element to notifiers. only one of notifier options could be chosen: notifierConfigRef or notifiers +  notifier",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VMAlertNotifierSpec defines the notifier url for sending information about alerts",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"OAuth2": {
														Description: "OAuth2 defines OAuth2 configuration",
														Required: []string{
															"client_id",
															"token_url",
														},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
													"basicAuth": {
														Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"password": {
																Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"password_file": {
																Description: "PasswordFile defines path to password file at disk",
																Type:        "string",
															},
															"username": {
																Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"bearerTokenFilePath": {Type: "string"},
													"bearerTokenSecret": {
														Description: "Optional bearer auth token to use for -remoteWrite.url",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"headers": {
														Description: "Headers allow configuring custom http headers Must be in form of semicolon separated header with value e.g. headerName:headerValue vmalert supports it since 1.79.0 version",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"selector": {
														Description: "Selector allows service discovery for alertmanager in this case all matched vmalertmanager replicas will be added into vmalert notifier.url as statefulset pod.fqdn",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"labelSelector": {
																Description: "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"matchExpressions": {
																		Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "key is the label key that the selector applies to.",
																						Type:        "string",
																					},
																					"operator": {
																						Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																						Type:        "string",
																					},
																					"values": {
																						Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																						Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																						Type:        "array",
																					},
																				},
																				Required: []string{
																					"key",
																					"operator",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"matchLabels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																		Type:        "object",
																	},
																},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"namespaceSelector": {
																Description: "NamespaceSelector is a selector for selecting either all namespaces or a list of namespaces.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"any": {
																		Description: "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
																		Type:        "boolean",
																	},
																	"matchNames": {
																		Description: "List of namespace names.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																},
																Type: "object",
															},
														},
														Type: "object",
													},
													"tlsConfig": {
														Description:            "TLSConfig specifies TLSConfig configuration parameters.",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
													"url": {
														Description: "AlertManager url.  E.g. http://127.0.0.1:9093",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"podDisruptionBudget": {
										Description: "PodDisruptionBudget created by operator",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"maxUnavailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".`,
												XIntOrString: true,
											},
											"minAvailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".`,
												XIntOrString: true,
											},
											"selectorLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "replaces default labels selector generated by operator it's useful when you need to create custom budget",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"podMetadata": {
										Description: "PodMetadata configures Labels and Annotations which are propagated to the VMAlert pods.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"annotations": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
												Type:        "object",
											},
											"labels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
												Type:        "object",
											},
											"name": {
												Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"podSecurityPolicyName": {
										Description: "PodSecurityPolicyName - defines name for podSecurityPolicy in case of empty value, prefixedName will be used.",
										Type:        "string",
									},
									"port": {
										Description: "Port for listen",
										Type:        "string",
									},
									"priorityClassName": {
										Description: "Priority class assigned to the Pods",
										Type:        "string",
									},
									"readinessGates": {
										Description: "ReadinessGates defines pod readiness gates",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PodReadinessGate contains the reference to a pod condition",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"conditionType": {
														Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
														Type:        "string",
													},
												},
												Required: []string{"conditionType"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"readinessProbe": {
										Description:            "ReadinessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"remoteRead": {
										Description: "RemoteRead Optional URL to read vmalert state (persisted via RemoteWrite) This configuration only makes sense if alerts state has been successfully persisted (via RemoteWrite) before. see -remoteRead.url docs in vmalerts for details. E.g. http://127.0.0.1:8428",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"OAuth2": {
												Description: "OAuth2 defines OAuth2 configuration",
												Required: []string{
													"client_id",
													"token_url",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"basicAuth": {
												Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"password": {
														Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"password_file": {
														Description: "PasswordFile defines path to password file at disk",
														Type:        "string",
													},
													"username": {
														Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"bearerTokenFilePath": {Type: "string"},
											"bearerTokenSecret": {
												Description: "Optional bearer auth token to use for -remoteWrite.url",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"headers": {
												Description: "Headers allow configuring custom http headers Must be in form of semicolon separated header with value e.g. headerName:headerValue vmalert supports it since 1.79.0 version",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"lookback": {
												Description: "Lookback defines how far to look into past for alerts timeseries. For example, if lookback=1h then range from now() to now()-1h will be scanned. (default 1h0m0s) Applied only to RemoteReadSpec",
												Type:        "string",
											},
											"tlsConfig": {
												Description:            "TLSConfig specifies TLSConfig configuration parameters.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"url": {
												Description: "URL of the endpoint to send samples to.",
												Type:        "string",
											},
										},
										Required: []string{"url"},
										Type:     "object",
									},
									"remoteWrite": {
										Description: "RemoteWrite Optional URL to remote-write compatible storage to persist vmalert state and rule results to. Rule results will be persisted according to each rule. Alerts state will be persisted in the form of time series named ALERTS and ALERTS_FOR_STATE see -remoteWrite.url docs in vmalerts for details. E.g. http://127.0.0.1:8428",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"OAuth2": {
												Description: "OAuth2 defines OAuth2 configuration",
												Required: []string{
													"client_id",
													"token_url",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"basicAuth": {
												Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"password": {
														Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"password_file": {
														Description: "PasswordFile defines path to password file at disk",
														Type:        "string",
													},
													"username": {
														Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"bearerTokenFilePath": {Type: "string"},
											"bearerTokenSecret": {
												Description: "Optional bearer auth token to use for -remoteWrite.url",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"concurrency": {
												Description: "Defines number of readers that concurrently write into remote storage (default 1)",
												Format:      "int32",
												Type:        "integer",
											},
											"flushInterval": {
												Description: "Defines interval of flushes to remote write endpoint (default 5s)",
												Pattern:     "[0-9]+(ms|s|m|h)",
												Type:        "string",
											},
											"headers": {
												Description: "Headers allow configuring custom http headers Must be in form of semicolon separated header with value e.g. headerName:headerValue vmalert supports it since 1.79.0 version",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"maxBatchSize": {
												Description: "Defines defines max number of timeseries to be flushed at once (default 1000)",
												Format:      "int32",
												Type:        "integer",
											},
											"maxQueueSize": {
												Description: "Defines the max number of pending datapoints to remote write endpoint (default 100000)",
												Format:      "int32",
												Type:        "integer",
											},
											"tlsConfig": {
												Description:            "TLSConfig specifies TLSConfig configuration parameters.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"url": {
												Description: "URL of the endpoint to send samples to.",
												Type:        "string",
											},
										},
										Required: []string{"url"},
										Type:     "object",
									},
									"replicaCount": {
										Description: "ReplicaCount is the expected size of the VMAlert cluster. The controller will eventually make the size of the running cluster equal to the expected size.",
										Format:      "int32",
										Type:        "integer",
									},
									"resources": {
										Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"limits": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
											"requests": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"rollingUpdate": {
										Description: "RollingUpdate - overrides deployment update params.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"maxSurge": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
												XIntOrString: true,
											},
											"maxUnavailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
												XIntOrString: true,
											},
										},
										Type: "object",
									},
									"ruleNamespaceSelector": {
										Description: "RuleNamespaceSelector to be selected for VMRules discovery. Works in combination with Selector. If both nil - behaviour controlled by selectAllByDefault NamespaceSelector nil - only objects at VMAlert namespace.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"rulePath": {
										Description: "RulePath to the file with alert rules. Supports patterns. Flag can be specified multiple times. Examples: -rule /path/to/file. Path to a single file with alerting rules -rule dir/*.yaml -rule /*.yaml. Relative path to all .yaml files in folder, absolute path to all .yaml files in root. by default operator adds /etc/vmalert/configs/base/vmalert.yaml",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"ruleSelector": {
										Description: "RuleSelector selector to select which VMRules to mount for loading alerting rules from. Works in combination with NamespaceSelector. If both nil - behaviour controlled by selectAllByDefault NamespaceSelector nil - only objects at VMAlert namespace.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"runtimeClassName": {
										Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
										Type:        "string",
									},
									"schedulerName": {
										Description: "SchedulerName - defines kubernetes scheduler name",
										Type:        "string",
									},
									"secrets": {
										Description: "Secrets is a list of Secrets in the same namespace as the VMAlert object, which shall be mounted into the VMAlert Pods. The Secrets are mounted into /etc/vm/secrets/<secret-name>.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"securityContext": {
										Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"selectAllByDefault": {
										Description: "SelectAllByDefault changes default behavior for empty CRD selectors, such RuleSelector. with selectAllByDefault: true and empty serviceScrapeSelector and RuleNamespaceSelector Operator selects all exist serviceScrapes with selectAllByDefault: false - selects nothing",
										Type:        "boolean",
									},
									"serviceAccountName": {
										Description: "ServiceAccountName is the name of the ServiceAccount to use to run the VMAlert Pods.",
										Type:        "string",
									},
									"serviceScrapeSpec": {
										Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
										Required:               []string{"endpoints"},
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"serviceSpec": {
										Description: "ServiceSpec that will be added to vmalert service spec",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"metadata": {
												Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"spec": {
												Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Required: []string{"spec"},
										Type:     "object",
									},
									"startupProbe": {
										Description:            "StartupProbe that will be added to CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"terminationGracePeriodSeconds": {
										Description: "TerminationGracePeriodSeconds period for container graceful termination",
										Format:      "int64",
										Type:        "integer",
									},
									"tolerations": {
										Description: "Tolerations If specified, the pod's tolerations.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"effect": {
														Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
														Type:        "string",
													},
													"key": {
														Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
														Type:        "string",
													},
													"operator": {
														Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
														Type:        "string",
													},
													"tolerationSeconds": {
														Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
														Format:      "int64",
														Type:        "integer",
													},
													"value": {
														Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"topologySpreadConstraints": {
										Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
												Required: []string{
													"maxSkew",
													"topologyKey",
													"whenUnsatisfiable",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"updateStrategy": {
										Description: "UpdateStrategy - overrides default update strategy.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"Recreate\"")},
											{Raw: []byte("\"RollingUpdate\"")},
										},
										Type: "string",
									},
									"volumeMounts": {
										Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the VMAlert container, that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VolumeMount describes a mounting of a Volume within a container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"mountPath": {
														Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
														Type:        "string",
													},
													"mountPropagation": {
														Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
														Type:        "string",
													},
													"name": {
														Description: "This must match the Name of a Volume.",
														Type:        "string",
													},
													"readOnly": {
														Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
														Type:        "boolean",
													},
													"subPath": {
														Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
														Type:        "string",
													},
													"subPathExpr": {
														Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
														Type:        "string",
													},
												},
												Required: []string{
													"mountPath",
													"name",
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"volumes": {
										Description: "Volumes allows configuration of additional volumes on the output Deployment definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
								},
								Required: []string{"datasource"},
								Type:     "object",
							},
							"status": {
								Description: "VmAlertStatus defines the observed state of VmAlert",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"availableReplicas": {
										Description: "AvailableReplicas Total number of available pods (ready for at least minReadySeconds) targeted by this VMAlert cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"replicas": {
										Description: "ReplicaCount Total number of non-terminated pods targeted by this VMAlert cluster (their labels match the selector).",
										Format:      "int32",
										Type:        "integer",
									},
									"unavailableReplicas": {
										Description: "UnavailableReplicas Total number of unavailable pods targeted by this VMAlert cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"updatedReplicas": {
										Description: "UpdatedReplicas Total number of non-terminated pods targeted by this VMAlert cluster that have the desired version spec.",
										Format:      "int32",
										Type:        "integer",
									},
								},
								Required: []string{
									"availableReplicas",
									"replicas",
									"unavailableReplicas",
									"updatedReplicas",
								},
								Type: "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMAuthsCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmauths.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMAuth",
			ListKind: "VMAuthList",
			Plural:   "vmauths",
			Singular: "vmauth",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMAuth is the Schema for the vmauths API",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMAuthSpec defines the desired state of VMAuth",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"-": {
										Description: "ParsingError contents error with context if operator was failed to parse json object from kubernetes api server",
										Type:        "string",
									},
									"affinity": {
										Description:            "Affinity If specified, the pod's scheduling constraints.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"configMaps": {
										Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VMAuth object, which shall be mounted into the VMAuth Pods.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"containers": {
										Description: "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"dnsConfig": {
										Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"nameservers": {
												Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"options": {
												Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Required.",
																Type:        "string",
															},
															"value": {Type: "string"},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"searches": {
												Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
										},
										Type: "object",
									},
									"dnsPolicy": {
										Description: "DNSPolicy sets DNS policy for the pod",
										Type:        "string",
									},
									"extraArgs": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "ExtraArgs that will be passed to  VMAuth pod for example remoteWrite.tmpDataPath: /tmp",
										Type:        "object",
									},
									"extraEnvs": {
										Description: "ExtraEnvs that will be added to VMAuth pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "EnvVar represents an environment variable present in a Container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
														Type:        "string",
													},
													"value": {
														Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
														Type:        "string",
													},
												},
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"hostAliases": {
										Description: "HostAliases provides mapping for ip and hostname, that would be propagated to pod, cannot be used with HostNetwork.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"hostnames": {
														Description: "Hostnames for the above IP address.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"ip": {
														Description: "IP address of the host file entry.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"hostNetwork": {
										Description: "HostNetwork controls whether the pod may use the node network namespace",
										Type:        "boolean",
									},
									"image": {
										Description: "Image - docker image settings for VMAuth if no specified operator uses default config version",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"pullPolicy": {
												Description: "PullPolicy describes how to pull docker image",
												Type:        "string",
											},
											"repository": {
												Description: "Repository contains name of docker image + it's repository if needed",
												Type:        "string",
											},
											"tag": {
												Description: "Tag contains desired docker image version",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"imagePullSecrets": {
										Description: "ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "array",
									},
									"ingress": {
										Description: "Ingress enables ingress configuration for VMAuth.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"annotations": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
												Type:        "object",
											},
											"class_name": {
												Description: "ClassName defines ingress class name for VMAuth",
												Type:        "string",
											},
											"extraRules": {
												Description: "ExtraRules - additional rules for ingress, must be checked for correctness by user.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "IngressRule represents the rules mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a host match, then routed to the backend associated with the matching IngressRuleValue.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"host": {
																Description: "Host is the fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986: 1. IPs are not allowed. Currently an IngressRuleValue can only apply to the IP in the Spec of the parent Ingress. 2. The `:` delimiter is not respected because ports are not allowed. Currently the port of an Ingress is implicitly :80 for http and :443 for https. Both these may change in the future. Incoming requests are matched against the host before the IngressRuleValue. If the host is unspecified, the Ingress routes all traffic based on the specified IngressRuleValue. \n Host can be \"precise\" which is a domain name without the terminating dot of a network host (e.g. \"foo.bar.com\") or \"wildcard\", which is a domain name prefixed with a single wildcard label (e.g. \"*.foo.com\"). The wildcard character '*' must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. Host == \"*\"). Requests will be matched against the Host field in the following way: 1. If Host is precise, the request matches this rule if the http host header is equal to Host. 2. If Host is a wildcard, then the request matches this rule if the http host header is to equal to the suffix (removing the first label) of the wildcard rule.",
																Type:        "string",
															},
															"http": {
																Description: "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"paths": {
																		Description: "A collection of paths that map requests to backends.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "HTTPIngressPath associates a path with a backend. Incoming urls matching the path are forwarded to the backend.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"backend": {
																						Description: "Backend defines the referenced service endpoint to which the traffic will be forwarded to.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"resource": {
																								Description: `Resource is an ObjectRef to another Kubernetes resource in the namespace of the Ingress object. If resource is specified, a service.Name and service.Port must not be specified. This is a mutually exclusive setting with "Service".`,
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"apiGroup": {
																										Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																										Type:        "string",
																									},
																									"kind": {
																										Description: "Kind is the type of resource being referenced",
																										Type:        "string",
																									},
																									"name": {
																										Description: "Name is the name of resource being referenced",
																										Type:        "string",
																									},
																								},
																								Required: []string{
																									"kind",
																									"name",
																								},
																								Type:     "object",
																								XMapType: vmop.P("atomic"),
																							},
																							"service": {
																								Description: `Service references a Service as a Backend. This is a mutually exclusive setting with "Resource".`,
																								Properties: map[string]apiextensionsv1.JSONSchemaProps{
																									"name": {
																										Description: "Name is the referenced service. The service must exist in the same namespace as the Ingress object.",
																										Type:        "string",
																									},
																									"port": {
																										Description: "Port of the referenced service. A port name or port number is required for a IngressServiceBackend.",
																										Properties: map[string]apiextensionsv1.JSONSchemaProps{
																											"name": {
																												Description: `Name is the name of the port on the Service. This is a mutually exclusive setting with "Number".`,
																												Type:        "string",
																											},
																											"number": {
																												Description: `Number is the numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with "Name".`,
																												Format:      "int32",
																												Type:        "integer",
																											},
																										},
																										Type: "object",
																									},
																								},
																								Required: []string{"name"},
																								Type:     "object",
																							},
																						},
																						Type: "object",
																					},
																					"path": {
																						Description: `Path is matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional "path" part of a URL as defined by RFC 3986. Paths must begin with a '/' and must be present when using PathType with value "Exact" or "Prefix".`,
																						Type:        "string",
																					},
																					"pathType": {
																						Description: "PathType determines the interpretation of the Path matching. PathType can be one of the following values: * Exact: Matches the URL path exactly. * Prefix: Matches based on a URL path prefix split by '/'. Matching is done on a path element by element basis. A path element refers is the list of labels in the path split by the '/' separator. A request is a match for path p if every p is an element-wise prefix of p of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. /foo/bar matches /foo/bar/baz, but does not match /foo/barbaz). * ImplementationSpecific: Interpretation of the Path matching is up to the IngressClass. Implementations can treat this as a separate PathType or treat it identically to Prefix or Exact path types. Implementations are required to support all path types.",
																						Type:        "string",
																					},
																				},
																				Required: []string{
																					"backend",
																					"pathType",
																				},
																				Type: "object",
																			},
																		},
																		Type:      "array",
																		XListType: vmop.P("atomic"),
																	},
																},
																Required: []string{"paths"},
																Type:     "object",
															},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"extraTls": {
												Description: "ExtraTLS - additional TLS configuration for ingress must be checked for correctness by user.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "IngressTLS describes the transport layer security associated with an Ingress.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"hosts": {
																Description: "Hosts are a list of hosts included in the TLS certificate. The values in this list must match the name/s used in the tlsSecret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress, if left unspecified.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
																XListType:   vmop.P("atomic"),
															},
															"secretName": {
																Description: `SecretName is the name of the secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the "Host" header field used by an IngressRule, the SNI host is used for termination and value of the Host header is used for routing.`,
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"host": {
												Description: "Host defines ingress host parameter for default rule It will be used, only if TlsHosts is empty",
												Type:        "string",
											},
											"labels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
												Type:        "object",
											},
											"name": {
												Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
												Type:        "string",
											},
											"tlsHosts": {
												Description: "TlsHosts configures TLS access for ingress, tlsSecretName must be defined for it.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"tlsSecretName": {
												Description: "TlsSecretName defines secretname at the VMAuth namespace with cert and key https://kubernetes.io/docs/concepts/services-networking/ingress/#tls",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"initContainers": {
										Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the vmSingle configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"livenessProbe": {
										Description:            "LivenessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"logFormat": {
										Description: "LogFormat for VMAuth to be configured with.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"default\"")},
											{Raw: []byte("\"json\"")},
										},
										Type: "string",
									},
									"logLevel": {
										Description: "LogLevel for victoria metrics single to be configured with.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"INFO\"")},
											{Raw: []byte("\"WARN\"")},
											{Raw: []byte("\"ERROR\"")},
											{Raw: []byte("\"FATAL\"")},
											{Raw: []byte("\"PANIC\"")},
										},
										Type: "string",
									},
									"nodeSelector": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
										Type:        "object",
									},
									"podDisruptionBudget": {
										Description: "PodDisruptionBudget created by operator",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"maxUnavailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".`,
												XIntOrString: true,
											},
											"minAvailable": {
												AnyOf: []apiextensionsv1.JSONSchemaProps{
													{Type: "integer"},
													{Type: "string"},
												},
												Description:  `An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".`,
												XIntOrString: true,
											},
											"selectorLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "replaces default labels selector generated by operator it's useful when you need to create custom budget",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"podMetadata": {
										Description: "PodMetadata configures Labels and Annotations which are propagated to the VMAuth pods.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"annotations": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
												Type:        "object",
											},
											"labels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
												Type:        "object",
											},
											"name": {
												Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"podSecurityPolicyName": {
										Description: "PodSecurityPolicyName - defines name for podSecurityPolicy in case of empty value, prefixedName will be used.",
										Type:        "string",
									},
									"port": {
										Description: "Port listen port",
										Type:        "string",
									},
									"priorityClassName": {
										Description: "PriorityClassName assigned to the Pods",
										Type:        "string",
									},
									"readinessGates": {
										Description: "ReadinessGates defines pod readiness gates",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PodReadinessGate contains the reference to a pod condition",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"conditionType": {
														Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
														Type:        "string",
													},
												},
												Required: []string{"conditionType"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"readinessProbe": {
										Description:            "ReadinessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"replicaCount": {
										Description: "ReplicaCount is the expected size of the VMAuth",
										Format:      "int32",
										Type:        "integer",
									},
									"resources": {
										Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"limits": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
											"requests": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"runtimeClassName": {
										Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
										Type:        "string",
									},
									"schedulerName": {
										Description: "SchedulerName - defines kubernetes scheduler name",
										Type:        "string",
									},
									"secrets": {
										Description: "Secrets is a list of Secrets in the same namespace as the VMAuth object, which shall be mounted into the VMAuth Pods.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"securityContext": {
										Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"selectAllByDefault": {
										Description: "SelectAllByDefault changes default behavior for empty CRD selectors, such userSelector. with selectAllByDefault: true and empty userSelector and userNamespaceSelector Operator selects all exist users with selectAllByDefault: false - selects nothing",
										Type:        "boolean",
									},
									"serviceAccountName": {
										Description: "ServiceAccountName is the name of the ServiceAccount to use to run the VMAuth Pods.",
										Type:        "string",
									},
									"serviceScrapeSpec": {
										Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
										Required:               []string{"endpoints"},
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"serviceSpec": {
										Description: "ServiceSpec that will be added to vmsingle service spec",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"metadata": {
												Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"spec": {
												Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Required: []string{"spec"},
										Type:     "object",
									},
									"startupProbe": {
										Description:            "StartupProbe that will be added to CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"terminationGracePeriodSeconds": {
										Description: "TerminationGracePeriodSeconds period for container graceful termination",
										Format:      "int64",
										Type:        "integer",
									},
									"tolerations": {
										Description: "Tolerations If specified, the pod's tolerations.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"effect": {
														Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
														Type:        "string",
													},
													"key": {
														Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
														Type:        "string",
													},
													"operator": {
														Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
														Type:        "string",
													},
													"tolerationSeconds": {
														Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
														Format:      "int64",
														Type:        "integer",
													},
													"value": {
														Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"topologySpreadConstraints": {
										Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
												Required: []string{
													"maxSkew",
													"topologyKey",
													"whenUnsatisfiable",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"unauthorizedAccessConfig": {
										Description: "UnauthorizedAccessConfig configures access for un authorized users",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VMAuthUnauthorizedPath defines url_map for unauthorized access",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"ip_filters": {
														Description: "IPFilters defines filter for src ip address enterprise only",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"allow_list": {
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
															"deny_list": {
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
														},
														Type: "object",
													},
													"src_paths": {
														Description: "Paths src request paths",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"url_prefix": {
														Description: "URLs defines url_prefix for dst routing",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"userNamespaceSelector": {
										Description: "UserNamespaceSelector Namespaces to be selected for  VMAuth discovery. Works in combination with Selector. NamespaceSelector nil - only objects at VMAuth namespace. Selector nil - only objects at NamespaceSelector namespaces. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"userSelector": {
										Description: "UserSelector defines VMUser to be selected for config file generation. Works in combination with NamespaceSelector. NamespaceSelector nil - only objects at VMAuth namespace. If both nil - behaviour controlled by selectAllByDefault",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"volumeMounts": {
										Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the VMAuth container, that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VolumeMount describes a mounting of a Volume within a container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"mountPath": {
														Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
														Type:        "string",
													},
													"mountPropagation": {
														Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
														Type:        "string",
													},
													"name": {
														Description: "This must match the Name of a Volume.",
														Type:        "string",
													},
													"readOnly": {
														Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
														Type:        "boolean",
													},
													"subPath": {
														Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
														Type:        "string",
													},
													"subPathExpr": {
														Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
														Type:        "string",
													},
												},
												Required: []string{
													"mountPath",
													"name",
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"volumes": {
										Description: "Volumes allows configuration of additional volumes on the output deploy definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
								},
								Type: "object",
							},
							"status": {
								Description: "VMAuthStatus defines the observed state of VMAuth",
								Type:        "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMClustersCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmclusters.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMCluster",
			ListKind: "VMClusterList",
			Plural:   "vmclusters",
			Singular: "vmcluster",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				AdditionalPrinterColumns: []apiextensionsv1.CustomResourceColumnDefinition{
					{
						Description: "replicas of VMInsert",
						JSONPath:    ".spec.vminsert.replicaCount",
						Name:        "Insert Count",
						Type:        "string",
					}, {
						Description: "replicas of VMStorage",
						JSONPath:    ".spec.vmstorage.replicaCount",
						Name:        "Storage Count",
						Type:        "string",
					}, {
						Description: "replicas of VMSelect",
						JSONPath:    ".spec.vmselect.replicaCount",
						Name:        "Select Count",
						Type:        "string",
					}, {
						JSONPath: ".metadata.creationTimestamp",
						Name:     "Age",
						Type:     "date",
					}, {
						Description: "Current status of cluster",
						JSONPath:    ".status.clusterStatus",
						Name:        "Status",
						Type:        "string",
					},
				},
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMCluster is fast, cost-effective and scalable time-series database. Cluster version with",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMClusterSpec defines the desired state of VMCluster",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"-": {
										Description: "ParsingError contents error with context if operator was failed to parse json object from kubernetes api server",
										Type:        "string",
									},
									"clusterVersion": {
										Description: "ClusterVersion defines default images tag for all components. it can be overwritten with component specific image.tag value.",
										Type:        "string",
									},
									"imagePullSecrets": {
										Description: "ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "array",
									},
									"podSecurityPolicyName": {
										Description: "PodSecurityPolicyName - defines name for podSecurityPolicy in case of empty value, prefixedName will be used.",
										Type:        "string",
									},
									"replicationFactor": {
										Description: "ReplicationFactor defines how many copies of data make among distinct storage nodes",
										Format:      "int32",
										Type:        "integer",
									},
									"retentionPeriod": {
										Description: "RetentionPeriod for the stored metrics Note VictoriaMetrics has data/ and indexdb/ folders metrics from data/ removed eventually as soon as partition leaves retention period reverse index data at indexdb rotates once at the half of configured retention period https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#retention",
										Type:        "string",
									},
									"serviceAccountName": {
										Description: "ServiceAccountName is the name of the ServiceAccount to use to run the VMSelect, VMStorage and VMInsert Pods.",
										Type:        "string",
									},
									"vminsert": {
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"affinity": {
												Description:            "Affinity If specified, the pod's scheduling constraints.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"clusterNativeListenPort": {
												Description: "ClusterNativePort for multi-level cluster setup. More details: https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#multi-level-cluster-setup",
												Type:        "string",
											},
											"configMaps": {
												Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VMSelect object, which shall be mounted into the VMSelect Pods. The ConfigMaps are mounted into /etc/vm/configs/<configmap-name>.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"containers": {
												Description: "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "A single application container that you want to run within a pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"dnsConfig": {
												Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"nameservers": {
														Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"options": {
														Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"name": {
																		Description: "Required.",
																		Type:        "string",
																	},
																	"value": {Type: "string"},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"searches": {
														Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
												},
												Type: "object",
											},
											"dnsPolicy": {
												Description: "DNSPolicy sets DNS policy for the pod",
												Type:        "string",
											},
											"extraArgs": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Type: "object",
											},
											"extraEnvs": {
												Description: "ExtraEnvs that will be added to VMSelect pod",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "EnvVar represents an environment variable present in a Container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
																Type:        "string",
															},
															"value": {
																Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
																Type:        "string",
															},
														},
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"hostNetwork": {
												Description: "HostNetwork controls whether the pod may use the node network namespace",
												Type:        "boolean",
											},
											"hpa": {
												Description:            "HPA defines kubernetes PodAutoScaling configuration version 2.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"image": {
												Description: "Image - docker image settings for VMInsert",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"pullPolicy": {
														Description: "PullPolicy describes how to pull docker image",
														Type:        "string",
													},
													"repository": {
														Description: "Repository contains name of docker image + it's repository if needed",
														Type:        "string",
													},
													"tag": {
														Description: "Tag contains desired docker image version",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"initContainers": {
												Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the VMSelect configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "A single application container that you want to run within a pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"insertPorts": {
												Description: "InsertPorts - additional listen ports for data ingestion.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"graphitePort": {
														Description: "GraphitePort listen port",
														Type:        "string",
													},
													"influxPort": {
														Description: "InfluxPort listen port",
														Type:        "string",
													},
													"openTSDBHTTPPort": {
														Description: "OpenTSDBHTTPPort for http connections.",
														Type:        "string",
													},
													"openTSDBPort": {
														Description: "OpenTSDBPort for tcp and udp listen",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"livenessProbe": {
												Description:            "LivenessProbe that will be added CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"logFormat": {
												Description: "LogFormat for VMSelect to be configured with. default or json",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"default\"")},
													{Raw: []byte("\"json\"")},
												},
												Type: "string",
											},
											"logLevel": {
												Description: "LogLevel for VMSelect to be configured with.",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"INFO\"")},
													{Raw: []byte("\"WARN\"")},
													{Raw: []byte("\"ERROR\"")},
													{Raw: []byte("\"FATAL\"")},
													{Raw: []byte("\"PANIC\"")},
												},
												Type: "string",
											},
											"name": {
												Description: "Name is deprecated and will be removed at 0.22.0 release",
												Type:        "string",
											},
											"nodeSelector": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
												Type:        "object",
											},
											"podDisruptionBudget": {
												Description: "PodDisruptionBudget created by operator",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"maxUnavailable": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  `An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".`,
														XIntOrString: true,
													},
													"minAvailable": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  `An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".`,
														XIntOrString: true,
													},
													"selectorLabels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "replaces default labels selector generated by operator it's useful when you need to create custom budget",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"podMetadata": {
												Description: "PodMetadata configures Labels and Annotations which are propagated to the VMSelect pods.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"port": {
												Description: "Port listen port",
												Type:        "string",
											},
											"priorityClassName": {
												Description: "Priority class assigned to the Pods",
												Type:        "string",
											},
											"readinessGates": {
												Description: "ReadinessGates defines pod readiness gates",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodReadinessGate contains the reference to a pod condition",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"conditionType": {
																Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
																Type:        "string",
															},
														},
														Required: []string{"conditionType"},
														Type:     "object",
													},
												},
												Type: "array",
											},
											"readinessProbe": {
												Description:            "ReadinessProbe that will be added CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"replicaCount": {
												Description: "ReplicaCount is the expected size of the VMInsert cluster. The controller will eventually make the size of the running cluster equal to the expected size.",
												Format:      "int32",
												Type:        "integer",
											},
											"resources": {
												Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"limits": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
													"requests": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"rollingUpdate": {
												Description: "RollingUpdate - overrides deployment update params.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"maxSurge": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if MaxUnavailable is 0. Absolute number is calculated from percentage by rounding up. Defaults to 25%. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods.",
														XIntOrString: true,
													},
													"maxUnavailable": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if MaxSurge is 0. Defaults to 25%. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods.",
														XIntOrString: true,
													},
												},
												Type: "object",
											},
											"runtimeClassName": {
												Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
												Type:        "string",
											},
											"schedulerName": {
												Description: "SchedulerName - defines kubernetes scheduler name",
												Type:        "string",
											},
											"secrets": {
												Description: "Secrets is a list of Secrets in the same namespace as the VMSelect object, which shall be mounted into the VMSelect Pods. The Secrets are mounted into /etc/vm/secrets/<secret-name>.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"securityContext": {
												Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"serviceScrapeSpec": {
												Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
												Required:               []string{"endpoints"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"serviceSpec": {
												Description: "ServiceSpec that will be added to vminsert service spec",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"metadata": {
														Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"annotations": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
																Type:        "object",
															},
															"labels": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
																Type:        "object",
															},
															"name": {
																Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"spec": {
														Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Required: []string{"spec"},
												Type:     "object",
											},
											"startupProbe": {
												Description:            "StartupProbe that will be added to CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"terminationGracePeriodSeconds": {
												Description: "TerminationGracePeriodSeconds period for container graceful termination",
												Format:      "int64",
												Type:        "integer",
											},
											"tolerations": {
												Description: "Tolerations If specified, the pod's tolerations.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"effect": {
																Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
																Type:        "string",
															},
															"key": {
																Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
																Type:        "string",
															},
															"operator": {
																Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
																Type:        "string",
															},
															"tolerationSeconds": {
																Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
																Format:      "int64",
																Type:        "integer",
															},
															"value": {
																Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"topologySpreadConstraints": {
												Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
														Required: []string{
															"maxSkew",
															"topologyKey",
															"whenUnsatisfiable",
														},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"updateStrategy": {
												Description: "UpdateStrategy - overrides default update strategy.",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"Recreate\"")},
													{Raw: []byte("\"RollingUpdate\"")},
												},
												Type: "string",
											},
											"volumeMounts": {
												Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the VMSelect container, that are generated as a result of StorageSpec objects.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "VolumeMount describes a mounting of a Volume within a container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"mountPath": {
																Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
																Type:        "string",
															},
															"mountPropagation": {
																Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
																Type:        "string",
															},
															"name": {
																Description: "This must match the Name of a Volume.",
																Type:        "string",
															},
															"readOnly": {
																Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
																Type:        "boolean",
															},
															"subPath": {
																Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
																Type:        "string",
															},
															"subPathExpr": {
																Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
																Type:        "string",
															},
														},
														Required: []string{
															"mountPath",
															"name",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"volumes": {
												Description: "Volumes allows configuration of additional volumes on the output Deployment definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
										},
										Required: []string{"replicaCount"},
										Type:     "object",
									},
									"vmselect": {
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"affinity": {
												Description:            "Affinity If specified, the pod's scheduling constraints.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"cacheMountPath": {
												Description: "CacheMountPath allows to add cache persistent for VMSelect",
												Type:        "string",
											},
											"claimTemplates": {
												Description: "ClaimTemplates allows adding additional VolumeClaimTemplates for StatefulSet",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"apiVersion": {
																Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
																Type:        "string",
															},
															"kind": {
																Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
																Type:        "string",
															},
															"metadata": {
																Description:            "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
																Type:                   "object",
																XPreserveUnknownFields: vmop.P(true),
															},
															"spec": {
																Description: "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"accessModes": {
																		Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"dataSource": {
																		Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"apiGroup": {
																				Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																				Type:        "string",
																			},
																			"kind": {
																				Description: "Kind is the type of resource being referenced",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name is the name of resource being referenced",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"kind",
																			"name",
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"dataSourceRef": {
																		Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"apiGroup": {
																				Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																				Type:        "string",
																			},
																			"kind": {
																				Description: "Kind is the type of resource being referenced",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name is the name of resource being referenced",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"kind",
																			"name",
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"resources": {
																		Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"limits": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						AnyOf: []apiextensionsv1.JSONSchemaProps{
																							{Type: "integer"},
																							{Type: "string"},
																						},
																						Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																						XIntOrString: true,
																					},
																				},
																				Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																				Type:        "object",
																			},
																			"requests": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						AnyOf: []apiextensionsv1.JSONSchemaProps{
																							{Type: "integer"},
																							{Type: "string"},
																						},
																						Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																						XIntOrString: true,
																					},
																				},
																				Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																				Type:        "object",
																			},
																		},
																		Type: "object",
																	},
																	"selector": {
																		Description: "selector is a label query over volumes to consider for binding.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"matchExpressions": {
																				Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "key is the label key that the selector applies to.",
																								Type:        "string",
																							},
																							"operator": {
																								Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																								Type:        "string",
																							},
																							"values": {
																								Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																								Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																								Type:        "array",
																							},
																						},
																						Required: []string{
																							"key",
																							"operator",
																						},
																						Type: "object",
																					},
																				},
																				Type: "array",
																			},
																			"matchLabels": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																				},
																				Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																				Type:        "object",
																			},
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"storageClassName": {
																		Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
																		Type:        "string",
																	},
																	"volumeMode": {
																		Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
																		Type:        "string",
																	},
																	"volumeName": {
																		Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
															"status": {
																Description: "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"accessModes": {
																		Description: "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"allocatedResources": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																		Type:        "object",
																	},
																	"capacity": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "capacity represents the actual resources of the underlying volume.",
																		Type:        "object",
																	},
																	"conditions": {
																		Description: "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "PersistentVolumeClaimCondition contails details about state of pvc",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"lastProbeTime": {
																						Description: "lastProbeTime is the time we probed the condition.",
																						Format:      "date-time",
																						Type:        "string",
																					},
																					"lastTransitionTime": {
																						Description: "lastTransitionTime is the time the condition transitioned from one status to another.",
																						Format:      "date-time",
																						Type:        "string",
																					},
																					"message": {
																						Description: "message is the human-readable message indicating details about last transition.",
																						Type:        "string",
																					},
																					"reason": {
																						Description: `reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.`,
																						Type:        "string",
																					},
																					"status": {Type: "string"},
																					"type": {
																						Description: "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
																						Type:        "string",
																					},
																				},
																				Required: []string{
																					"status",
																					"type",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"phase": {
																		Description: "phase represents the current phase of PersistentVolumeClaim.",
																		Type:        "string",
																	},
																	"resizeStatus": {
																		Description: "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"clusterNativeListenPort": {
												Description: "ClusterNativePort for multi-level cluster setup. More details: https://docs.victoriametrics.com/Cluster-VictoriaMetrics.html#multi-level-cluster-setup",
												Type:        "string",
											},
											"configMaps": {
												Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VMSelect object, which shall be mounted into the VMSelect Pods. The ConfigMaps are mounted into /etc/vm/configs/<configmap-name>.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"containers": {
												Description: "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "A single application container that you want to run within a pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"dnsConfig": {
												Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"nameservers": {
														Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"options": {
														Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"name": {
																		Description: "Required.",
																		Type:        "string",
																	},
																	"value": {Type: "string"},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"searches": {
														Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
												},
												Type: "object",
											},
											"dnsPolicy": {
												Description: "DNSPolicy sets DNS policy for the pod",
												Type:        "string",
											},
											"extraArgs": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Type: "object",
											},
											"extraEnvs": {
												Description: "ExtraEnvs that will be added to VMSelect pod",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "EnvVar represents an environment variable present in a Container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
																Type:        "string",
															},
															"value": {
																Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
																Type:        "string",
															},
														},
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"hostNetwork": {
												Description: "HostNetwork controls whether the pod may use the node network namespace",
												Type:        "boolean",
											},
											"hpa": {
												Description:            "Configures horizontal pod autoscaling. Note, enabling this option disables vmselect to vmselect communication. In most cases it's not an issue.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"image": {
												Description: "Image - docker image settings for VMSelect",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"pullPolicy": {
														Description: "PullPolicy describes how to pull docker image",
														Type:        "string",
													},
													"repository": {
														Description: "Repository contains name of docker image + it's repository if needed",
														Type:        "string",
													},
													"tag": {
														Description: "Tag contains desired docker image version",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"initContainers": {
												Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the VMSelect configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "A single application container that you want to run within a pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"livenessProbe": {
												Description:            "LivenessProbe that will be added CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"logFormat": {
												Description: "LogFormat for VMSelect to be configured with. default or json",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"default\"")},
													{Raw: []byte("\"json\"")},
												},
												Type: "string",
											},
											"logLevel": {
												Description: "LogLevel for VMSelect to be configured with.",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"INFO\"")},
													{Raw: []byte("\"WARN\"")},
													{Raw: []byte("\"ERROR\"")},
													{Raw: []byte("\"FATAL\"")},
													{Raw: []byte("\"PANIC\"")},
												},
												Type: "string",
											},
											"name": {
												Description: "Name is deprecated and will be removed at 0.22.0 release",
												Type:        "string",
											},
											"nodeSelector": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
												Type:        "object",
											},
											"persistentVolume": {
												Description: "Storage - add persistent volume for cacheMounthPath its useful for persistent cache use storage instead of persistentVolume.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"disableMountSubPath": {
														Description: "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
														Type:        "boolean",
													},
													"emptyDir": {
														Description: "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"medium": {
																Description: `medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir`,
																Type:        "string",
															},
															"sizeLimit": {
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Description:  "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Type: "object",
													},
													"volumeClaimTemplate": {
														Description:            "A PVC spec to be used by the VMAlertManager StatefulSets.",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "object",
											},
											"podDisruptionBudget": {
												Description: "PodDisruptionBudget created by operator",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"maxUnavailable": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  `An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".`,
														XIntOrString: true,
													},
													"minAvailable": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  `An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".`,
														XIntOrString: true,
													},
													"selectorLabels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "replaces default labels selector generated by operator it's useful when you need to create custom budget",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"podMetadata": {
												Description: "PodMetadata configures Labels and Annotations which are propagated to the VMSelect pods.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"port": {
												Description: "Port listen port",
												Type:        "string",
											},
											"priorityClassName": {
												Description: "Priority class assigned to the Pods",
												Type:        "string",
											},
											"readinessGates": {
												Description: "ReadinessGates defines pod readiness gates",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodReadinessGate contains the reference to a pod condition",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"conditionType": {
																Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
																Type:        "string",
															},
														},
														Required: []string{"conditionType"},
														Type:     "object",
													},
												},
												Type: "array",
											},
											"readinessProbe": {
												Description:            "ReadinessProbe that will be added CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"replicaCount": {
												Description: "ReplicaCount is the expected size of the VMSelect cluster. The controller will eventually make the size of the running cluster equal to the expected size.",
												Format:      "int32",
												Type:        "integer",
											},
											"resources": {
												Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"limits": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
													"requests": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"rollingUpdateStrategy": {
												Description: "RollingUpdateStrategy defines strategy for application updates Default is OnDelete, in this case operator handles update process Can be changed for RollingUpdate",
												Type:        "string",
											},
											"runtimeClassName": {
												Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
												Type:        "string",
											},
											"schedulerName": {
												Description: "SchedulerName - defines kubernetes scheduler name",
												Type:        "string",
											},
											"secrets": {
												Description: "Secrets is a list of Secrets in the same namespace as the VMSelect object, which shall be mounted into the VMSelect Pods. The Secrets are mounted into /etc/vm/secrets/<secret-name>.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"securityContext": {
												Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"serviceScrapeSpec": {
												Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
												Required:               []string{"endpoints"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"serviceSpec": {
												Description: "ServiceSpec that will be added to vmselect service spec",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"metadata": {
														Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"annotations": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
																Type:        "object",
															},
															"labels": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
																Type:        "object",
															},
															"name": {
																Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"spec": {
														Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Required: []string{"spec"},
												Type:     "object",
											},
											"startupProbe": {
												Description:            "StartupProbe that will be added to CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"storage": {
												Description: "StorageSpec - add persistent volume claim for cacheMounthPath its needed for persistent cache",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"disableMountSubPath": {
														Description: "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
														Type:        "boolean",
													},
													"emptyDir": {
														Description: "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"medium": {
																Description: `medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir`,
																Type:        "string",
															},
															"sizeLimit": {
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Description:  "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Type: "object",
													},
													"volumeClaimTemplate": {
														Description: "A PVC spec to be used by the VMAlertManager StatefulSets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"apiVersion": {
																Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
																Type:        "string",
															},
															"kind": {
																Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
																Type:        "string",
															},
															"metadata": {
																Description: "EmbeddedMetadata contains metadata relevant to an EmbeddedResource.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"annotations": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
																		Type:        "object",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
																		Type:        "object",
																	},
																	"name": {
																		Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
															"spec": {
																Description: "Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"accessModes": {
																		Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"dataSource": {
																		Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"apiGroup": {
																				Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																				Type:        "string",
																			},
																			"kind": {
																				Description: "Kind is the type of resource being referenced",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name is the name of resource being referenced",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"kind",
																			"name",
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"dataSourceRef": {
																		Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"apiGroup": {
																				Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																				Type:        "string",
																			},
																			"kind": {
																				Description: "Kind is the type of resource being referenced",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name is the name of resource being referenced",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"kind",
																			"name",
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"resources": {
																		Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"limits": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						AnyOf: []apiextensionsv1.JSONSchemaProps{
																							{Type: "integer"},
																							{Type: "string"},
																						},
																						Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																						XIntOrString: true,
																					},
																				},
																				Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																				Type:        "object",
																			},
																			"requests": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						AnyOf: []apiextensionsv1.JSONSchemaProps{
																							{Type: "integer"},
																							{Type: "string"},
																						},
																						Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																						XIntOrString: true,
																					},
																				},
																				Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																				Type:        "object",
																			},
																		},
																		Type: "object",
																	},
																	"selector": {
																		Description: "selector is a label query over volumes to consider for binding.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"matchExpressions": {
																				Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "key is the label key that the selector applies to.",
																								Type:        "string",
																							},
																							"operator": {
																								Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																								Type:        "string",
																							},
																							"values": {
																								Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																								Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																								Type:        "array",
																							},
																						},
																						Required: []string{
																							"key",
																							"operator",
																						},
																						Type: "object",
																					},
																				},
																				Type: "array",
																			},
																			"matchLabels": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																				},
																				Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																				Type:        "object",
																			},
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"storageClassName": {
																		Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
																		Type:        "string",
																	},
																	"volumeMode": {
																		Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
																		Type:        "string",
																	},
																	"volumeName": {
																		Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
															"status": {
																Description: "Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"accessModes": {
																		Description: "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"allocatedResources": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																		Type:        "object",
																	},
																	"capacity": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "capacity represents the actual resources of the underlying volume.",
																		Type:        "object",
																	},
																	"conditions": {
																		Description: "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "PersistentVolumeClaimCondition contails details about state of pvc",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"lastProbeTime": {
																						Description: "lastProbeTime is the time we probed the condition.",
																						Format:      "date-time",
																						Type:        "string",
																					},
																					"lastTransitionTime": {
																						Description: "lastTransitionTime is the time the condition transitioned from one status to another.",
																						Format:      "date-time",
																						Type:        "string",
																					},
																					"message": {
																						Description: "message is the human-readable message indicating details about last transition.",
																						Type:        "string",
																					},
																					"reason": {
																						Description: `reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.`,
																						Type:        "string",
																					},
																					"status": {Type: "string"},
																					"type": {
																						Description: "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
																						Type:        "string",
																					},
																				},
																				Required: []string{
																					"status",
																					"type",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"phase": {
																		Description: "phase represents the current phase of PersistentVolumeClaim.",
																		Type:        "string",
																	},
																	"resizeStatus": {
																		Description: "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
											"terminationGracePeriodSeconds": {
												Description: "TerminationGracePeriodSeconds period for container graceful termination",
												Format:      "int64",
												Type:        "integer",
											},
											"tolerations": {
												Description: "Tolerations If specified, the pod's tolerations.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"effect": {
																Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
																Type:        "string",
															},
															"key": {
																Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
																Type:        "string",
															},
															"operator": {
																Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
																Type:        "string",
															},
															"tolerationSeconds": {
																Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
																Format:      "int64",
																Type:        "integer",
															},
															"value": {
																Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"topologySpreadConstraints": {
												Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
														Required: []string{
															"maxSkew",
															"topologyKey",
															"whenUnsatisfiable",
														},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"volumeMounts": {
												Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the VMSelect container, that are generated as a result of StorageSpec objects.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "VolumeMount describes a mounting of a Volume within a container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"mountPath": {
																Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
																Type:        "string",
															},
															"mountPropagation": {
																Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
																Type:        "string",
															},
															"name": {
																Description: "This must match the Name of a Volume.",
																Type:        "string",
															},
															"readOnly": {
																Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
																Type:        "boolean",
															},
															"subPath": {
																Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
																Type:        "string",
															},
															"subPathExpr": {
																Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
																Type:        "string",
															},
														},
														Required: []string{
															"mountPath",
															"name",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"volumes": {
												Description: "Volumes allows configuration of additional volumes on the output Deployment definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
										},
										Required: []string{"replicaCount"},
										Type:     "object",
									},
									"vmstorage": {
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"affinity": {
												Description:            "Affinity If specified, the pod's scheduling constraints.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"claimTemplates": {
												Description: "ClaimTemplates allows adding additional VolumeClaimTemplates for StatefulSet",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PersistentVolumeClaim is a user's request for and claim to a persistent volume",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"apiVersion": {
																Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
																Type:        "string",
															},
															"kind": {
																Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
																Type:        "string",
															},
															"metadata": {
																Description:            "Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata",
																Type:                   "object",
																XPreserveUnknownFields: vmop.P(true),
															},
															"spec": {
																Description: "spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"accessModes": {
																		Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"dataSource": {
																		Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"apiGroup": {
																				Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																				Type:        "string",
																			},
																			"kind": {
																				Description: "Kind is the type of resource being referenced",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name is the name of resource being referenced",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"kind",
																			"name",
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"dataSourceRef": {
																		Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"apiGroup": {
																				Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
																				Type:        "string",
																			},
																			"kind": {
																				Description: "Kind is the type of resource being referenced",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name is the name of resource being referenced",
																				Type:        "string",
																			},
																		},
																		Required: []string{
																			"kind",
																			"name",
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"resources": {
																		Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"limits": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						AnyOf: []apiextensionsv1.JSONSchemaProps{
																							{Type: "integer"},
																							{Type: "string"},
																						},
																						Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																						XIntOrString: true,
																					},
																				},
																				Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																				Type:        "object",
																			},
																			"requests": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						AnyOf: []apiextensionsv1.JSONSchemaProps{
																							{Type: "integer"},
																							{Type: "string"},
																						},
																						Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																						XIntOrString: true,
																					},
																				},
																				Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																				Type:        "object",
																			},
																		},
																		Type: "object",
																	},
																	"selector": {
																		Description: "selector is a label query over volumes to consider for binding.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"matchExpressions": {
																				Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																				Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																					Schema: &apiextensionsv1.JSONSchemaProps{
																						Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "key is the label key that the selector applies to.",
																								Type:        "string",
																							},
																							"operator": {
																								Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																								Type:        "string",
																							},
																							"values": {
																								Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																								Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																								Type:        "array",
																							},
																						},
																						Required: []string{
																							"key",
																							"operator",
																						},
																						Type: "object",
																					},
																				},
																				Type: "array",
																			},
																			"matchLabels": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																				},
																				Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																				Type:        "object",
																			},
																		},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"storageClassName": {
																		Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
																		Type:        "string",
																	},
																	"volumeMode": {
																		Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
																		Type:        "string",
																	},
																	"volumeName": {
																		Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
															"status": {
																Description: "status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"accessModes": {
																		Description: "accessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"allocatedResources": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "allocatedResources is the storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																		Type:        "object",
																	},
																	"capacity": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																		},
																		Description: "capacity represents the actual resources of the underlying volume.",
																		Type:        "object",
																	},
																	"conditions": {
																		Description: "conditions is the current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.",
																		Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																			Schema: &apiextensionsv1.JSONSchemaProps{
																				Description: "PersistentVolumeClaimCondition contails details about state of pvc",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"lastProbeTime": {
																						Description: "lastProbeTime is the time we probed the condition.",
																						Format:      "date-time",
																						Type:        "string",
																					},
																					"lastTransitionTime": {
																						Description: "lastTransitionTime is the time the condition transitioned from one status to another.",
																						Format:      "date-time",
																						Type:        "string",
																					},
																					"message": {
																						Description: "message is the human-readable message indicating details about last transition.",
																						Type:        "string",
																					},
																					"reason": {
																						Description: `reason is a unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.`,
																						Type:        "string",
																					},
																					"status": {Type: "string"},
																					"type": {
																						Description: "PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type",
																						Type:        "string",
																					},
																				},
																				Required: []string{
																					"status",
																					"type",
																				},
																				Type: "object",
																			},
																		},
																		Type: "array",
																	},
																	"phase": {
																		Description: "phase represents the current phase of PersistentVolumeClaim.",
																		Type:        "string",
																	},
																	"resizeStatus": {
																		Description: "resizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"configMaps": {
												Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VMSelect object, which shall be mounted into the VMSelect Pods. The ConfigMaps are mounted into /etc/vm/configs/<configmap-name>.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"containers": {
												Description: "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "A single application container that you want to run within a pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"dnsConfig": {
												Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"nameservers": {
														Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"options": {
														Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"name": {
																		Description: "Required.",
																		Type:        "string",
																	},
																	"value": {Type: "string"},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"searches": {
														Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
												},
												Type: "object",
											},
											"dnsPolicy": {
												Description: "DNSPolicy sets DNS policy for the pod",
												Type:        "string",
											},
											"extraArgs": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Type: "object",
											},
											"extraEnvs": {
												Description: "ExtraEnvs that will be added to VMSelect pod",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "EnvVar represents an environment variable present in a Container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
																Type:        "string",
															},
															"value": {
																Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
																Type:        "string",
															},
														},
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"hostNetwork": {
												Description: "HostNetwork controls whether the pod may use the node network namespace",
												Type:        "boolean",
											},
											"image": {
												Description: "Image - docker image settings for VMStorage",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"pullPolicy": {
														Description: "PullPolicy describes how to pull docker image",
														Type:        "string",
													},
													"repository": {
														Description: "Repository contains name of docker image + it's repository if needed",
														Type:        "string",
													},
													"tag": {
														Description: "Tag contains desired docker image version",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"initContainers": {
												Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the VMSelect configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "A single application container that you want to run within a pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"livenessProbe": {
												Description:            "LivenessProbe that will be added CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"logFormat": {
												Description: "LogFormat for VMSelect to be configured with. default or json",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"default\"")},
													{Raw: []byte("\"json\"")},
												},
												Type: "string",
											},
											"logLevel": {
												Description: "LogLevel for VMSelect to be configured with.",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"INFO\"")},
													{Raw: []byte("\"WARN\"")},
													{Raw: []byte("\"ERROR\"")},
													{Raw: []byte("\"FATAL\"")},
													{Raw: []byte("\"PANIC\"")},
												},
												Type: "string",
											},
											"maintenanceInsertNodeIDs": {
												Description: "MaintenanceInsertNodeIDs - excludes given node ids from insert requests routing, must contain pod suffixes - for pod-0, id will be 0 and etc. lets say, you have pod-0, pod-1, pod-2, pod-3. to exclude pod-0 and pod-3 from insert routing, define nodeIDs: [0,3]. Useful at storage expanding, when you want to rebalance some data at cluster.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Format: "int32",
														Type:   "integer",
													},
												},
												Type: "array",
											},
											"maintenanceSelectNodeIDs": {
												Description: "MaintenanceInsertNodeIDs - excludes given node ids from select requests routing, must contain pod suffixes - for pod-0, id will be 0 and etc.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Format: "int32",
														Type:   "integer",
													},
												},
												Type: "array",
											},
											"name": {
												Description: "Name is deprecated and will be removed at 0.22.0 release",
												Type:        "string",
											},
											"nodeSelector": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
												Type:        "object",
											},
											"podDisruptionBudget": {
												Description: "PodDisruptionBudget created by operator",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"maxUnavailable": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  `An eviction is allowed if at most "maxUnavailable" pods selected by "selector" are unavailable after the eviction, i.e. even in absence of the evicted pod. For example, one can prevent all voluntary evictions by specifying 0. This is a mutually exclusive setting with "minAvailable".`,
														XIntOrString: true,
													},
													"minAvailable": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  `An eviction is allowed if at least "minAvailable" pods selected by "selector" will still be available after the eviction, i.e. even in the absence of the evicted pod.  So for example you can prevent all voluntary evictions by specifying "100%".`,
														XIntOrString: true,
													},
													"selectorLabels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "replaces default labels selector generated by operator it's useful when you need to create custom budget",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"podMetadata": {
												Description: "PodMetadata configures Labels and Annotations which are propagated to the VMSelect pods.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"port": {
												Description: "Port for health check connetions",
												Type:        "string",
											},
											"priorityClassName": {
												Description: "Priority class assigned to the Pods",
												Type:        "string",
											},
											"readinessGates": {
												Description: "ReadinessGates defines pod readiness gates",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodReadinessGate contains the reference to a pod condition",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"conditionType": {
																Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
																Type:        "string",
															},
														},
														Required: []string{"conditionType"},
														Type:     "object",
													},
												},
												Type: "array",
											},
											"readinessProbe": {
												Description:            "ReadinessProbe that will be added CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"replicaCount": {
												Description: "ReplicaCount is the expected size of the VMStorage cluster. The controller will eventually make the size of the running cluster equal to the expected size.",
												Format:      "int32",
												Type:        "integer",
											},
											"resources": {
												Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"limits": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
													"requests": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"rollingUpdateStrategy": {
												Description: "RollingUpdateStrategy defines strategy for application updates Default is OnDelete, in this case operator handles update process Can be changed for RollingUpdate",
												Type:        "string",
											},
											"runtimeClassName": {
												Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
												Type:        "string",
											},
											"schedulerName": {
												Description: "SchedulerName - defines kubernetes scheduler name",
												Type:        "string",
											},
											"secrets": {
												Description: "Secrets is a list of Secrets in the same namespace as the VMSelect object, which shall be mounted into the VMSelect Pods. The Secrets are mounted into /etc/vm/secrets/<secret-name>.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"securityContext": {
												Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"serviceScrapeSpec": {
												Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
												Required:               []string{"endpoints"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"serviceSpec": {
												Description: "ServiceSpec that will be create additional service for vmstorage",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"metadata": {
														Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"annotations": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
																Type:        "object",
															},
															"labels": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
																Type:        "object",
															},
															"name": {
																Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"spec": {
														Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Required: []string{"spec"},
												Type:     "object",
											},
											"startupProbe": {
												Description:            "StartupProbe that will be added to CRD pod",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
											"storage": {
												Description: "Storage - add persistent volume for StorageDataPath its useful for persistent cache",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"disableMountSubPath": {
														Description: "Deprecated: subPath usage will be disabled by default in a future release, this option will become unnecessary. DisableMountSubPath allows to remove any subPath usage in volume mounts.",
														Type:        "boolean",
													},
													"emptyDir": {
														Description: "EmptyDirVolumeSource to be used by the Prometheus StatefulSets. If specified, used in place of any volumeClaimTemplate. More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"medium": {
																Description: `medium represents what type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir`,
																Type:        "string",
															},
															"sizeLimit": {
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Description:  "sizeLimit is the total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir",
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Type: "object",
													},
													"volumeClaimTemplate": {
														Description:            "A PVC spec to be used by the VMAlertManager StatefulSets.",
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "object",
											},
											"storageDataPath": {
												Description: "StorageDataPath - path to storage data",
												Type:        "string",
											},
											"terminationGracePeriodSeconds": {
												Description: "TerminationGracePeriodSeconds period for container graceful termination",
												Format:      "int64",
												Type:        "integer",
											},
											"tolerations": {
												Description: "Tolerations If specified, the pod's tolerations.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"effect": {
																Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
																Type:        "string",
															},
															"key": {
																Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
																Type:        "string",
															},
															"operator": {
																Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
																Type:        "string",
															},
															"tolerationSeconds": {
																Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
																Format:      "int64",
																Type:        "integer",
															},
															"value": {
																Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"topologySpreadConstraints": {
												Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
														Required: []string{
															"maxSkew",
															"topologyKey",
															"whenUnsatisfiable",
														},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
											"vmBackup": {
												Description: "VMBackup configuration for backup",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"acceptEULA": {
														Description: "AcceptEULA accepts enterprise feature usage, must be set to true. otherwise backupmanager cannot be added to single/cluster version. https://victoriametrics.com/legal/eula/",
														Type:        "boolean",
													},
													"concurrency": {
														Description: "Defines number of concurrent workers. Higher concurrency may reduce backup duration (default 10)",
														Format:      "int32",
														Type:        "integer",
													},
													"credentialsSecret": {
														Description: "CredentialsSecret is secret in the same namespace for access to remote storage The secret is mounted into /etc/vm/creds.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"customS3Endpoint": {
														Description: "Custom S3 endpoint for use with S3-compatible storages (e.g. MinIO). S3 is used if not set",
														Type:        "string",
													},
													"destination": {
														Description: "Defines destination for backup",
														Type:        "string",
													},
													"destinationDisableSuffixAdd": {
														Description: "DestinationDisableSuffixAdd - disables suffix adding for cluster version backups each vmstorage backup must have unique backup folder so operator adds POD_NAME as suffix for backup destination folder.",
														Type:        "boolean",
													},
													"disableDaily": {
														Description: "Defines if daily backups disabled (default false)",
														Type:        "boolean",
													},
													"disableHourly": {
														Description: "Defines if hourly backups disabled (default false)",
														Type:        "boolean",
													},
													"disableMonthly": {
														Description: "Defines if monthly backups disabled (default false)",
														Type:        "boolean",
													},
													"disableWeekly": {
														Description: "Defines if weekly backups disabled (default false)",
														Type:        "boolean",
													},
													"extraArgs": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "extra args like maxBytesPerSecond default 0",
														Type:        "object",
													},
													"extraEnvs": {
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "EnvVar represents an environment variable present in a Container.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"name": {
																		Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
																		Type:        "string",
																	},
																	"value": {
																		Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
																		Type:        "string",
																	},
																	"valueFrom": {
																		Description: "Source for the environment variable's value. Cannot be used if value is not empty.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"configMapKeyRef": {
																				Description: "Selects a key of a ConfigMap.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key to select.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the ConfigMap or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"fieldRef": {
																				Description: "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"apiVersion": {
																						Description: `Version of the schema the FieldPath is written in terms of, defaults to "v1".`,
																						Type:        "string",
																					},
																					"fieldPath": {
																						Description: "Path of the field to select in the specified API version.",
																						Type:        "string",
																					},
																				},
																				Required: []string{"fieldPath"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"resourceFieldRef": {
																				Description: "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"containerName": {
																						Description: "Container name: required for volumes, optional for env vars",
																						Type:        "string",
																					},
																					"divisor": {
																						AnyOf: []apiextensionsv1.JSONSchemaProps{
																							{Type: "integer"},
																							{Type: "string"},
																						},
																						Description:  `Specifies the output format of the exposed resources, defaults to "1"`,
																						Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																						XIntOrString: true,
																					},
																					"resource": {
																						Description: "Required: resource to select",
																						Type:        "string",
																					},
																				},
																				Required: []string{"resource"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"secretKeyRef": {
																				Description: "Selects a key of a secret in the pod's namespace",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																		},
																		Type: "object",
																	},
																},
																Required: []string{"name"},
																Type:     "object",
															},
														},
														Type: "array",
													},
													"image": {
														Description: "Image - docker image settings for VMBackuper",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"pullPolicy": {
																Description: "PullPolicy describes how to pull docker image",
																Type:        "string",
															},
															"repository": {
																Description: "Repository contains name of docker image + it's repository if needed",
																Type:        "string",
															},
															"tag": {
																Description: "Tag contains desired docker image version",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"logFormat": {
														Description: "LogFormat for VMSelect to be configured with. default or json",
														Enum: []apiextensionsv1.JSON{
															{Raw: []byte("\"default\"")},
															{Raw: []byte("\"json\"")},
														},
														Type: "string",
													},
													"logLevel": {
														Description: "LogLevel for VMSelect to be configured with.",
														Enum: []apiextensionsv1.JSON{
															{Raw: []byte("\"INFO\"")},
															{Raw: []byte("\"WARN\"")},
															{Raw: []byte("\"ERROR\"")},
															{Raw: []byte("\"FATAL\"")},
															{Raw: []byte("\"PANIC\"")},
														},
														Type: "string",
													},
													"port": {
														Description: "Port for health check connections",
														Type:        "string",
													},
													"resources": {
														Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"limits": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																Type:        "object",
															},
															"requests": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		AnyOf: []apiextensionsv1.JSONSchemaProps{
																			{Type: "integer"},
																			{Type: "string"},
																		},
																		Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																		XIntOrString: true,
																	},
																},
																Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
																Type:        "object",
															},
														},
														Type: "object",
													},
													"restore": {
														Description: "Restore Allows to enable restore options for pod Read more: https://docs.victoriametrics.com/vmbackupmanager.html#restore-commands",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"onStart": {
																Description: "OnStart defines configuration for restore on pod start",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"enabled": {
																		Description: "Enabled defines if restore on start enabled",
																		Type:        "boolean",
																	},
																},
																Type: "object",
															},
														},
														Type: "object",
													},
													"snapshotCreateURL": {
														Description: "SnapshotCreateURL overwrites url for snapshot create",
														Type:        "string",
													},
													"snapshotDeleteURL": {
														Description: "SnapShotDeleteURL overwrites url for snapshot delete",
														Type:        "string",
													},
													"volumeMounts": {
														Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the vmbackupmanager container, that are generated as a result of StorageSpec objects.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "VolumeMount describes a mounting of a Volume within a container.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"mountPath": {
																		Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
																		Type:        "string",
																	},
																	"mountPropagation": {
																		Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "This must match the Name of a Volume.",
																		Type:        "string",
																	},
																	"readOnly": {
																		Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
																		Type:        "boolean",
																	},
																	"subPath": {
																		Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
																		Type:        "string",
																	},
																	"subPathExpr": {
																		Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
																		Type:        "string",
																	},
																},
																Required: []string{
																	"mountPath",
																	"name",
																},
																Type: "object",
															},
														},
														Type: "array",
													},
												},
												Required: []string{"acceptEULA"},
												Type:     "object",
											},
											"vmInsertPort": {
												Description: "VMInsertPort for VMInsert connections",
												Type:        "string",
											},
											"vmSelectPort": {
												Description: "VMSelectPort for VMSelect connections",
												Type:        "string",
											},
											"volumeMounts": {
												Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the VMSelect container, that are generated as a result of StorageSpec objects.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "VolumeMount describes a mounting of a Volume within a container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"mountPath": {
																Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
																Type:        "string",
															},
															"mountPropagation": {
																Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
																Type:        "string",
															},
															"name": {
																Description: "This must match the Name of a Volume.",
																Type:        "string",
															},
															"readOnly": {
																Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
																Type:        "boolean",
															},
															"subPath": {
																Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
																Type:        "string",
															},
															"subPathExpr": {
																Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
																Type:        "string",
															},
														},
														Required: []string{
															"mountPath",
															"name",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"volumes": {
												Description: "Volumes allows configuration of additional volumes on the output Deployment definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
														Required:               []string{"name"},
														Type:                   "object",
														XPreserveUnknownFields: vmop.P(true),
													},
												},
												Type: "array",
											},
										},
										Required: []string{"replicaCount"},
										Type:     "object",
									},
								},
								Required: []string{"retentionPeriod"},
								Type:     "object",
							},
							"status": {
								Description: "VMClusterStatus defines the observed state of VMCluster",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"clusterStatus": {Type: "string"},
									"lastSync": {
										Description: "Deprecated.",
										Type:        "string",
									},
									"reason": {Type: "string"},
									"updateFailCount": {
										Description: "Deprecated.",
										Type:        "integer",
									},
								},
								Required: []string{
									"clusterStatus",
									"updateFailCount",
								},
								Type: "object",
							},
						},
						Required: []string{"spec"},
						Type:     "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMNodeScrapesCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmnodescrapes.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMNodeScrape",
			ListKind: "VMNodeScrapeList",
			Plural:   "vmnodescrapes",
			Singular: "vmnodescrape",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMNodeScrape defines discovery for targets placed on kubernetes nodes, usually its node-exporters and other host services. InternalIP is used as __address__ for scraping.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMNodeScrapeSpec defines specification for VMNodeScrape.",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"authorization": {
										Description: "Authorization with http header Authorization",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"credentials": {
												Description: "Reference to the secret with value for authorization",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"credentialsFile": {
												Description: "File with value for authorization",
												Type:        "string",
											},
											"type": {
												Description: "Type of authorization, default to bearer",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"basicAuth": {
										Description: "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"password": {
												Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"password_file": {
												Description: "PasswordFile defines path to password file at disk",
												Type:        "string",
											},
											"username": {
												Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "object",
									},
									"bearerTokenFile": {
										Description: "File to read bearer token for scraping targets.",
										Type:        "string",
									},
									"bearerTokenSecret": {
										Description: "Secret to mount to read bearer token for scraping targets. The secret needs to be  accessible by the victoria-metrics operator.",
										Nullable:    true,
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"key": {
												Description: "The key of the secret to select from.  Must be a valid secret key.",
												Type:        "string",
											},
											"name": {
												Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
												Type:        "string",
											},
											"optional": {
												Description: "Specify whether the Secret or its key must be defined",
												Type:        "boolean",
											},
										},
										Required: []string{"key"},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"follow_redirects": {
										Description: "FollowRedirects controls redirects for scraping.",
										Type:        "boolean",
									},
									"honorLabels": {
										Description: "HonorLabels chooses the metric's labels on collisions with target labels.",
										Type:        "boolean",
									},
									"honorTimestamps": {
										Description: "HonorTimestamps controls whether vmagent respects the timestamps present in scraped data.",
										Type:        "boolean",
									},
									"interval": {
										Description: "Interval at which metrics should be scraped",
										Type:        "string",
									},
									"jobLabel": {
										Description: "The label to use to retrieve the job name from.",
										Type:        "string",
									},
									"metricRelabelConfigs": {
										Description: "MetricRelabelConfigs to apply to samples before ingestion.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"oauth2": {
										Description: "OAuth2 defines auth configuration",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"client_id": {
												Description: "The secret or configmap containing the OAuth2 client id",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"configMap": {
														Description: "ConfigMap containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key to select.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the ConfigMap or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"secret": {
														Description: "Secret containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"client_secret": {
												Description: "The secret containing the OAuth2 client secret",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"client_secret_file": {
												Description: "ClientSecretFile defines path for client secret file.",
												Type:        "string",
											},
											"endpoint_params": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Parameters to append to the token URL",
												Type:        "object",
											},
											"scopes": {
												Description: "OAuth2 scopes used for the token request",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"token_url": {
												Description: "The URL to fetch the token from",
												MinLength:   vmop.P(int64(1)),
												Type:        "string",
											},
										},
										Required: []string{
											"client_id",
											"token_url",
										},
										Type: "object",
									},
									"params": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:  "array",
											},
										},
										Description: "Optional HTTP URL parameters",
										Type:        "object",
									},
									"path": {
										Description: "HTTP path to scrape for metrics.",
										Type:        "string",
									},
									"port": {
										Description: "Name of the port exposed at Node.",
										Type:        "string",
									},
									"proxyURL": {
										Description: "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
										Type:        "string",
									},
									"relabelConfigs": {
										Description: "RelabelConfigs to apply to samples before scraping. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"action": {
														Description: "Action to perform based on regex matching. Default is 'replace'",
														Type:        "string",
													},
													"if": {
														Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels is used together with Match for `action: graphite`",
														Type:        "object",
													},
													"match": {
														Description: "Match is used together with Labels for `action: graphite`",
														Type:        "string",
													},
													"modulus": {
														Description: "Modulus to take of the hash of the source label values.",
														Format:      "int64",
														Type:        "integer",
													},
													"regex": {
														Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
														Type:        "string",
													},
													"replacement": {
														Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
														Type:        "string",
													},
													"separator": {
														Description: "Separator placed between concatenated source label values. default is ';'.",
														Type:        "string",
													},
													"sourceLabels": {
														Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"source_labels": {
														Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"targetLabel": {
														Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
														Type:        "string",
													},
													"target_label": {
														Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"sampleLimit": {
										Description: "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
										Format:      "int64",
										Type:        "integer",
									},
									"scheme": {
										Description: "HTTP scheme to use for scraping.",
										Type:        "string",
									},
									"scrapeTimeout": {
										Description: "Timeout after which the scrape is ended",
										Type:        "string",
									},
									"scrape_interval": {
										Description: "ScrapeInterval is the same as Interval and has priority over it. one of scrape_interval or interval can be used",
										Type:        "string",
									},
									"selector": {
										Description: "Selector to select kubernetes Nodes.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"targetLabels": {
										Description: "TargetLabels transfers labels on the Kubernetes Node onto the target.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"tlsConfig": {
										Description: "TLSConfig specifies TLSConfig configuration parameters.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"ca": {
												Description: "Stuct containing the CA cert to use for the targets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"configMap": {
														Description: "ConfigMap containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key to select.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the ConfigMap or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"secret": {
														Description: "Secret containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"caFile": {
												Description: "Path to the CA cert in the container to use for the targets.",
												Type:        "string",
											},
											"cert": {
												Description: "Struct containing the client cert file for the targets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"configMap": {
														Description: "ConfigMap containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key to select.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the ConfigMap or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"secret": {
														Description: "Secret containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"certFile": {
												Description: "Path to the client cert file in the container for the targets.",
												Type:        "string",
											},
											"insecureSkipVerify": {
												Description: "Disable target certificate validation.",
												Type:        "boolean",
											},
											"keyFile": {
												Description: "Path to the client key file in the container for the targets.",
												Type:        "string",
											},
											"keySecret": {
												Description: "Secret containing the client key file for the targets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"serverName": {
												Description: "Used to verify the hostname for the targets.",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"vm_scrape_params": {
										Description: "VMScrapeParams defines VictoriaMetrics specific scrape parametrs",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"disable_compression": {Type: "boolean"},
											"disable_keep_alive":  {Type: "boolean"},
											"headers": {
												Description: "Headers allows sending custom headers to scrape targets must be in of semicolon separated header with it's value eg: headerName: headerValue vmagent supports since 1.79.0 version",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"metric_relabel_debug": {Type: "boolean"},
											"no_stale_markers":     {Type: "boolean"},
											"proxy_client_config": {
												Description: "ProxyClientConfig configures proxy auth settings for scraping See feature description https://docs.victoriametrics.com/vmagent.html#scraping-targets-via-a-proxy",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"basic_auth": {
														Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"password": {
																Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"password_file": {
																Description: "PasswordFile defines path to password file at disk",
																Type:        "string",
															},
															"username": {
																Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"bearer_token": {
														Description: "SecretKeySelector selects a key of a Secret.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"bearer_token_file": {Type: "string"},
													"tls_config": {
														Description: "TLSConfig specifies TLSConfig configuration parameters.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"ca": {
																Description: "Stuct containing the CA cert to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"caFile": {
																Description: "Path to the CA cert in the container to use for the targets.",
																Type:        "string",
															},
															"cert": {
																Description: "Struct containing the client cert file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"certFile": {
																Description: "Path to the client cert file in the container for the targets.",
																Type:        "string",
															},
															"insecureSkipVerify": {
																Description: "Disable target certificate validation.",
																Type:        "boolean",
															},
															"keyFile": {
																Description: "Path to the client key file in the container for the targets.",
																Type:        "string",
															},
															"keySecret": {
																Description: "Secret containing the client key file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"serverName": {
																Description: "Used to verify the hostname for the targets.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
											"relabel_debug":         {Type: "boolean"},
											"scrape_align_interval": {Type: "string"},
											"scrape_offset":         {Type: "string"},
											"stream_parse":          {Type: "boolean"},
										},
										Type: "object",
									},
								},
								Type: "object",
							},
							"status": {
								Description: "VMNodeScrapeStatus defines the observed state of VMNodeScrape",
								Type:        "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMPodScrapesCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmpodscrapes.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMPodScrape",
			ListKind: "VMPodScrapeList",
			Plural:   "vmpodscrapes",
			Singular: "vmpodscrape",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMPodScrape is scrape configuration for pods, it generates vmagent's config for scraping pod targets based on selectors.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMPodScrapeSpec defines the desired state of VMPodScrape",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"jobLabel": {
										Description: "The label to use to retrieve the job name from.",
										Type:        "string",
									},
									"namespaceSelector": {
										Description: "Selector to select which namespaces the Endpoints objects are discovered from.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"any": {
												Description: "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
												Type:        "boolean",
											},
											"matchNames": {
												Description: "List of namespace names.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
										},
										Type: "object",
									},
									"podMetricsEndpoints": {
										Description: "A list of endpoints allowed as part of this PodMonitor.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PodMetricsEndpoint defines a scrapeable endpoint of a Kubernetes Pod serving Prometheus metrics.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"attach_metadata": {
														Description: "AttachMetadata configures metadata attaching from service discovery",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"node": {
																Description: "Node instructs vmagent to add node specific metadata from service discovery Valid for roles: pod, endpoints, endpointslice.",
																Type:        "boolean",
															},
														},
														Type: "object",
													},
													"authorization": {
														Description: "Authorization with http header Authorization",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"credentials": {
																Description: "Reference to the secret with value for authorization",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"credentialsFile": {
																Description: "File with value for authorization",
																Type:        "string",
															},
															"type": {
																Description: "Type of authorization, default to bearer",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"basicAuth": {
														Description: "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"password": {
																Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"password_file": {
																Description: "PasswordFile defines path to password file at disk",
																Type:        "string",
															},
															"username": {
																Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"bearerTokenFile": {
														Description: "File to read bearer token for scraping targets.",
														Type:        "string",
													},
													"bearerTokenSecret": {
														Description: "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service scrape and accessible by the victoria-metrics operator.",
														Nullable:    true,
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"filterRunning": {
														Description: "FilterRunning applies filter with pod status == running it prevents from scrapping metrics at failed or succeed state pods. enabled by default",
														Type:        "boolean",
													},
													"follow_redirects": {
														Description: "FollowRedirects controls redirects for scraping.",
														Type:        "boolean",
													},
													"honorLabels": {
														Description: "HonorLabels chooses the metric's labels on collisions with target labels.",
														Type:        "boolean",
													},
													"honorTimestamps": {
														Description: "HonorTimestamps controls whether vmagent respects the timestamps present in scraped data.",
														Type:        "boolean",
													},
													"interval": {
														Description: "Interval at which metrics should be scraped",
														Type:        "string",
													},
													"metricRelabelConfigs": {
														Description: "MetricRelabelConfigs to apply to samples before ingestion.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"oauth2": {
														Description: "OAuth2 defines auth configuration",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"client_id": {
																Description: "The secret or configmap containing the OAuth2 client id",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"client_secret": {
																Description: "The secret containing the OAuth2 client secret",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"client_secret_file": {
																Description: "ClientSecretFile defines path for client secret file.",
																Type:        "string",
															},
															"endpoint_params": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Parameters to append to the token URL",
																Type:        "object",
															},
															"scopes": {
																Description: "OAuth2 scopes used for the token request",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"token_url": {
																Description: "The URL to fetch the token from",
																MinLength:   vmop.P(int64(1)),
																Type:        "string",
															},
														},
														Required: []string{
															"client_id",
															"token_url",
														},
														Type: "object",
													},
													"params": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
														},
														Description: "Optional HTTP URL parameters",
														Type:        "object",
													},
													"path": {
														Description: "HTTP path to scrape for metrics.",
														Type:        "string",
													},
													"port": {
														Description: "Name of the pod port this endpoint refers to. Mutually exclusive with targetPort.",
														Type:        "string",
													},
													"proxyURL": {
														Description: "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
														Type:        "string",
													},
													"relabelConfigs": {
														Description: "RelabelConfigs to apply to samples before ingestion. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"sampleLimit": {
														Description: "SampleLimit defines per-podEndpoint limit on number of scraped samples that will be accepted.",
														Format:      "int64",
														Type:        "integer",
													},
													"scheme": {
														Description: "HTTP scheme to use for scraping.",
														Type:        "string",
													},
													"scrapeTimeout": {
														Description: "Timeout after which the scrape is ended",
														Type:        "string",
													},
													"scrape_interval": {
														Description: "ScrapeInterval is the same as Interval and has priority over it. one of scrape_interval or interval can be used",
														Type:        "string",
													},
													"targetPort": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  "Deprecated: Use 'port' instead.",
														XIntOrString: true,
													},
													"tlsConfig": {
														Description: "TLSConfig configuration to use when scraping the endpoint",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"ca": {
																Description: "Stuct containing the CA cert to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"caFile": {
																Description: "Path to the CA cert in the container to use for the targets.",
																Type:        "string",
															},
															"cert": {
																Description: "Struct containing the client cert file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"certFile": {
																Description: "Path to the client cert file in the container for the targets.",
																Type:        "string",
															},
															"insecureSkipVerify": {
																Description: "Disable target certificate validation.",
																Type:        "boolean",
															},
															"keyFile": {
																Description: "Path to the client key file in the container for the targets.",
																Type:        "string",
															},
															"keySecret": {
																Description: "Secret containing the client key file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"serverName": {
																Description: "Used to verify the hostname for the targets.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"vm_scrape_params": {
														Description: "VMScrapeParams defines VictoriaMetrics specific scrape parametrs",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"disable_compression": {Type: "boolean"},
															"disable_keep_alive":  {Type: "boolean"},
															"headers": {
																Description: "Headers allows sending custom headers to scrape targets must be in of semicolon separated header with it's value eg: headerName: headerValue vmagent supports since 1.79.0 version",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"metric_relabel_debug": {Type: "boolean"},
															"no_stale_markers":     {Type: "boolean"},
															"proxy_client_config": {
																Description: "ProxyClientConfig configures proxy auth settings for scraping See feature description https://docs.victoriametrics.com/vmagent.html#scraping-targets-via-a-proxy",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"basic_auth": {
																		Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"password": {
																				Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"password_file": {
																				Description: "PasswordFile defines path to password file at disk",
																				Type:        "string",
																			},
																			"username": {
																				Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																		},
																		Type: "object",
																	},
																	"bearer_token": {
																		Description: "SecretKeySelector selects a key of a Secret.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"bearer_token_file": {Type: "string"},
																	"tls_config": {
																		Description: "TLSConfig specifies TLSConfig configuration parameters.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"ca": {
																				Description: "Stuct containing the CA cert to use for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"caFile": {
																				Description: "Path to the CA cert in the container to use for the targets.",
																				Type:        "string",
																			},
																			"cert": {
																				Description: "Struct containing the client cert file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"certFile": {
																				Description: "Path to the client cert file in the container for the targets.",
																				Type:        "string",
																			},
																			"insecureSkipVerify": {
																				Description: "Disable target certificate validation.",
																				Type:        "boolean",
																			},
																			"keyFile": {
																				Description: "Path to the client key file in the container for the targets.",
																				Type:        "string",
																			},
																			"keySecret": {
																				Description: "Secret containing the client key file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"serverName": {
																				Description: "Used to verify the hostname for the targets.",
																				Type:        "string",
																			},
																		},
																		Type: "object",
																	},
																},
																Type: "object",
															},
															"relabel_debug":         {Type: "boolean"},
															"scrape_align_interval": {Type: "string"},
															"scrape_offset":         {Type: "string"},
															"stream_parse":          {Type: "boolean"},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"podTargetLabels": {
										Description: "PodTargetLabels transfers labels on the Kubernetes Pod onto the target.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"sampleLimit": {
										Description: "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
										Format:      "int64",
										Type:        "integer",
									},
									"selector": {
										Description: "Selector to select Pod objects.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
								},
								Required: []string{"podMetricsEndpoints"},
								Type:     "object",
							},
							"status": {
								Description: "VMPodScrapeStatus defines the observed state of VMPodScrape",
								Type:        "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMProbesCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmprobes.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMProbe",
			ListKind: "VMProbeList",
			Plural:   "vmprobes",
			Singular: "vmprobe",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMProbe defines a probe for targets, that will be executed with prober, like blackbox exporter. It helps to monitor reachability of target with various checks.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMProbeSpec contains specification parameters for a Probe.",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"authorization": {
										Description: "Authorization with http header Authorization",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"credentials": {
												Description: "Reference to the secret with value for authorization",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"credentialsFile": {
												Description: "File with value for authorization",
												Type:        "string",
											},
											"type": {
												Description: "Type of authorization, default to bearer",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"basicAuth": {
										Description: "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"password": {
												Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"password_file": {
												Description: "PasswordFile defines path to password file at disk",
												Type:        "string",
											},
											"username": {
												Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "object",
									},
									"bearerTokenFile": {
										Description: "File to read bearer token for scraping targets.",
										Type:        "string",
									},
									"bearerTokenSecret": {
										Description: "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service scrape and accessible by the victoria-metrics operator.",
										Nullable:    true,
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"key": {
												Description: "The key of the secret to select from.  Must be a valid secret key.",
												Type:        "string",
											},
											"name": {
												Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
												Type:        "string",
											},
											"optional": {
												Description: "Specify whether the Secret or its key must be defined",
												Type:        "boolean",
											},
										},
										Required: []string{"key"},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"follow_redirects": {
										Description: "FollowRedirects controls redirects for scraping.",
										Type:        "boolean",
									},
									"interval": {
										Description: "Interval at which targets are probed using the configured prober. If not specified Prometheus' global scrape interval is used.",
										Type:        "string",
									},
									"jobName": {
										Description: "The job name assigned to scraped metrics by default.",
										Type:        "string",
									},
									"module": {
										Description: "The module to use for probing specifying how to probe the target. Example module configuring in the blackbox exporter: https://github.com/prometheus/blackbox_exporter/blob/master/example.yml",
										Type:        "string",
									},
									"oauth2": {
										Description: "OAuth2 defines auth configuration",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"client_id": {
												Description: "The secret or configmap containing the OAuth2 client id",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"configMap": {
														Description: "ConfigMap containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key to select.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the ConfigMap or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"secret": {
														Description: "Secret containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"client_secret": {
												Description: "The secret containing the OAuth2 client secret",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"client_secret_file": {
												Description: "ClientSecretFile defines path for client secret file.",
												Type:        "string",
											},
											"endpoint_params": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Parameters to append to the token URL",
												Type:        "object",
											},
											"scopes": {
												Description: "OAuth2 scopes used for the token request",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"token_url": {
												Description: "The URL to fetch the token from",
												MinLength:   vmop.P(int64(1)),
												Type:        "string",
											},
										},
										Required: []string{
											"client_id",
											"token_url",
										},
										Type: "object",
									},
									"params": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:  "array",
											},
										},
										Description: "Optional HTTP URL parameters",
										Type:        "object",
									},
									"sampleLimit": {
										Description: "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
										Format:      "int64",
										Type:        "integer",
									},
									"scrapeTimeout": {
										Description: "Timeout for scraping metrics from the Prometheus exporter.",
										Type:        "string",
									},
									"scrape_interval": {
										Description: "ScrapeInterval is the same as Interval and has priority over it. one of scrape_interval or interval can be used",
										Type:        "string",
									},
									"targets": {
										Description: "Targets defines a set of static and/or dynamically discovered targets to be probed using the prober.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"ingress": {
												Description: "Ingress defines the set of dynamically discovered ingress objects which hosts are considered for probing.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"namespaceSelector": {
														Description: "Select Ingress objects by namespace.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"any": {
																Description: "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
																Type:        "boolean",
															},
															"matchNames": {
																Description: "List of namespace names.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Type: "object",
													},
													"relabelingConfigs": {
														Description: "RelabelConfigs to apply to samples before ingestion. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"selector": {
														Description: "Select Ingress objects by labels.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"matchExpressions": {
																Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "key is the label key that the selector applies to.",
																				Type:        "string",
																			},
																			"operator": {
																				Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																				Type:        "string",
																			},
																			"values": {
																				Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																				Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:        "array",
																			},
																		},
																		Required: []string{
																			"key",
																			"operator",
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"matchLabels": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
																Type:        "object",
															},
														},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"staticConfig": {
												Description: "StaticConfig defines static targets which are considers for probing. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#static_config.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels assigned to all metrics scraped from the targets.",
														Type:        "object",
													},
													"relabelingConfigs": {
														Description: "More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"targets": {
														Description: "Targets is a list of URLs to probe using the configured prober.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
												},
												Required: []string{"targets"},
												Type:     "object",
											},
										},
										Type: "object",
									},
									"tlsConfig": {
										Description: "TLSConfig configuration to use when scraping the endpoint",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"ca": {
												Description: "Stuct containing the CA cert to use for the targets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"configMap": {
														Description: "ConfigMap containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key to select.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the ConfigMap or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"secret": {
														Description: "Secret containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"caFile": {
												Description: "Path to the CA cert in the container to use for the targets.",
												Type:        "string",
											},
											"cert": {
												Description: "Struct containing the client cert file for the targets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"configMap": {
														Description: "ConfigMap containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key to select.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the ConfigMap or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"secret": {
														Description: "Secret containing data to use for the targets.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
												},
												Type: "object",
											},
											"certFile": {
												Description: "Path to the client cert file in the container for the targets.",
												Type:        "string",
											},
											"insecureSkipVerify": {
												Description: "Disable target certificate validation.",
												Type:        "boolean",
											},
											"keyFile": {
												Description: "Path to the client key file in the container for the targets.",
												Type:        "string",
											},
											"keySecret": {
												Description: "Secret containing the client key file for the targets.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"serverName": {
												Description: "Used to verify the hostname for the targets.",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"vmProberSpec": {
										Description: "Specification for the prober to use for probing targets. The prober.URL parameter is required. Targets cannot be probed if left empty.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"path": {
												Description: "Path to collect metrics from. Defaults to `/probe`.",
												Type:        "string",
											},
											"scheme": {
												Description: "HTTP scheme to use for scraping. Defaults to `http`.",
												Type:        "string",
											},
											"url": {
												Description: "Mandatory URL of the prober.",
												Type:        "string",
											},
										},
										Required: []string{"url"},
										Type:     "object",
									},
									"vm_scrape_params": {
										Description: "VMScrapeParams defines VictoriaMetrics specific scrape parametrs",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"disable_compression": {Type: "boolean"},
											"disable_keep_alive":  {Type: "boolean"},
											"headers": {
												Description: "Headers allows sending custom headers to scrape targets must be in of semicolon separated header with it's value eg: headerName: headerValue vmagent supports since 1.79.0 version",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"metric_relabel_debug": {Type: "boolean"},
											"no_stale_markers":     {Type: "boolean"},
											"proxy_client_config": {
												Description: "ProxyClientConfig configures proxy auth settings for scraping See feature description https://docs.victoriametrics.com/vmagent.html#scraping-targets-via-a-proxy",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"basic_auth": {
														Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"password": {
																Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"password_file": {
																Description: "PasswordFile defines path to password file at disk",
																Type:        "string",
															},
															"username": {
																Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"bearer_token": {
														Description: "SecretKeySelector selects a key of a Secret.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"bearer_token_file": {Type: "string"},
													"tls_config": {
														Description: "TLSConfig specifies TLSConfig configuration parameters.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"ca": {
																Description: "Stuct containing the CA cert to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"caFile": {
																Description: "Path to the CA cert in the container to use for the targets.",
																Type:        "string",
															},
															"cert": {
																Description: "Struct containing the client cert file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"certFile": {
																Description: "Path to the client cert file in the container for the targets.",
																Type:        "string",
															},
															"insecureSkipVerify": {
																Description: "Disable target certificate validation.",
																Type:        "boolean",
															},
															"keyFile": {
																Description: "Path to the client key file in the container for the targets.",
																Type:        "string",
															},
															"keySecret": {
																Description: "Secret containing the client key file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"serverName": {
																Description: "Used to verify the hostname for the targets.",
																Type:        "string",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
											"relabel_debug":         {Type: "boolean"},
											"scrape_align_interval": {Type: "string"},
											"scrape_offset":         {Type: "string"},
											"stream_parse":          {Type: "boolean"},
										},
										Type: "object",
									},
								},
								Required: []string{"vmProberSpec"},
								Type:     "object",
							},
							"status": {
								Description: "VMProbeStatus defines the observed state of VMProbe",
								Type:        "object",
							},
						},
						Required: []string{"spec"},
						Type:     "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMRulesCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmrules.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMRule",
			ListKind: "VMRuleList",
			Plural:   "vmrules",
			Singular: "vmrule",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMRule defines rule records for vmalert application",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMRuleSpec defines the desired state of VMRule",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"groups": {
										Description: "Groups list of group rules",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "RuleGroup is a list of sequentially evaluated recording and alerting rules.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"concurrency": {
														Description: "Concurrency defines how many rules execute at once.",
														Type:        "integer",
													},
													"extra_filter_labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "ExtraFilterLabels optional list of label filters applied to every rule's request withing a group. Is compatible only with VM datasource. See more details at https://docs.victoriametrics.com#prometheus-querying-api-enhancements Deprecated, use params instead",
														Type:        "object",
													},
													"headers": {
														Description: "Headers contains optional HTTP headers added to each rule request Must be in form `header-name: value` For example: headers: - \"CustomHeader: foo\" - \"CustomHeader2: bar\"",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"interval": {
														Description: "evaluation interval for group",
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels optional list of labels added to every rule within a group. It has priority over the external labels. Labels are commonly used for adding environment or tenant-specific tag.",
														Type:        "object",
													},
													"limit": {
														Description: "Limit the number of alerts an alerting rule and series a recording rule can produce",
														Type:        "integer",
													},
													"name": {
														Description: "Name of group",
														Type:        "string",
													},
													"notifier_headers": {
														Description: "NotifierHeaders contains optional HTTP headers added to each alert request which will send to notifier Must be in form `header-name: value` For example: headers: - \"CustomHeader: foo\" - \"CustomHeader2: bar\"",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"params": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
														},
														Description: "Params optional HTTP URL parameters added to each rule request",
														Type:        "object",
													},
													"rules": {
														Description: "Rules list of alert rules",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "Rule describes an alerting or recording rule.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"alert": {
																		Description: "Alert is a name for alert",
																		Type:        "string",
																	},
																	"annotations": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Annotations will be added to rule configuration",
																		Type:        "object",
																	},
																	"debug": {
																		Description: "Debug enables logging for rule it useful for tracking",
																		Type:        "boolean",
																	},
																	"expr": {
																		Description: "Expr is query, that will be evaluated at dataSource",
																		Type:        "string",
																	},
																	"for": {
																		Description: "For evaluation interval in time.Duration format 30s, 1m, 1h  or nanoseconds",
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels will be added to rule configuration",
																		Type:        "object",
																	},
																	"record": {
																		Description: "Record represents a query, that will be recorded to dataSource",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"tenant": {
														Description: "Tenant id for group, can be used only with enterprise version of vmalert See more details at https://docs.victoriametrics.com/vmalert.html#multitenancy",
														Type:        "string",
													},
													"type": {
														Description: "Type defines datasource type for enterprise version of vmalert possible values - prometheus,graphite",
														Type:        "string",
													},
												},
												Required: []string{
													"name",
													"rules",
												},
												Type: "object",
											},
										},
										Type: "array",
									},
								},
								Required: []string{"groups"},
								Type:     "object",
							},
							"status": {
								Description: "VMRuleStatus defines the observed state of VMRule",
								Type:        "object",
							},
						},
						Required: []string{"spec"},
						Type:     "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMServiceScrapesCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmservicescrapes.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMServiceScrape",
			ListKind: "VMServiceScrapeList",
			Plural:   "vmservicescrapes",
			Singular: "vmservicescrape",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMServiceScrape is scrape configuration for endpoints associated with kubernetes service, it generates scrape configuration for vmagent based on selectors. result config will scrape service endpoints",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMServiceScrapeSpec defines the desired state of VMServiceScrape",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"discoveryRole": {
										Description: `DiscoveryRole - defines kubernetes_sd role for objects discovery. by default, its endpoints. can be changed to service or endpointslices. note, that with service setting, you have to use port: "name" and cannot use targetPort for endpoints.`,
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"endpoints\"")},
											{Raw: []byte("\"service\"")},
											{Raw: []byte("\"endpointslices\"")},
										},
										Type: "string",
									},
									"endpoints": {
										Description: "A list of endpoints allowed as part of this ServiceScrape.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "Endpoint defines a scrapeable endpoint serving Prometheus metrics.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"attach_metadata": {
														Description: "AttachMetadata configures metadata attaching from service discovery",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"node": {
																Description: "Node instructs vmagent to add node specific metadata from service discovery Valid for roles: pod, endpoints, endpointslice.",
																Type:        "boolean",
															},
														},
														Type: "object",
													},
													"authorization": {
														Description: "Authorization with http header Authorization",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"credentials": {
																Description: "Reference to the secret with value for authorization",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"credentialsFile": {
																Description: "File with value for authorization",
																Type:        "string",
															},
															"type": {
																Description: "Type of authorization, default to bearer",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"basicAuth": {
														Description: "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"password": {
																Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"password_file": {
																Description: "PasswordFile defines path to password file at disk",
																Type:        "string",
															},
															"username": {
																Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"bearerTokenFile": {
														Description: "File to read bearer token for scraping targets.",
														Type:        "string",
													},
													"bearerTokenSecret": {
														Description: "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service scrape and accessible by the victoria-metrics operator.",
														Nullable:    true,
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"follow_redirects": {
														Description: "FollowRedirects controls redirects for scraping.",
														Type:        "boolean",
													},
													"honorLabels": {
														Description: "HonorLabels chooses the metric's labels on collisions with target labels.",
														Type:        "boolean",
													},
													"honorTimestamps": {
														Description: "HonorTimestamps controls whether vmagent respects the timestamps present in scraped data.",
														Type:        "boolean",
													},
													"interval": {
														Description: "Interval at which metrics should be scraped",
														Type:        "string",
													},
													"metricRelabelConfigs": {
														Description: "MetricRelabelConfigs to apply to samples before ingestion.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"oauth2": {
														Description: "OAuth2 defines auth configuration",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"client_id": {
																Description: "The secret or configmap containing the OAuth2 client id",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"client_secret": {
																Description: "The secret containing the OAuth2 client secret",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"client_secret_file": {
																Description: "ClientSecretFile defines path for client secret file.",
																Type:        "string",
															},
															"endpoint_params": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Parameters to append to the token URL",
																Type:        "object",
															},
															"scopes": {
																Description: "OAuth2 scopes used for the token request",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"token_url": {
																Description: "The URL to fetch the token from",
																MinLength:   vmop.P(int64(1)),
																Type:        "string",
															},
														},
														Required: []string{
															"client_id",
															"token_url",
														},
														Type: "object",
													},
													"params": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
														},
														Description: "Optional HTTP URL parameters",
														Type:        "object",
													},
													"path": {
														Description: "HTTP path to scrape for metrics.",
														Type:        "string",
													},
													"port": {
														Description: "Name of the service port this endpoint refers to. Mutually exclusive with targetPort.",
														Type:        "string",
													},
													"proxyURL": {
														Description: "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
														Type:        "string",
													},
													"relabelConfigs": {
														Description: "RelabelConfigs to apply to samples before scraping. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"sampleLimit": {
														Description: "SampleLimit defines per-endpoint limit on number of scraped samples that will be accepted.",
														Format:      "int64",
														Type:        "integer",
													},
													"scheme": {
														Description: "HTTP scheme to use for scraping.",
														Type:        "string",
													},
													"scrapeTimeout": {
														Description: "Timeout after which the scrape is ended",
														Type:        "string",
													},
													"scrape_interval": {
														Description: "ScrapeInterval is the same as Interval and has priority over it. one of scrape_interval or interval can be used",
														Type:        "string",
													},
													"targetPort": {
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Description:  "Name or number of the pod port this endpoint refers to. Mutually exclusive with port.",
														XIntOrString: true,
													},
													"tlsConfig": {
														Description: "TLSConfig configuration to use when scraping the endpoint",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"ca": {
																Description: "Stuct containing the CA cert to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"caFile": {
																Description: "Path to the CA cert in the container to use for the targets.",
																Type:        "string",
															},
															"cert": {
																Description: "Struct containing the client cert file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"certFile": {
																Description: "Path to the client cert file in the container for the targets.",
																Type:        "string",
															},
															"insecureSkipVerify": {
																Description: "Disable target certificate validation.",
																Type:        "boolean",
															},
															"keyFile": {
																Description: "Path to the client key file in the container for the targets.",
																Type:        "string",
															},
															"keySecret": {
																Description: "Secret containing the client key file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"serverName": {
																Description: "Used to verify the hostname for the targets.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"vm_scrape_params": {
														Description: "VMScrapeParams defines VictoriaMetrics specific scrape parametrs",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"disable_compression": {Type: "boolean"},
															"disable_keep_alive":  {Type: "boolean"},
															"headers": {
																Description: "Headers allows sending custom headers to scrape targets must be in of semicolon separated header with it's value eg: headerName: headerValue vmagent supports since 1.79.0 version",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"metric_relabel_debug": {Type: "boolean"},
															"no_stale_markers":     {Type: "boolean"},
															"proxy_client_config": {
																Description: "ProxyClientConfig configures proxy auth settings for scraping See feature description https://docs.victoriametrics.com/vmagent.html#scraping-targets-via-a-proxy",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"basic_auth": {
																		Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"password": {
																				Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"password_file": {
																				Description: "PasswordFile defines path to password file at disk",
																				Type:        "string",
																			},
																			"username": {
																				Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																		},
																		Type: "object",
																	},
																	"bearer_token": {
																		Description: "SecretKeySelector selects a key of a Secret.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"bearer_token_file": {Type: "string"},
																	"tls_config": {
																		Description: "TLSConfig specifies TLSConfig configuration parameters.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"ca": {
																				Description: "Stuct containing the CA cert to use for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"caFile": {
																				Description: "Path to the CA cert in the container to use for the targets.",
																				Type:        "string",
																			},
																			"cert": {
																				Description: "Struct containing the client cert file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"certFile": {
																				Description: "Path to the client cert file in the container for the targets.",
																				Type:        "string",
																			},
																			"insecureSkipVerify": {
																				Description: "Disable target certificate validation.",
																				Type:        "boolean",
																			},
																			"keyFile": {
																				Description: "Path to the client key file in the container for the targets.",
																				Type:        "string",
																			},
																			"keySecret": {
																				Description: "Secret containing the client key file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"serverName": {
																				Description: "Used to verify the hostname for the targets.",
																				Type:        "string",
																			},
																		},
																		Type: "object",
																	},
																},
																Type: "object",
															},
															"relabel_debug":         {Type: "boolean"},
															"scrape_align_interval": {Type: "string"},
															"scrape_offset":         {Type: "string"},
															"stream_parse":          {Type: "boolean"},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"jobLabel": {
										Description: "The label to use to retrieve the job name from.",
										Type:        "string",
									},
									"namespaceSelector": {
										Description: "Selector to select which namespaces the Endpoints objects are discovered from.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"any": {
												Description: "Boolean describing whether all namespaces are selected in contrast to a list restricting them.",
												Type:        "boolean",
											},
											"matchNames": {
												Description: "List of namespace names.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
										},
										Type: "object",
									},
									"podTargetLabels": {
										Description: "PodTargetLabels transfers labels on the Kubernetes Pod onto the target.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"sampleLimit": {
										Description: "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
										Format:      "int64",
										Type:        "integer",
									},
									"selector": {
										Description: "Selector to select Endpoints objects by corresponding Service labels.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"matchExpressions": {
												Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "key is the label key that the selector applies to.",
																Type:        "string",
															},
															"operator": {
																Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																Type:        "string",
															},
															"values": {
																Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Required: []string{
															"key",
															"operator",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"matchLabels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
												Type:        "object",
											},
										},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"targetLabels": {
										Description: "TargetLabels transfers labels on the Kubernetes Service onto the target.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
								},
								Required: []string{"endpoints"},
								Type:     "object",
							},
							"status": {
								Description: "VMServiceScrapeStatus defines the observed state of VMServiceScrape",
								Type:        "object",
							},
						},
						Required: []string{"spec"},
						Type:     "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMSinglesCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmsingles.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMSingle",
			ListKind: "VMSingleList",
			Plural:   "vmsingles",
			Singular: "vmsingle",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMSingle  is fast, cost-effective and scalable time-series database.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMSingleSpec defines the desired state of VMSingle",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"affinity": {
										Description:            "Affinity If specified, the pod's scheduling constraints.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"configMaps": {
										Description: "ConfigMaps is a list of ConfigMaps in the same namespace as the VMSingle object, which shall be mounted into the VMSingle Pods.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"containers": {
										Description: "Containers property allows to inject additions sidecars or to patch existing containers. It can be useful for proxies, backup, etc.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"dnsConfig": {
										Description: "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{XPreserveUnknownFields: vmop.P(true)}},
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"nameservers": {
												Description: "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"options": {
												Description: "A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "PodDNSConfigOption defines DNS resolver options of a pod.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Required.",
																Type:        "string",
															},
															"value": {Type: "string"},
														},
														Type: "object",
													},
												},
												Type: "array",
											},
											"searches": {
												Description: "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
										},
										Type: "object",
									},
									"dnsPolicy": {
										Description: "DNSPolicy sets DNS policy for the pod",
										Type:        "string",
									},
									"extraArgs": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "ExtraArgs that will be passed to  VMSingle pod for example remoteWrite.tmpDataPath: /tmp",
										Type:        "object",
									},
									"extraEnvs": {
										Description: "ExtraEnvs that will be added to VMSingle pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "EnvVar represents an environment variable present in a Container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
														Type:        "string",
													},
													"value": {
														Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
														Type:        "string",
													},
												},
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"hostAliases": {
										Description: "HostAliases provides mapping for ip and hostname, that would be propagated to pod, cannot be used with HostNetwork.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"hostnames": {
														Description: "Hostnames for the above IP address.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"ip": {
														Description: "IP address of the host file entry.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"hostNetwork": {
										Description: "HostNetwork controls whether the pod may use the node network namespace",
										Type:        "boolean",
									},
									"image": {
										Description: "Image - docker image settings for VMSingle if no specified operator uses default config version",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"pullPolicy": {
												Description: "PullPolicy describes how to pull docker image",
												Type:        "string",
											},
											"repository": {
												Description: "Repository contains name of docker image + it's repository if needed",
												Type:        "string",
											},
											"tag": {
												Description: "Tag contains desired docker image version",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"imagePullSecrets": {
										Description: "ImagePullSecrets An optional list of references to secrets in the same namespace to use for pulling images from registries see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
										},
										Type: "array",
									},
									"initContainers": {
										Description: "InitContainers allows adding initContainers to the pod definition. Those can be used to e.g. fetch secrets for injection into the vmSingle configuration from external sources. Any errors during the execution of an initContainer will lead to a restart of the Pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/ Using initContainers for any use case other then secret fetching is entirely outside the scope of what the maintainers will support and by doing so, you accept that this behaviour may break at any time without notice.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "A single application container that you want to run within a pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"insertPorts": {
										Description: "InsertPorts - additional listen ports for data ingestion.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"graphitePort": {
												Description: "GraphitePort listen port",
												Type:        "string",
											},
											"influxPort": {
												Description: "InfluxPort listen port",
												Type:        "string",
											},
											"openTSDBHTTPPort": {
												Description: "OpenTSDBHTTPPort for http connections.",
												Type:        "string",
											},
											"openTSDBPort": {
												Description: "OpenTSDBPort for tcp and udp listen",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"livenessProbe": {
										Description:            "LivenessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"logFormat": {
										Description: "LogFormat for VMSingle to be configured with.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"default\"")},
											{Raw: []byte("\"json\"")},
										},
										Type: "string",
									},
									"logLevel": {
										Description: "LogLevel for victoria metrics single to be configured with.",
										Enum: []apiextensionsv1.JSON{
											{Raw: []byte("\"INFO\"")},
											{Raw: []byte("\"WARN\"")},
											{Raw: []byte("\"ERROR\"")},
											{Raw: []byte("\"FATAL\"")},
											{Raw: []byte("\"PANIC\"")},
										},
										Type: "string",
									},
									"nodeSelector": {
										AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
											Allows: true,
											Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
										},
										Description: "NodeSelector Define which Nodes the Pods are scheduled on.",
										Type:        "object",
									},
									"podMetadata": {
										Description: "PodMetadata configures Labels and Annotations which are propagated to the VMSingle pods.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"annotations": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
												Type:        "object",
											},
											"labels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
												Type:        "object",
											},
											"name": {
												Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"podSecurityPolicyName": {
										Description: "PodSecurityPolicyName - defines name for podSecurityPolicy in case of empty value, prefixedName will be used.",
										Type:        "string",
									},
									"port": {
										Description: "Port listen port",
										Type:        "string",
									},
									"priorityClassName": {
										Description: "PriorityClassName assigned to the Pods",
										Type:        "string",
									},
									"readinessGates": {
										Description: "ReadinessGates defines pod readiness gates",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "PodReadinessGate contains the reference to a pod condition",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"conditionType": {
														Description: "ConditionType refers to a condition in the pod's condition list with matching type.",
														Type:        "string",
													},
												},
												Required: []string{"conditionType"},
												Type:     "object",
											},
										},
										Type: "array",
									},
									"readinessProbe": {
										Description:            "ReadinessProbe that will be added CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"removePvcAfterDelete": {
										Description: "RemovePvcAfterDelete - if true, controller adds ownership to pvc and after VMSingle objest deletion - pvc will be garbage collected by controller manager",
										Type:        "boolean",
									},
									"replicaCount": {
										Description: "ReplicaCount is the expected size of the VMSingle it can be 0 or 1 if you need more - use vm cluster",
										Format:      "int32",
										Type:        "integer",
									},
									"resources": {
										Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"limits": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
											"requests": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{
														AnyOf: []apiextensionsv1.JSONSchemaProps{
															{Type: "integer"},
															{Type: "string"},
														},
														Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
														XIntOrString: true,
													},
												},
												Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
												Type:        "object",
											},
										},
										Type: "object",
									},
									"retentionPeriod": {
										Description: "RetentionPeriod for the stored metrics Note VictoriaMetrics has data/ and indexdb/ folders metrics from data/ removed eventually as soon as partition leaves retention period reverse index data at indexdb rotates once at the half of configured retention period https://docs.victoriametrics.com/Single-server-VictoriaMetrics.html#retention",
										Type:        "string",
									},
									"runtimeClassName": {
										Description: "RuntimeClassName - defines runtime class for kubernetes pod. https://kubernetes.io/docs/concepts/containers/runtime-class/",
										Type:        "string",
									},
									"schedulerName": {
										Description: "SchedulerName - defines kubernetes scheduler name",
										Type:        "string",
									},
									"secrets": {
										Description: "Secrets is a list of Secrets in the same namespace as the VMSingle object, which shall be mounted into the VMSingle Pods.",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"securityContext": {
										Description:            "SecurityContext holds pod-level security attributes and common container settings. This defaults to the default PodSecurityContext.",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"serviceAccountName": {
										Description: "ServiceAccountName is the name of the ServiceAccount to use to run the VMSingle Pods.",
										Type:        "string",
									},
									"serviceScrapeSpec": {
										Description:            "ServiceScrapeSpec that will be added to vmselect VMServiceScrape spec",
										Required:               []string{"endpoints"},
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"serviceSpec": {
										Description: "ServiceSpec that will be added to vmsingle service spec",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"metadata": {
												Description: "EmbeddedObjectMetadata defines objectMeta for additional service.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"annotations": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
														Type:        "object",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
														Type:        "object",
													},
													"name": {
														Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"spec": {
												Description:            "ServiceSpec describes the attributes that a user creates on a service. More info: https://kubernetes.io/docs/concepts/services-networking/service/",
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Required: []string{"spec"},
										Type:     "object",
									},
									"startupProbe": {
										Description:            "StartupProbe that will be added to CRD pod",
										Type:                   "object",
										XPreserveUnknownFields: vmop.P(true),
									},
									"storage": {
										Description: "Storage is the definition of how storage will be used by the VMSingle by default it`s empty dir",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"accessModes": {
												Description: "accessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1",
												Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
												Type:        "array",
											},
											"dataSource": {
												Description: "dataSource field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the AnyVolumeDataSource feature gate is enabled, this field will always have the same contents as the DataSourceRef field.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"apiGroup": {
														Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
														Type:        "string",
													},
													"kind": {
														Description: "Kind is the type of resource being referenced",
														Type:        "string",
													},
													"name": {
														Description: "Name is the name of resource being referenced",
														Type:        "string",
													},
												},
												Required: []string{
													"kind",
													"name",
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"dataSourceRef": {
												Description: "dataSourceRef specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the DataSource field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (DataSource and DataSourceRef) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between DataSource and DataSourceRef: * While DataSource only allows two specific types of objects, DataSourceRef allows any non-core object, as well as PersistentVolumeClaim objects. * While DataSource ignores disallowed values (dropping them), DataSourceRef preserves all values, and generates an error if a disallowed value is specified. (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"apiGroup": {
														Description: "APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.",
														Type:        "string",
													},
													"kind": {
														Description: "Kind is the type of resource being referenced",
														Type:        "string",
													},
													"name": {
														Description: "Name is the name of resource being referenced",
														Type:        "string",
													},
												},
												Required: []string{
													"kind",
													"name",
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"resources": {
												Description: "resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"limits": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
													"requests": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"selector": {
												Description: "selector is a label query over volumes to consider for binding.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"matchExpressions": {
														Description: "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "key is the label key that the selector applies to.",
																		Type:        "string",
																	},
																	"operator": {
																		Description: "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
																		Type:        "string",
																	},
																	"values": {
																		Description: "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																},
																Required: []string{
																	"key",
																	"operator",
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"matchLabels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: `matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels map is equivalent to an element of matchExpressions, whose key field is "key", the operator is "In", and the values array contains only "value". The requirements are ANDed.`,
														Type:        "object",
													},
												},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"storageClassName": {
												Description: "storageClassName is the name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1",
												Type:        "string",
											},
											"volumeMode": {
												Description: "volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.",
												Type:        "string",
											},
											"volumeName": {
												Description: "volumeName is the binding reference to the PersistentVolume backing this claim.",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"storageDataPath": {
										Description: "StorageDataPath disables spec.storage option and overrides arg for victoria-metrics binary --storageDataPath, its users responsibility to mount proper device into given path.",
										Type:        "string",
									},
									"storageMetadata": {
										Description: "StorageMeta defines annotations and labels attached to PVC for given vmsingle CR",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"annotations": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
												Type:        "object",
											},
											"labels": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "Labels Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
												Type:        "object",
											},
											"name": {
												Description: "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
												Type:        "string",
											},
										},
										Type: "object",
									},
									"streamAggrConfig": {
										Description: "StreamAggrConfig defines stream aggregation configuration for VMSingle",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"dedupInterval": {
												Description: "Allows setting different de-duplication intervals per each configured remote storage",
												Type:        "string",
											},
											"keepInput": {
												Description: "Allows writing both raw and aggregate data",
												Type:        "boolean",
											},
											"rules": {
												Description: "Stream aggregation rules",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "StreamAggrRule defines the rule in stream aggregation config",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"by": {
																Description: `
By is an optional list of labels for grouping input series. 
 See also Without. 
 If neither By nor Without are set, then the Outputs are calculated individually per each input time series.
`,
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
															"input_relabel_configs": {
																Description: "InputRelabelConfigs is an optional relabeling rules, which are applied on the input before aggregation.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"action": {
																				Description: "Action to perform based on regex matching. Default is 'replace'",
																				Type:        "string",
																			},
																			"if": {
																				Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																				Type:        "string",
																			},
																			"labels": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																				},
																				Description: "Labels is used together with Match for `action: graphite`",
																				Type:        "object",
																			},
																			"match": {
																				Description: "Match is used together with Labels for `action: graphite`",
																				Type:        "string",
																			},
																			"modulus": {
																				Description: "Modulus to take of the hash of the source label values.",
																				Format:      "int64",
																				Type:        "integer",
																			},
																			"regex": {
																				Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																				Type:        "string",
																			},
																			"replacement": {
																				Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																				Type:        "string",
																			},
																			"separator": {
																				Description: "Separator placed between concatenated source label values. default is ';'.",
																				Type:        "string",
																			},
																			"sourceLabels": {
																				Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																				Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:        "array",
																			},
																			"source_labels": {
																				Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																				Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:        "array",
																			},
																			"targetLabel": {
																				Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																				Type:        "string",
																			},
																			"target_label": {
																				Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																				Type:        "string",
																			},
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"interval": {
																Description: "Interval is the interval between aggregations.",
																Type:        "string",
															},
															"match": {
																Description: `
Match is a label selector for filtering time series for the given selector. 
 If the match isn't set, then all the input time series are processed.
`,
																Type: "string",
															},
															"output_relabel_configs": {
																Description: "OutputRelabelConfigs is an optional relabeling rules, which are applied on the aggregated output before being sent to remote storage.",
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{
																	Schema: &apiextensionsv1.JSONSchemaProps{
																		Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"action": {
																				Description: "Action to perform based on regex matching. Default is 'replace'",
																				Type:        "string",
																			},
																			"if": {
																				Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																				Type:        "string",
																			},
																			"labels": {
																				AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																					Allows: true,
																					Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																				},
																				Description: "Labels is used together with Match for `action: graphite`",
																				Type:        "object",
																			},
																			"match": {
																				Description: "Match is used together with Labels for `action: graphite`",
																				Type:        "string",
																			},
																			"modulus": {
																				Description: "Modulus to take of the hash of the source label values.",
																				Format:      "int64",
																				Type:        "integer",
																			},
																			"regex": {
																				Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																				Type:        "string",
																			},
																			"replacement": {
																				Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																				Type:        "string",
																			},
																			"separator": {
																				Description: "Separator placed between concatenated source label values. default is ';'.",
																				Type:        "string",
																			},
																			"sourceLabels": {
																				Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																				Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:        "array",
																			},
																			"source_labels": {
																				Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																				Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																				Type:        "array",
																			},
																			"targetLabel": {
																				Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																				Type:        "string",
																			},
																			"target_label": {
																				Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																				Type:        "string",
																			},
																		},
																		Type: "object",
																	},
																},
																Type: "array",
															},
															"outputs": {
																Description: `
Outputs is a list of output aggregate functions to produce. 
 The following names are allowed: 
 - total - aggregates input counters - increase - counts the increase over input counters - count_series - counts the input series - count_samples - counts the input samples - sum_samples - sums the input samples - last - the last biggest sample value - min - the minimum sample value - max - the maximum sample value - avg - the average value across all the samples - stddev - standard deviation across all the samples - stdvar - standard variance across all the samples - histogram_bucket - creates VictoriaMetrics histogram for input samples - quantiles(phi1, ..., phiN) - quantiles' estimation for phi in the range [0..1] 
 The output time series will have the following names: 
 input_name:aggr_<interval>_<output>
`,
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
															"without": {
																Description: `
Without is an optional list of labels, which must be excluded when grouping input series. 
 See also By. 
 If neither By nor Without are set, then the Outputs are calculated individually per each input time series.
`,
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
														},
														Required: []string{
															"interval",
															"outputs",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
										},
										Required: []string{"rules"},
										Type:     "object",
									},
									"terminationGracePeriodSeconds": {
										Description: "TerminationGracePeriodSeconds period for container graceful termination",
										Format:      "int64",
										Type:        "integer",
									},
									"tolerations": {
										Description: "Tolerations If specified, the pod's tolerations.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"effect": {
														Description: "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
														Type:        "string",
													},
													"key": {
														Description: "Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.",
														Type:        "string",
													},
													"operator": {
														Description: "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
														Type:        "string",
													},
													"tolerationSeconds": {
														Description: "TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
														Format:      "int64",
														Type:        "integer",
													},
													"value": {
														Description: "Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"topologySpreadConstraints": {
										Description: "TopologySpreadConstraints embedded kubernetes pod configuration option, controls how pods are spread across your cluster among failure-domains such as regions, zones, nodes, and other user-defined topology domains https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "TopologySpreadConstraint specifies how to spread matching pods among the given topology.",
												Required: []string{
													"maxSkew",
													"topologyKey",
													"whenUnsatisfiable",
												},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
									"vmBackup": {
										Description: "VMBackup configuration for backup",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"acceptEULA": {
												Description: "AcceptEULA accepts enterprise feature usage, must be set to true. otherwise backupmanager cannot be added to single/cluster version. https://victoriametrics.com/legal/eula/",
												Type:        "boolean",
											},
											"concurrency": {
												Description: "Defines number of concurrent workers. Higher concurrency may reduce backup duration (default 10)",
												Format:      "int32",
												Type:        "integer",
											},
											"credentialsSecret": {
												Description: "CredentialsSecret is secret in the same namespace for access to remote storage The secret is mounted into /etc/vm/creds.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"key": {
														Description: "The key of the secret to select from.  Must be a valid secret key.",
														Type:        "string",
													},
													"name": {
														Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
														Type:        "string",
													},
													"optional": {
														Description: "Specify whether the Secret or its key must be defined",
														Type:        "boolean",
													},
												},
												Required: []string{"key"},
												Type:     "object",
												XMapType: vmop.P("atomic"),
											},
											"customS3Endpoint": {
												Description: "Custom S3 endpoint for use with S3-compatible storages (e.g. MinIO). S3 is used if not set",
												Type:        "string",
											},
											"destination": {
												Description: "Defines destination for backup",
												Type:        "string",
											},
											"destinationDisableSuffixAdd": {
												Description: "DestinationDisableSuffixAdd - disables suffix adding for cluster version backups each vmstorage backup must have unique backup folder so operator adds POD_NAME as suffix for backup destination folder.",
												Type:        "boolean",
											},
											"disableDaily": {
												Description: "Defines if daily backups disabled (default false)",
												Type:        "boolean",
											},
											"disableHourly": {
												Description: "Defines if hourly backups disabled (default false)",
												Type:        "boolean",
											},
											"disableMonthly": {
												Description: "Defines if monthly backups disabled (default false)",
												Type:        "boolean",
											},
											"disableWeekly": {
												Description: "Defines if weekly backups disabled (default false)",
												Type:        "boolean",
											},
											"extraArgs": {
												AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
													Allows: true,
													Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
												},
												Description: "extra args like maxBytesPerSecond default 0",
												Type:        "object",
											},
											"extraEnvs": {
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "EnvVar represents an environment variable present in a Container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"name": {
																Description: "Name of the environment variable. Must be a C_IDENTIFIER.",
																Type:        "string",
															},
															"value": {
																Description: `Variable references $(VAR_NAME) are expanded using the previously defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. Double $$ are reduced to a single $, which allows for escaping the $(VAR_NAME) syntax: i.e. "$$(VAR_NAME)" will produce the string literal "$(VAR_NAME)". Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".`,
																Type:        "string",
															},
															"valueFrom": {
																Description: "Source for the environment variable's value. Cannot be used if value is not empty.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMapKeyRef": {
																		Description: "Selects a key of a ConfigMap.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"fieldRef": {
																		Description: "Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"apiVersion": {
																				Description: `Version of the schema the FieldPath is written in terms of, defaults to "v1".`,
																				Type:        "string",
																			},
																			"fieldPath": {
																				Description: "Path of the field to select in the specified API version.",
																				Type:        "string",
																			},
																		},
																		Required: []string{"fieldPath"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"resourceFieldRef": {
																		Description: "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"containerName": {
																				Description: "Container name: required for volumes, optional for env vars",
																				Type:        "string",
																			},
																			"divisor": {
																				AnyOf: []apiextensionsv1.JSONSchemaProps{
																					{Type: "integer"},
																					{Type: "string"},
																				},
																				Description:  `Specifies the output format of the exposed resources, defaults to "1"`,
																				Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																				XIntOrString: true,
																			},
																			"resource": {
																				Description: "Required: resource to select",
																				Type:        "string",
																			},
																		},
																		Required: []string{"resource"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secretKeyRef": {
																		Description: "Selects a key of a secret in the pod's namespace",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
														},
														Required: []string{"name"},
														Type:     "object",
													},
												},
												Type: "array",
											},
											"image": {
												Description: "Image - docker image settings for VMBackuper",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"pullPolicy": {
														Description: "PullPolicy describes how to pull docker image",
														Type:        "string",
													},
													"repository": {
														Description: "Repository contains name of docker image + it's repository if needed",
														Type:        "string",
													},
													"tag": {
														Description: "Tag contains desired docker image version",
														Type:        "string",
													},
												},
												Type: "object",
											},
											"logFormat": {
												Description: "LogFormat for VMSelect to be configured with. default or json",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"default\"")},
													{Raw: []byte("\"json\"")},
												},
												Type: "string",
											},
											"logLevel": {
												Description: "LogLevel for VMSelect to be configured with.",
												Enum: []apiextensionsv1.JSON{
													{Raw: []byte("\"INFO\"")},
													{Raw: []byte("\"WARN\"")},
													{Raw: []byte("\"ERROR\"")},
													{Raw: []byte("\"FATAL\"")},
													{Raw: []byte("\"PANIC\"")},
												},
												Type: "string",
											},
											"port": {
												Description: "Port for health check connections",
												Type:        "string",
											},
											"resources": {
												Description: "Resources container resource request and limits, https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/ if not defined default resources from operator config will be used",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"limits": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
													"requests": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																AnyOf: []apiextensionsv1.JSONSchemaProps{
																	{Type: "integer"},
																	{Type: "string"},
																},
																Pattern:      "^(\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\\+|-)?(([0-9]+(\\.[0-9]*)?)|(\\.[0-9]+))))?$",
																XIntOrString: true,
															},
														},
														Description: "Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/",
														Type:        "object",
													},
												},
												Type: "object",
											},
											"restore": {
												Description: "Restore Allows to enable restore options for pod Read more: https://docs.victoriametrics.com/vmbackupmanager.html#restore-commands",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"onStart": {
														Description: "OnStart defines configuration for restore on pod start",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"enabled": {
																Description: "Enabled defines if restore on start enabled",
																Type:        "boolean",
															},
														},
														Type: "object",
													},
												},
												Type: "object",
											},
											"snapshotCreateURL": {
												Description: "SnapshotCreateURL overwrites url for snapshot create",
												Type:        "string",
											},
											"snapshotDeleteURL": {
												Description: "SnapShotDeleteURL overwrites url for snapshot delete",
												Type:        "string",
											},
											"volumeMounts": {
												Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the vmbackupmanager container, that are generated as a result of StorageSpec objects.",
												Items: &apiextensionsv1.JSONSchemaPropsOrArray{
													Schema: &apiextensionsv1.JSONSchemaProps{
														Description: "VolumeMount describes a mounting of a Volume within a container.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"mountPath": {
																Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
																Type:        "string",
															},
															"mountPropagation": {
																Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
																Type:        "string",
															},
															"name": {
																Description: "This must match the Name of a Volume.",
																Type:        "string",
															},
															"readOnly": {
																Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
																Type:        "boolean",
															},
															"subPath": {
																Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
																Type:        "string",
															},
															"subPathExpr": {
																Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
																Type:        "string",
															},
														},
														Required: []string{
															"mountPath",
															"name",
														},
														Type: "object",
													},
												},
												Type: "array",
											},
										},
										Required: []string{"acceptEULA"},
										Type:     "object",
									},
									"volumeMounts": {
										Description: "VolumeMounts allows configuration of additional VolumeMounts on the output Deployment definition. VolumeMounts specified will be appended to other VolumeMounts in the VMSingle container, that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "VolumeMount describes a mounting of a Volume within a container.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"mountPath": {
														Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
														Type:        "string",
													},
													"mountPropagation": {
														Description: "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.",
														Type:        "string",
													},
													"name": {
														Description: "This must match the Name of a Volume.",
														Type:        "string",
													},
													"readOnly": {
														Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
														Type:        "boolean",
													},
													"subPath": {
														Description: `Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).`,
														Type:        "string",
													},
													"subPathExpr": {
														Description: `Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.`,
														Type:        "string",
													},
												},
												Required: []string{
													"mountPath",
													"name",
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"volumes": {
										Description: "Volumes allows configuration of additional volumes on the output deploy definition. Volumes specified will be appended to other volumes that are generated as a result of StorageSpec objects.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description:            "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
												Required:               []string{"name"},
												Type:                   "object",
												XPreserveUnknownFields: vmop.P(true),
											},
										},
										Type: "array",
									},
								},
								Required: []string{"retentionPeriod"},
								Type:     "object",
							},
							"status": {
								Description: "VMSingleStatus defines the observed state of VMSingle",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"availableReplicas": {
										Description: "AvailableReplicas Total number of available pods (ready for at least minReadySeconds) targeted by this VMAlert cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"replicas": {
										Description: "ReplicaCount Total number of non-terminated pods targeted by this VMAlert cluster (their labels match the selector).",
										Format:      "int32",
										Type:        "integer",
									},
									"unavailableReplicas": {
										Description: "UnavailableReplicas Total number of unavailable pods targeted by this VMAlert cluster.",
										Format:      "int32",
										Type:        "integer",
									},
									"updatedReplicas": {
										Description: "UpdatedReplicas Total number of non-terminated pods targeted by this VMAlert cluster that have the desired version spec.",
										Format:      "int32",
										Type:        "integer",
									},
								},
								Required: []string{
									"availableReplicas",
									"replicas",
									"unavailableReplicas",
									"updatedReplicas",
								},
								Type: "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMStaticScrapesCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmstaticscrapes.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMStaticScrape",
			ListKind: "VMStaticScrapeList",
			Plural:   "vmstaticscrapes",
			Singular: "vmstaticscrape",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMStaticScrape  defines static targets configuration for scraping.",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMStaticScrapeSpec defines the desired state of VMStaticScrape.",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"jobName": {
										Description: "JobName name of job.",
										Type:        "string",
									},
									"sampleLimit": {
										Description: "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
										Format:      "int64",
										Type:        "integer",
									},
									"targetEndpoints": {
										Description: "A list of target endpoints to scrape metrics from.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "TargetEndpoint defines single static target endpoint.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"authorization": {
														Description: "Authorization with http header Authorization",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"credentials": {
																Description: "Reference to the secret with value for authorization",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"credentialsFile": {
																Description: "File with value for authorization",
																Type:        "string",
															},
															"type": {
																Description: "Type of authorization, default to bearer",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"basicAuth": {
														Description: "BasicAuth allow an endpoint to authenticate over basic authentication More info: https://prometheus.io/docs/operating/configuration/#endpoints",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"password": {
																Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"password_file": {
																Description: "PasswordFile defines path to password file at disk",
																Type:        "string",
															},
															"username": {
																Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
														},
														Type: "object",
													},
													"bearerTokenFile": {
														Description: "File to read bearer token for scraping targets.",
														Type:        "string",
													},
													"bearerTokenSecret": {
														Description: "Secret to mount to read bearer token for scraping targets. The secret needs to be in the same namespace as the service scrape and accessible by the victoria-metrics operator.",
														Nullable:    true,
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"key": {
																Description: "The key of the secret to select from.  Must be a valid secret key.",
																Type:        "string",
															},
															"name": {
																Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																Type:        "string",
															},
															"optional": {
																Description: "Specify whether the Secret or its key must be defined",
																Type:        "boolean",
															},
														},
														Required: []string{"key"},
														Type:     "object",
														XMapType: vmop.P("atomic"),
													},
													"follow_redirects": {
														Description: "FollowRedirects controls redirects for scraping.",
														Type:        "boolean",
													},
													"honorLabels": {
														Description: "HonorLabels chooses the metric's labels on collisions with target labels.",
														Type:        "boolean",
													},
													"honorTimestamps": {
														Description: "HonorTimestamps controls whether vmagent respects the timestamps present in scraped data.",
														Type:        "boolean",
													},
													"interval": {
														Description: "Interval at which metrics should be scraped",
														Type:        "string",
													},
													"labels": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
														},
														Description: "Labels static labels for targets.",
														Type:        "object",
													},
													"metricRelabelConfigs": {
														Description: "MetricRelabelConfigs to apply to samples before ingestion.",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"oauth2": {
														Description: "OAuth2 defines auth configuration",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"client_id": {
																Description: "The secret or configmap containing the OAuth2 client id",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"client_secret": {
																Description: "The secret containing the OAuth2 client secret",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"client_secret_file": {
																Description: "ClientSecretFile defines path for client secret file.",
																Type:        "string",
															},
															"endpoint_params": {
																AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																	Allows: true,
																	Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																},
																Description: "Parameters to append to the token URL",
																Type:        "object",
															},
															"scopes": {
																Description: "OAuth2 scopes used for the token request",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"token_url": {
																Description: "The URL to fetch the token from",
																MinLength:   vmop.P(int64(1)),
																Type:        "string",
															},
														},
														Required: []string{
															"client_id",
															"token_url",
														},
														Type: "object",
													},
													"params": {
														AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
															Allows: true,
															Schema: &apiextensionsv1.JSONSchemaProps{
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
														},
														Description: "Optional HTTP URL parameters",
														Type:        "object",
													},
													"path": {
														Description: "HTTP path to scrape for metrics.",
														Type:        "string",
													},
													"port": {
														Description: "Default port for target.",
														Type:        "string",
													},
													"proxyURL": {
														Description: "ProxyURL eg http://proxyserver:2195 Directs scrapes to proxy through this endpoint.",
														Type:        "string",
													},
													"relabelConfigs": {
														Description: "RelabelConfigs to apply to samples before scraping. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config",
														Items: &apiextensionsv1.JSONSchemaPropsOrArray{
															Schema: &apiextensionsv1.JSONSchemaProps{
																Description: "RelabelConfig allows dynamic rewriting of the label set, being applied to samples before ingestion. It defines `<metric_relabel_configs>`-section of configuration. More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#metric_relabel_configs",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"action": {
																		Description: "Action to perform based on regex matching. Default is 'replace'",
																		Type:        "string",
																	},
																	"if": {
																		Description: `If represents metricsQL match expression: '{__name__=~"foo_.*"}'`,
																		Type:        "string",
																	},
																	"labels": {
																		AdditionalProperties: &apiextensionsv1.JSONSchemaPropsOrBool{
																			Allows: true,
																			Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"},
																		},
																		Description: "Labels is used together with Match for `action: graphite`",
																		Type:        "object",
																	},
																	"match": {
																		Description: "Match is used together with Labels for `action: graphite`",
																		Type:        "string",
																	},
																	"modulus": {
																		Description: "Modulus to take of the hash of the source label values.",
																		Format:      "int64",
																		Type:        "integer",
																	},
																	"regex": {
																		Description: "Regular expression against which the extracted value is matched. Default is '(.*)'",
																		Type:        "string",
																	},
																	"replacement": {
																		Description: "Replacement value against which a regex replace is performed if the regular expression matches. Regex capture groups are available. Default is '$1'",
																		Type:        "string",
																	},
																	"separator": {
																		Description: "Separator placed between concatenated source label values. default is ';'.",
																		Type:        "string",
																	},
																	"sourceLabels": {
																		Description: "The source labels select values from existing labels. Their content is concatenated using the configured separator and matched against the configured regular expression for the replace, keep, and drop actions.",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"source_labels": {
																		Description: "UnderScoreSourceLabels - additional form of source labels source_labels for compatibility with original relabel config. if set  both sourceLabels and source_labels, sourceLabels has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																		Type:        "array",
																	},
																	"targetLabel": {
																		Description: "Label to which the resulting value is written in a replace action. It is mandatory for replace actions. Regex capture groups are available.",
																		Type:        "string",
																	},
																	"target_label": {
																		Description: "UnderScoreTargetLabel - additional form of target label - target_label for compatibility with original relabel config. if set  both targetLabel and target_label, targetLabel has priority. for details https://github.com/VictoriaMetrics/operator/issues/131",
																		Type:        "string",
																	},
																},
																Type: "object",
															},
														},
														Type: "array",
													},
													"sampleLimit": {
														Description: "SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.",
														Format:      "int64",
														Type:        "integer",
													},
													"scheme": {
														Description: "HTTP scheme to use for scraping.",
														Type:        "string",
													},
													"scrapeTimeout": {
														Description: "Timeout after which the scrape is ended",
														Type:        "string",
													},
													"scrape_interval": {
														Description: "ScrapeInterval is the same as Interval and has priority over it. one of scrape_interval or interval can be used",
														Type:        "string",
													},
													"targets": {
														Description: `Targets static targets addresses in form of ["192.122.55.55:9100","some-name:9100"].`,
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"tlsConfig": {
														Description: "TLSConfig configuration to use when scraping the endpoint",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"ca": {
																Description: "Stuct containing the CA cert to use for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"caFile": {
																Description: "Path to the CA cert in the container to use for the targets.",
																Type:        "string",
															},
															"cert": {
																Description: "Struct containing the client cert file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"configMap": {
																		Description: "ConfigMap containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key to select.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the ConfigMap or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"secret": {
																		Description: "Secret containing data to use for the targets.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																},
																Type: "object",
															},
															"certFile": {
																Description: "Path to the client cert file in the container for the targets.",
																Type:        "string",
															},
															"insecureSkipVerify": {
																Description: "Disable target certificate validation.",
																Type:        "boolean",
															},
															"keyFile": {
																Description: "Path to the client key file in the container for the targets.",
																Type:        "string",
															},
															"keySecret": {
																Description: "Secret containing the client key file for the targets.",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"key": {
																		Description: "The key of the secret to select from.  Must be a valid secret key.",
																		Type:        "string",
																	},
																	"name": {
																		Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																		Type:        "string",
																	},
																	"optional": {
																		Description: "Specify whether the Secret or its key must be defined",
																		Type:        "boolean",
																	},
																},
																Required: []string{"key"},
																Type:     "object",
																XMapType: vmop.P("atomic"),
															},
															"serverName": {
																Description: "Used to verify the hostname for the targets.",
																Type:        "string",
															},
														},
														Type: "object",
													},
													"vm_scrape_params": {
														Description: "VMScrapeParams defines VictoriaMetrics specific scrape parametrs",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"disable_compression": {Type: "boolean"},
															"disable_keep_alive":  {Type: "boolean"},
															"headers": {
																Description: "Headers allows sending custom headers to scrape targets must be in of semicolon separated header with it's value eg: headerName: headerValue vmagent supports since 1.79.0 version",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
															"metric_relabel_debug": {Type: "boolean"},
															"no_stale_markers":     {Type: "boolean"},
															"proxy_client_config": {
																Description: "ProxyClientConfig configures proxy auth settings for scraping See feature description https://docs.victoriametrics.com/vmagent.html#scraping-targets-via-a-proxy",
																Properties: map[string]apiextensionsv1.JSONSchemaProps{
																	"basic_auth": {
																		Description: "BasicAuth allow an endpoint to authenticate over basic authentication",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"password": {
																				Description: "The secret in the service scrape namespace that contains the password for authentication. It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"password_file": {
																				Description: "PasswordFile defines path to password file at disk",
																				Type:        "string",
																			},
																			"username": {
																				Description: "The secret in the service scrape namespace that contains the username for authentication. It must be at them same namespace as CRD",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																		},
																		Type: "object",
																	},
																	"bearer_token": {
																		Description: "SecretKeySelector selects a key of a Secret.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"key": {
																				Description: "The key of the secret to select from.  Must be a valid secret key.",
																				Type:        "string",
																			},
																			"name": {
																				Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																				Type:        "string",
																			},
																			"optional": {
																				Description: "Specify whether the Secret or its key must be defined",
																				Type:        "boolean",
																			},
																		},
																		Required: []string{"key"},
																		Type:     "object",
																		XMapType: vmop.P("atomic"),
																	},
																	"bearer_token_file": {Type: "string"},
																	"tls_config": {
																		Description: "TLSConfig specifies TLSConfig configuration parameters.",
																		Properties: map[string]apiextensionsv1.JSONSchemaProps{
																			"ca": {
																				Description: "Stuct containing the CA cert to use for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"caFile": {
																				Description: "Path to the CA cert in the container to use for the targets.",
																				Type:        "string",
																			},
																			"cert": {
																				Description: "Struct containing the client cert file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"configMap": {
																						Description: "ConfigMap containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key to select.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the ConfigMap or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																					"secret": {
																						Description: "Secret containing data to use for the targets.",
																						Properties: map[string]apiextensionsv1.JSONSchemaProps{
																							"key": {
																								Description: "The key of the secret to select from.  Must be a valid secret key.",
																								Type:        "string",
																							},
																							"name": {
																								Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																								Type:        "string",
																							},
																							"optional": {
																								Description: "Specify whether the Secret or its key must be defined",
																								Type:        "boolean",
																							},
																						},
																						Required: []string{"key"},
																						Type:     "object",
																						XMapType: vmop.P("atomic"),
																					},
																				},
																				Type: "object",
																			},
																			"certFile": {
																				Description: "Path to the client cert file in the container for the targets.",
																				Type:        "string",
																			},
																			"insecureSkipVerify": {
																				Description: "Disable target certificate validation.",
																				Type:        "boolean",
																			},
																			"keyFile": {
																				Description: "Path to the client key file in the container for the targets.",
																				Type:        "string",
																			},
																			"keySecret": {
																				Description: "Secret containing the client key file for the targets.",
																				Properties: map[string]apiextensionsv1.JSONSchemaProps{
																					"key": {
																						Description: "The key of the secret to select from.  Must be a valid secret key.",
																						Type:        "string",
																					},
																					"name": {
																						Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
																						Type:        "string",
																					},
																					"optional": {
																						Description: "Specify whether the Secret or its key must be defined",
																						Type:        "boolean",
																					},
																				},
																				Required: []string{"key"},
																				Type:     "object",
																				XMapType: vmop.P("atomic"),
																			},
																			"serverName": {
																				Description: "Used to verify the hostname for the targets.",
																				Type:        "string",
																			},
																		},
																		Type: "object",
																	},
																},
																Type: "object",
															},
															"relabel_debug":         {Type: "boolean"},
															"scrape_align_interval": {Type: "string"},
															"scrape_offset":         {Type: "string"},
															"stream_parse":          {Type: "boolean"},
														},
														Type: "object",
													},
												},
												Required: []string{"targets"},
												Type:     "object",
											},
										},
										Type: "array",
									},
								},
								Required: []string{"targetEndpoints"},
								Type:     "object",
							},
							"status": {
								Description: "VMStaticScrapeStatus defines the observed state of VMStaticScrape",
								Type:        "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}

var VMUsersCRD = &apiextensionsv1.CustomResourceDefinition{
	ObjectMeta: metav1.ObjectMeta{
		Annotations: map[string]string{"controller-gen.kubebuilder.io/version": "v0.10.0"},
		Name:        "vmusers.operator.victoriametrics.com",
	},
	Spec: apiextensionsv1.CustomResourceDefinitionSpec{
		Group: "operator.victoriametrics.com",
		Names: apiextensionsv1.CustomResourceDefinitionNames{
			Kind:     "VMUser",
			ListKind: "VMUserList",
			Plural:   "vmusers",
			Singular: "vmuser",
		},
		Scope: apiextensionsv1.ResourceScope("Namespaced"),
		Versions: []apiextensionsv1.CustomResourceDefinitionVersion{
			{
				Name: "v1beta1",
				Schema: &apiextensionsv1.CustomResourceValidation{
					OpenAPIV3Schema: &apiextensionsv1.JSONSchemaProps{
						Description: "VMUser is the Schema for the vmusers API",
						Properties: map[string]apiextensionsv1.JSONSchemaProps{
							"apiVersion": {
								Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
								Type:        "string",
							},
							"kind": {
								Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
								Type:        "string",
							},
							"metadata": {Type: "object"},
							"spec": {
								Description: "VMUserSpec defines the desired state of VMUser",
								Properties: map[string]apiextensionsv1.JSONSchemaProps{
									"bearerToken": {
										Description: "BearerToken Authorization header value for accessing protected endpoint.",
										Type:        "string",
									},
									"default_url": {
										Description: "DefaultURLs backend url for non-matching paths filter usually used for default backend with error message",
										Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
										Type:        "array",
									},
									"generatePassword": {
										Description: "GeneratePassword instructs operator to generate password for user if spec.password if empty.",
										Type:        "boolean",
									},
									"name": {
										Description: "Name of the VMUser object.",
										Type:        "string",
									},
									"password": {
										Description: "Password basic auth password for accessing protected endpoint.",
										Type:        "string",
									},
									"passwordRef": {
										Description: "PasswordRef allows fetching password from user-create secret by its name and key.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"key": {
												Description: "The key of the secret to select from.  Must be a valid secret key.",
												Type:        "string",
											},
											"name": {
												Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
												Type:        "string",
											},
											"optional": {
												Description: "Specify whether the Secret or its key must be defined",
												Type:        "boolean",
											},
										},
										Required: []string{"key"},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"targetRefs": {
										Description: "TargetRefs - reference to endpoints, which user may access.",
										Items: &apiextensionsv1.JSONSchemaPropsOrArray{
											Schema: &apiextensionsv1.JSONSchemaProps{
												Description: "TargetRef describes target for user traffic forwarding. one of target types can be chosen: crd or static per targetRef. user can define multiple targetRefs with different ref Types.",
												Properties: map[string]apiextensionsv1.JSONSchemaProps{
													"crd": {
														Description: "CRD describes exist operator's CRD object, operator generates access url based on CRD params.",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"kind": {
																Description: "Kind one of: VMAgent VMAlert VMCluster VMSingle or VMAlertManager",
																Type:        "string",
															},
															"name": {
																Description: "Name target CRD object name",
																Type:        "string",
															},
															"namespace": {
																Description: "Namespace target CRD object namespace.",
																Type:        "string",
															},
														},
														Required: []string{
															"kind",
															"name",
															"namespace",
														},
														Type: "object",
													},
													"headers": {
														Description: `Headers represent additional http headers, that vmauth uses in form of ["header_key: header_value"] multiple values for header key: ["header_key: value1,value2"] it's available since 1.68.0 version of vmauth`,
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"ip_filters": {
														Description: "IPFilters defines per target src ip filters supported only with enterprise version of vmauth https://docs.victoriametrics.com/vmauth.html#ip-filters",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"allow_list": {
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
															"deny_list": {
																Items: &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:  "array",
															},
														},
														Type: "object",
													},
													"paths": {
														Description: "Paths - matched path to route.",
														Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
														Type:        "array",
													},
													"static": {
														Description: "Static - user defined url for traffic forward, for instance http://vmsingle:8429",
														Properties: map[string]apiextensionsv1.JSONSchemaProps{
															"url": {
																Description: "URL http url for given staticRef.",
																Type:        "string",
															},
															"urls": {
																Description: "URLs allows setting multiple urls for load-balancing at vmauth-side.",
																Items:       &apiextensionsv1.JSONSchemaPropsOrArray{Schema: &apiextensionsv1.JSONSchemaProps{Type: "string"}},
																Type:        "array",
															},
														},
														Type: "object",
													},
													"target_path_suffix": {
														Description: "QueryParams []string `json:\"queryParams,omitempty\"` TargetPathSuffix allows to add some suffix to the target path It allows to hide tenant configuration from user with crd as ref. it also may contain any url encoded params.",
														Type:        "string",
													},
												},
												Type: "object",
											},
										},
										Type: "array",
									},
									"tokenRef": {
										Description: "TokenRef allows fetching token from user-created secrets by its name and key.",
										Properties: map[string]apiextensionsv1.JSONSchemaProps{
											"key": {
												Description: "The key of the secret to select from.  Must be a valid secret key.",
												Type:        "string",
											},
											"name": {
												Description: "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?",
												Type:        "string",
											},
											"optional": {
												Description: "Specify whether the Secret or its key must be defined",
												Type:        "boolean",
											},
										},
										Required: []string{"key"},
										Type:     "object",
										XMapType: vmop.P("atomic"),
									},
									"username": {
										Description: "UserName basic auth user name for accessing protected endpoint, will be replaced with metadata.name of VMUser if omitted.",
										Type:        "string",
									},
								},
								Required: []string{"targetRefs"},
								Type:     "object",
							},
							"status": {
								Description: "VMUserStatus defines the observed state of VMUser",
								Type:        "object",
							},
						},
						Type: "object",
					},
				},
				Served:       true,
				Storage:      true,
				Subresources: &apiextensionsv1.CustomResourceSubresources{},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apiextensions.k8s.io/v1",
		Kind:       "CustomResourceDefinition",
	},
}
