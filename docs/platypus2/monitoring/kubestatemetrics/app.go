// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package ksm

import (
	"context"
	"errors"
	"os"
	"os/exec"

	prometheusoperatorprometheusoperatorpkgapismonitoringv1 "github.com/prometheus-operator/prometheus-operator/pkg/apis/monitoring/v1"
	kube "github.com/volvo-cars/lingon/pkg/kube"
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
)

// validate the struct implements the interface
var _ kube.Exporter = (*KubeStateMetrics)(nil)

// KubeStateMetrics contains kubernetes manifests
type KubeStateMetrics struct {
	kube.App

	KsmCR             *rbacv1.ClusterRole
	KsmCRB            *rbacv1.ClusterRoleBinding
	KsmDeploy         *appsv1.Deployment
	KsmSA             *corev1.ServiceAccount
	KsmSVC            *corev1.Service
	KsmServiceMonitor *prometheusoperatorprometheusoperatorpkgapismonitoringv1.ServiceMonitor
}

// New creates a new KubeStateMetrics
func New() *KubeStateMetrics {
	return &KubeStateMetrics{
		KsmCR:             KsmCR,
		KsmCRB:            KsmCRB,
		KsmDeploy:         KsmDeploy,
		KsmSA:             KsmSA,
		KsmSVC:            KsmSVC,
		KsmServiceMonitor: KsmServiceMonitor,
	}
}

// Apply applies the kubernetes objects to the cluster
func (a *KubeStateMetrics) Apply(ctx context.Context) error {
	return Apply(ctx, a)
}

// Export exports the kubernetes objects to YAML files in the given directory
func (a *KubeStateMetrics) Export(dir string) error {
	return kube.Export(a, kube.WithExportOutputDirectory(dir))
}

// Apply applies the kubernetes objects contained in Exporter to the cluster
func Apply(ctx context.Context, km kube.Exporter) error {
	cmd := exec.CommandContext(ctx, "kubectl", "apply", "-f", "-")
	cmd.Env = os.Environ()        // inherit environment in case we need to use kubectl from a container
	stdin, err := cmd.StdinPipe() // pipe to pass data to kubectl
	if err != nil {
		return err
	}

	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	go func() {
		defer func() {
			err = errors.Join(err, stdin.Close())
		}()
		if errEW := kube.Export(km, kube.WithExportWriter(stdin), kube.WithExportAsSingleFile("stdin")); errEW != nil {
			err = errors.Join(err, errEW)
		}
	}()

	if errS := cmd.Start(); errS != nil {
		return errors.Join(err, errS)
	}

	// waits for the command to exit and waits for any copying
	// to stdin or copying from stdout or stderr to complete
	return errors.Join(err, cmd.Wait())
}

// P converts T to *T, useful for basic types
func P[T any](t T) *T {
	return &t
}
