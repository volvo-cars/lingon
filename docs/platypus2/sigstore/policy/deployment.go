// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package policy

import (
	appsv1 "k8s.io/api/apps/v1"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/resource"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/util/intstr"
)

var SigstoreWebhookDeploy = &appsv1.Deployment{
	ObjectMeta: metav1.ObjectMeta{
		Labels: map[string]string{
			"app.kubernetes.io/instance":   "sigstore",
			"app.kubernetes.io/managed-by": "Helm",
			"app.kubernetes.io/name":       "policy-controller",
			"app.kubernetes.io/version":    "0.8.0",
			"control-plane":                "sigstore-policy-controller-webhook",
			"helm.sh/chart":                "policy-controller-0.6.0",
		},
		Name:      "sigstore-policy-controller-webhook",
		Namespace: "sigstore",
	},
	Spec: appsv1.DeploymentSpec{
		Replicas: P(int32(1)),
		Selector: &metav1.LabelSelector{
			MatchLabels: map[string]string{
				"app.kubernetes.io/instance": "sigstore",
				"app.kubernetes.io/name":     "policy-controller",
				"control-plane":              "sigstore-policy-controller-webhook",
			},
		},
		Template: corev1.PodTemplateSpec{
			ObjectMeta: metav1.ObjectMeta{
				Labels: map[string]string{
					"app.kubernetes.io/instance": "sigstore",
					"app.kubernetes.io/name":     "policy-controller",
					"control-plane":              "sigstore-policy-controller-webhook",
				},
			},
			Spec: corev1.PodSpec{
				Affinity: &corev1.Affinity{
					PodAntiAffinity: &corev1.PodAntiAffinity{
						PreferredDuringSchedulingIgnoredDuringExecution: []corev1.WeightedPodAffinityTerm{
							{
								PodAffinityTerm: corev1.PodAffinityTerm{
									LabelSelector: &metav1.LabelSelector{MatchLabels: map[string]string{"control-plane": "sigstore-policy-controller-webhook"}},
									TopologyKey:   "kubernetes.io/hostname",
								},
								Weight: int32(100),
							},
						},
					},
				},
				Containers: []corev1.Container{
					{
						Env: []corev1.EnvVar{
							{
								Name:      "SYSTEM_NAMESPACE",
								ValueFrom: &corev1.EnvVarSource{FieldRef: &corev1.ObjectFieldSelector{FieldPath: "metadata.namespace"}},
							}, {
								Name:  "CONFIG_LOGGING_NAME",
								Value: "sigstore-policy-controller-webhook-logging",
							}, {
								Name:  "CONFIG_OBSERVABILITY_NAME",
								Value: "sigstore-policy-controller-webhook-observability",
							}, {
								Name:  "METRICS_DOMAIN",
								Value: "sigstore.dev/policy",
							}, {
								Name:  "WEBHOOK_NAME",
								Value: "webhook",
							}, {
								Name:  "HOME",
								Value: "/home/nonroot",
							},
						},
						Image:           "ghcr.io/sigstore/policy-controller/policy-controller@sha256:e91bcd954394b414d3b80adfc2cefdae84dd7985fb938a895471eb34aac57744",
						ImagePullPolicy: corev1.PullPolicy("IfNotPresent"),
						LivenessProbe: &corev1.Probe{
							FailureThreshold:    int32(6),
							InitialDelaySeconds: int32(30),
							PeriodSeconds:       int32(1),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									HTTPHeaders: []corev1.HTTPHeader{
										{
											Name:  "k-kubelet-probe",
											Value: "webhook",
										},
									},
									Path:   "/healthz",
									Port:   intstr.IntOrString{IntVal: int32(8443)},
									Scheme: corev1.URIScheme("HTTPS"),
								},
							},
						},
						Name: "policy-controller-webhook",
						Ports: []corev1.ContainerPort{
							{
								ContainerPort: int32(8443),
								Name:          "https",
								Protocol:      corev1.Protocol("TCP"),
							}, {
								ContainerPort: int32(9090),
								Name:          "metrics",
								Protocol:      corev1.Protocol("TCP"),
							},
						},
						ReadinessProbe: &corev1.Probe{
							FailureThreshold:    int32(6),
							InitialDelaySeconds: int32(20),
							PeriodSeconds:       int32(1),
							ProbeHandler: corev1.ProbeHandler{
								HTTPGet: &corev1.HTTPGetAction{
									HTTPHeaders: []corev1.HTTPHeader{
										{
											Name:  "k-kubelet-probe",
											Value: "webhook",
										},
									},
									Path:   "/readyz",
									Port:   intstr.IntOrString{IntVal: int32(8443)},
									Scheme: corev1.URIScheme("HTTPS"),
								},
							},
						},
						Resources: corev1.ResourceRequirements{
							Limits: map[corev1.ResourceName]resource.Quantity{
								corev1.ResourceName("cpu"):    resource.MustParse("200m"),
								corev1.ResourceName("memory"): resource.MustParse("512Mi"),
							},
							Requests: map[corev1.ResourceName]resource.Quantity{
								corev1.ResourceName("cpu"):    resource.MustParse("100m"),
								corev1.ResourceName("memory"): resource.MustParse("128Mi"),
							},
						},
						SecurityContext: &corev1.SecurityContext{
							Capabilities:           &corev1.Capabilities{Drop: []corev1.Capability{corev1.Capability("ALL")}},
							ReadOnlyRootFilesystem: P(true),
							RunAsUser:              P(int64(1000)),
						},
						VolumeMounts: []corev1.VolumeMount{
							{
								MountPath: "/home/nonroot",
								Name:      "writable-home-dir",
							},
						},
					},
				},
				NodeSelector:                  map[string]string{},
				ServiceAccountName:            "sigstore-policy-controller-webhook",
				TerminationGracePeriodSeconds: P(int64(300)),
				Tolerations:                   []corev1.Toleration{},
				Volumes: []corev1.Volume{
					{
						Name:         "writable-home-dir",
						VolumeSource: corev1.VolumeSource{},
					},
				},
			},
		},
	},
	TypeMeta: metav1.TypeMeta{
		APIVersion: "apps/v1",
		Kind:       "Deployment",
	},
}
