// Copyright (c) 2023 Volvo Car Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lingon. EDIT AS MUCH AS YOU LIKE.

package policy

import (
	"context"
	"errors"
	"os"
	"os/exec"

	"github.com/volvo-cars/lingon/pkg/kube"
	admissionregistrationv1 "k8s.io/api/admissionregistration/v1"
	appsv1 "k8s.io/api/apps/v1"
	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	rbacv1 "k8s.io/api/rbac/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
)

// validate the struct implements the interface
var _ kube.Exporter = (*PolicyController)(nil)

// PolicyController contains kubernetes manifests
type PolicyController struct {
	kube.App

	ClusterimagepoliciesPolicySigstoreDevCRD                               *apiextensionsv1.CustomResourceDefinition
	ConfigCM                                                               *corev1.ConfigMap
	ConfigImagePoliciesCM                                                  *corev1.ConfigMap
	ConfigSigstoreKeysCM                                                   *corev1.ConfigMap
	DefaultingClusterimagepolicySigstoreDevMutatingwebhookconfigurations   *admissionregistrationv1.MutatingWebhookConfiguration
	LeasesCleanupJOBS                                                      *batchv1.Job
	PolicySigstoreDevMutatingwebhookconfigurations                         *admissionregistrationv1.MutatingWebhookConfiguration
	PolicySigstoreDevValidatingwebhookconfigurations                       *admissionregistrationv1.ValidatingWebhookConfiguration
	SigstoreCleanupRB                                                      *rbacv1.RoleBinding
	SigstoreCleanupRole                                                    *rbacv1.Role
	SigstoreWebhookCR                                                      *rbacv1.ClusterRole
	SigstoreWebhookCRB                                                     *rbacv1.ClusterRoleBinding
	SigstoreWebhookCleanupSA                                               *corev1.ServiceAccount
	SigstoreWebhookDeploy                                                  *appsv1.Deployment
	SigstoreWebhookLoggingCM                                               *corev1.ConfigMap
	SigstoreWebhookMetricsSVC                                              *corev1.Service
	SigstoreWebhookRB                                                      *rbacv1.RoleBinding
	SigstoreWebhookRole                                                    *rbacv1.Role
	SigstoreWebhookSA                                                      *corev1.ServiceAccount
	TrustrootsPolicySigstoreDevCRD                                         *apiextensionsv1.CustomResourceDefinition
	ValidatingClusterimagepolicySigstoreDevValidatingwebhookconfigurations *admissionregistrationv1.ValidatingWebhookConfiguration
	WebhookCertsSecrets                                                    *corev1.Secret
	WebhookSVC                                                             *corev1.Service
}

// New creates a new PolicyController
func New() *PolicyController {
	return &PolicyController{
		ClusterimagepoliciesPolicySigstoreDevCRD: ClusterimagepoliciesPolicySigstoreDevCRD,
		ConfigCM:                                 ConfigCM,
		ConfigImagePoliciesCM:                    ConfigImagePoliciesCM,
		ConfigSigstoreKeysCM:                     ConfigSigstoreKeysCM,
		DefaultingClusterimagepolicySigstoreDevMutatingwebhookconfigurations: DefaultingClusterimagepolicySigstoreDevMutatingwebhookconfigurations,
		LeasesCleanupJOBS: LeasesCleanupJOBS,
		PolicySigstoreDevMutatingwebhookconfigurations:   PolicySigstoreDevMutatingwebhookconfigurations,
		PolicySigstoreDevValidatingwebhookconfigurations: PolicySigstoreDevValidatingwebhookconfigurations,
		SigstoreCleanupRB:              SigstoreCleanupRB,
		SigstoreCleanupRole:            SigstoreCleanupRole,
		SigstoreWebhookCR:              SigstoreWebhookCR,
		SigstoreWebhookCRB:             SigstoreWebhookCRB,
		SigstoreWebhookCleanupSA:       SigstoreWebhookCleanupSA,
		SigstoreWebhookDeploy:          SigstoreWebhookDeploy,
		SigstoreWebhookLoggingCM:       SigstoreWebhookLoggingCM,
		SigstoreWebhookMetricsSVC:      SigstoreWebhookMetricsSVC,
		SigstoreWebhookRB:              SigstoreWebhookRB,
		SigstoreWebhookRole:            SigstoreWebhookRole,
		SigstoreWebhookSA:              SigstoreWebhookSA,
		TrustrootsPolicySigstoreDevCRD: TrustrootsPolicySigstoreDevCRD,
		ValidatingClusterimagepolicySigstoreDevValidatingwebhookconfigurations: ValidatingClusterimagepolicySigstoreDevValidatingwebhookconfigurations,
		WebhookCertsSecrets: WebhookCertsSecrets,
		WebhookSVC:          WebhookSVC,
	}
}

// Apply applies the kubernetes objects to the cluster
func (a *PolicyController) Apply(ctx context.Context) error {
	return Apply(ctx, a)
}

// Export exports the kubernetes objects to YAML files in the given directory
func (a *PolicyController) Export(dir string) error {
	return kube.Export(a, kube.WithExportOutputDirectory(dir))
}

// Apply applies the kubernetes objects contained in Exporter to the cluster
func Apply(ctx context.Context, km kube.Exporter) error {
	cmd := exec.CommandContext(ctx, "kubectl", "apply", "-f", "-")
	cmd.Env = os.Environ()        // inherit environment in case we need to use kubectl from a container
	stdin, err := cmd.StdinPipe() // pipe to pass data to kubectl
	if err != nil {
		return err
	}

	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr

	go func() {
		defer func() {
			err = errors.Join(err, stdin.Close())
		}()
		if errEW := kube.Export(
			km,
			kube.WithExportWriter(stdin),
			kube.WithExportAsSingleFile("stdin"),
		); errEW != nil {
			err = errors.Join(err, errEW)
		}
	}()

	if errS := cmd.Start(); errS != nil {
		return errors.Join(err, errS)
	}

	// waits for the command to exit and waits for any copying
	// to stdin or copying from stdout or stderr to complete
	return errors.Join(err, cmd.Wait())
}

// P converts T to *T, useful for basic types
func P[T any](t T) *T {
	return &t
}
